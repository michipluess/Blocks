
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  0000342a  000034be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000342a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000210  00800168  00800168  00003526  2**0
                  ALLOC
  3 .debug_aranges 00000120  00000000  00000000  00003526  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000720  00000000  00000000  00003646  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002233  00000000  00000000  00003d66  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b65  00000000  00000000  00005f99  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001d0d  00000000  00000000  00006afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000490  00000000  00000000  0000880c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000081e  00000000  00000000  00008c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000021a4  00000000  00000000  000094ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000230  00000000  00000000  0000b65e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__ctors_end>
       4:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
       8:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
       c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      10:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      14:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      18:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      1c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      20:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      24:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      28:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      2c:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__vector_11>
      30:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      34:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      38:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      3c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      40:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      44:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      48:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      4c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      50:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      54:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      58:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      5c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      60:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      64:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>

00000068 <Font5x7>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
      f8:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     188:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     198:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     1d8:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..

00000248 <bmp_oslogo>:
	...
     278:	00 00 00 80 80 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
     288:	e0 e0 e0 e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00     ................
	...
     2f0:	00 80 c0 e0 f0 f8 fc fc fe ff ff ff ff ff ff ff     ................
     300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     310:	ff ff ff ff ff fe fc fc f8 f0 e0 c0 80 00 00 00     ................
	...
     36c:	00 80 f0 fc fe ff ff ff ff ff ff ff ff ff ff ff     ................
     37c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     38c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     39c:	ff fe fc f0 c0 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     3ec:	fc ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3fc:	ff ff ff 1f 07 03 01 01 00 00 00 00 00 00 00 01     ................
     40c:	03 07 1f ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     41c:	ff ff ff ff ff fc 00 00 00 00 00 00 00 00 00 00     ................
	...
     46c:	1f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     47c:	ff ff ff fc f0 e0 c0 80 80 00 00 00 00 00 80 c0     ................
     48c:	c0 f0 fc ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     49c:	ff ff ff ff ff 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
	...
     4ec:	00 01 07 1f 7f ff ff ff ff ff ff ff ff ff ff ff     ................
     4fc:	ff ff ff ff ff ff 7f 0f 03 00 00 00 00 01 0f 3f     ...............?
     50c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     51c:	ff 7f 1f 07 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     570:	00 00 01 03 07 0f 1f 3f 3f 7f ff ff ff ff ff 7f     .......??.......
     580:	0f 03 00 00 00 00 00 00 00 00 00 00 01 0f 3f ff     ..............?.
     590:	ff ff ff ff 7f 7f 3f 1f 0f 07 03 01 00 00 00 00     ......?.........
	...
     5fc:	00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     60c:	00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...

00000648 <font_Earthbound_12x19_48to57>:
     648:	00 e0 f0 38 0c 0c 0c 0c 38 f8 c0 00 00 1f 7f e0     ...8....8.......
     658:	80 80 80 80 e0 ff 1f 00 00 00 00 01 01 01 01 01     ................
     668:	00 00 00 00 00 10 18 18 fc fc 00 00 00 00 00 00     ................
     678:	00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00     ................
     688:	01 01 00 00 00 00 00 00 00 08 1c 0c 0c 0c 0c 8c     ................
     698:	f8 f0 00 00 00 f0 f8 9c 8c 86 86 83 83 80 00 00     ................
     6a8:	00 01 01 01 01 01 01 01 01 01 00 00 00 08 1c 0c     ................
     6b8:	0c 0c 0c 8c f8 f0 00 00 00 80 c0 80 81 83 83 c7     ................
     6c8:	ff 7c 00 00 00 00 01 01 01 01 01 01 00 00 00 00     .|..............
     6d8:	00 00 00 80 c0 70 38 fc fc 00 00 00 00 1c 1e 1b     .....p8.........
     6e8:	11 18 10 ff ff 10 18 00 00 00 00 00 00 00 00 01     ................
     6f8:	01 00 00 00 00 00 f4 fc 1c 0c 0c 0c 0c 00 00 00     ................
     708:	00 80 c3 83 83 83 83 c7 fe 78 00 00 00 00 00 01     .........x......
     718:	01 01 01 01 00 00 00 00 00 c0 f0 78 1c 0c 0c 0c     ...........x....
     728:	08 00 00 00 00 3f ff c3 83 83 83 c3 fe 7c 00 00     .....?.......|..
     738:	00 00 00 01 01 01 01 01 00 00 00 00 00 0c 0c 0c     ................
     748:	0c 8c cc 7c 3c 0c 00 00 00 00 80 f0 7c 0f 03 00     ...|<.......|...
     758:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
     768:	00 f0 f8 1c 0c 0c 0c 0c f8 f0 00 00 00 f8 ff 8f     ................
     778:	07 06 06 8f ff f8 00 00 00 00 01 03 03 03 03 01     ................
     788:	01 00 00 00 00 f0 f8 1c 0c 0c 0c 1c f8 e0 00 00     ................
     798:	00 01 87 8e 8c 8c 8c ee 7f 1f 00 00 00 00 01 01     ................
     7a8:	01 01 01 00 00 00 00 00                             ........

000007b0 <Font5x7>:
     7b0:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     7c0:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     7d0:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     7e0:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     7f0:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     800:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     810:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     820:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     830:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     840:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     850:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     860:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     870:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     880:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     890:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     8a0:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     8b0:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     8c0:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     8d0:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     8e0:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     8f0:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     900:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     910:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     920:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     930:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     940:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     950:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     960:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     970:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     980:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..

00000990 <Liberation_Sans15x21_Numbers>:
     990:	06 00 00 00 00 00 00 00 00 0f 00 00 0f 00 00 0f     ................
     9a0:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     9bc:	00 00 07 00 00 1e 00 e0 1f 00 ff 1f f8 ff 03 ff     ................
     9cc:	1f 00 ff 01 00 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
     9ec:	0e 00 00 00 c0 7f 00 f8 ff 01 fc ff 07 fc ff 07     ................
     9fc:	3e 80 0f 0e 00 0e 0e 00 0e 0e 00 0e 1e 80 0f fc     >...............
     a0c:	ff 07 fc ff 07 f8 ff 01 c0 7f 00 00 00 00 0e 00     ................
     a1c:	00 00 70 00 0e 38 00 0e 38 00 0e 1c 00 0e 0e 00     ..p..8..8.......
     a2c:	0e fe ff 0f fe ff 0f fe ff 0f fe ff 0f 00 00 0e     ................
     a3c:	00 00 0e 00 00 0e 00 00 0e 00 00 00 0e 00 00 00     ................
     a4c:	60 00 0f 78 80 0f 7c c0 0f 7c e0 0f 1e f0 0f 0e     `..x..|..|......
     a5c:	f8 0e 0e 7c 0e 0e 3e 0e 1e 1f 0e fe 0f 0e fc 07     ...|..>.........
     a6c:	0e f8 03 0e f0 01 0e 00 00 00 0e 00 00 00 30 80     ..............0.
     a7c:	01 38 80 03 3c 80 07 3c 80 0f 1e 00 0f 0e 0e 0e     .8..<..<........
     a8c:	0e 0e 0e 0e 0e 0e 1e 1f 0f fe ff 0f fc fb 07 fc     ................
     a9c:	f9 03 f0 e0 01 00 00 00 0f 00 00 00 00 f0 00 00     ................
     aac:	f8 00 00 fe 00 80 ef 00 c0 e7 00 f0 e1 00 7c e0     ..............|.
     abc:	00 3e e0 00 fe ff 0f fe ff 0f fe ff 0f fe ff 0f     .>..............
     acc:	00 e0 00 00 e0 00 0e 00 00 00 00 80 01 f8 87 03     ................
     adc:	fe 87 07 fe 87 0f fe 07 0f 0e 03 0e 8e 03 0e 8e     ................
     aec:	03 0e 8e 07 0f 8e ff 07 0e ff 07 0e fe 03 00 fc     ................
     afc:	00 00 00 00 0e 00 00 00 c0 7f 00 f0 ff 01 f8 ff     ................
     b0c:	07 fc ff 07 3e 0e 0f 0e 07 0e 0e 07 0e 0e 07 0e     ....>...........
     b1c:	1e 0f 0f 3e ff 0f 3c fe 07 38 fe 03 30 f8 01 00     ...>..<..8..0...
     b2c:	00 00 0e 00 00 00 0e 00 00 0e 00 00 0e 00 00 0e     ................
     b3c:	00 0f 0e e0 0f 0e f8 0f 0e fe 0f 8e ff 00 ce 0f     ................
     b4c:	00 fe 03 00 fe 00 00 3e 00 00 1e 00 00 00 00 00     .......>........
     b5c:	0e 00 00 00 f0 e0 01 f8 fb 03 fc fb 07 fe ff 0f     ................
     b6c:	1e 1f 0f 0e 0e 0e 0e 0e 0e 0e 0e 0e 1e 1f 0f fe     ................
     b7c:	ff 0f fc fb 07 fc fb 03 f0 e0 01 00 00 00 0e 00     ................
     b8c:	00 00 f0 83 01 f8 87 03 fc 8f 07 fe 9f 0f 1e 1e     ................
     b9c:	0f 0e 1c 0e 0e 1c 0e 0e 1c 0e 1e 8e 0f fc ff 07     ................
     bac:	fc ff 03 f8 ff 01 c0 7f 00 00 00 00                 ............

00000bb8 <__ctors_end>:
     bb8:	11 24       	eor	r1, r1
     bba:	1f be       	out	0x3f, r1	; 63
     bbc:	cf ef       	ldi	r28, 0xFF	; 255
     bbe:	d8 e0       	ldi	r29, 0x08	; 8
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	cd bf       	out	0x3d, r28	; 61

00000bc4 <__do_copy_data>:
     bc4:	11 e0       	ldi	r17, 0x01	; 1
     bc6:	a0 e0       	ldi	r26, 0x00	; 0
     bc8:	b1 e0       	ldi	r27, 0x01	; 1
     bca:	ea e2       	ldi	r30, 0x2A	; 42
     bcc:	f4 e3       	ldi	r31, 0x34	; 52
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <.do_copy_data_start>

00000bd0 <.do_copy_data_loop>:
     bd0:	05 90       	lpm	r0, Z+
     bd2:	0d 92       	st	X+, r0

00000bd4 <.do_copy_data_start>:
     bd4:	a8 36       	cpi	r26, 0x68	; 104
     bd6:	b1 07       	cpc	r27, r17
     bd8:	d9 f7       	brne	.-10     	; 0xbd0 <.do_copy_data_loop>

00000bda <__do_clear_bss>:
     bda:	13 e0       	ldi	r17, 0x03	; 3
     bdc:	a8 e6       	ldi	r26, 0x68	; 104
     bde:	b1 e0       	ldi	r27, 0x01	; 1
     be0:	01 c0       	rjmp	.+2      	; 0xbe4 <.do_clear_bss_start>

00000be2 <.do_clear_bss_loop>:
     be2:	1d 92       	st	X+, r1

00000be4 <.do_clear_bss_start>:
     be4:	a8 37       	cpi	r26, 0x78	; 120
     be6:	b1 07       	cpc	r27, r17
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <.do_clear_bss_loop>
     bea:	0e 94 46 06 	call	0xc8c	; 0xc8c <main>
     bee:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <_exit>

00000bf2 <__bad_interrupt>:
     bf2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000bf6 <__vector_11>:
int Minute=0;
int Milisec=0;


ISR (TIMER1_COMPA_vect)
{
     bf6:	1f 92       	push	r1
     bf8:	0f 92       	push	r0
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	0f 92       	push	r0
     bfe:	11 24       	eor	r1, r1
     c00:	8f 93       	push	r24
     c02:	9f 93       	push	r25
	ms10++;
     c04:	80 91 68 01 	lds	r24, 0x0168
     c08:	8f 5f       	subi	r24, 0xFF	; 255
     c0a:	80 93 68 01 	sts	0x0168, r24
	
	if(ms10==10) //bei 100 ms
     c0e:	8a 30       	cpi	r24, 0x0A	; 10
     c10:	81 f4       	brne	.+32     	; 0xc32 <__vector_11+0x3c>
	{	
		ms100++;
     c12:	80 91 69 01 	lds	r24, 0x0169
     c16:	8f 5f       	subi	r24, 0xFF	; 255
     c18:	80 93 69 01 	sts	0x0169, r24
		Milisec++;
     c1c:	80 91 6e 01 	lds	r24, 0x016E
     c20:	90 91 6f 01 	lds	r25, 0x016F
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	90 93 6f 01 	sts	0x016F, r25
     c2a:	80 93 6e 01 	sts	0x016E, r24
		ms10=0;
     c2e:	10 92 68 01 	sts	0x0168, r1
	}
	if(ms100==10) //Bei 1 sekunde
     c32:	80 91 69 01 	lds	r24, 0x0169
     c36:	8a 30       	cpi	r24, 0x0A	; 10
     c38:	79 f4       	brne	.+30     	; 0xc58 <__vector_11+0x62>
	{
		Sekunde++;
     c3a:	80 91 6a 01 	lds	r24, 0x016A
     c3e:	90 91 6b 01 	lds	r25, 0x016B
     c42:	01 96       	adiw	r24, 0x01	; 1
     c44:	90 93 6b 01 	sts	0x016B, r25
     c48:	80 93 6a 01 	sts	0x016A, r24
		Milisec=0;
     c4c:	10 92 6f 01 	sts	0x016F, r1
     c50:	10 92 6e 01 	sts	0x016E, r1
		ms100=0;
     c54:	10 92 69 01 	sts	0x0169, r1
	}
	if(Sekunde==60)
     c58:	80 91 6a 01 	lds	r24, 0x016A
     c5c:	90 91 6b 01 	lds	r25, 0x016B
     c60:	cc 97       	sbiw	r24, 0x3c	; 60
     c62:	69 f4       	brne	.+26     	; 0xc7e <__vector_11+0x88>
	{
		Sekunde=0;
     c64:	10 92 6b 01 	sts	0x016B, r1
     c68:	10 92 6a 01 	sts	0x016A, r1
		Minute++;
     c6c:	80 91 6c 01 	lds	r24, 0x016C
     c70:	90 91 6d 01 	lds	r25, 0x016D
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	90 93 6d 01 	sts	0x016D, r25
     c7a:	80 93 6c 01 	sts	0x016C, r24
	}
}
     c7e:	9f 91       	pop	r25
     c80:	8f 91       	pop	r24
     c82:	0f 90       	pop	r0
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	0f 90       	pop	r0
     c88:	1f 90       	pop	r1
     c8a:	18 95       	reti

00000c8c <main>:

int main(void)
{/*
     c8c:	af 92       	push	r10
     c8e:	bf 92       	push	r11
     c90:	cf 92       	push	r12
     c92:	df 92       	push	r13
     c94:	ef 92       	push	r14
     c96:	ff 92       	push	r15
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	6e 97       	sbiw	r28, 0x1e	; 30
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
	char buffer2[10];
	
	
	
	
	DDRB|=(1<<PB2);
     cb0:	22 9a       	sbi	0x04, 2	; 4
	DDRC|=(1<<PC3);
     cb2:	3b 9a       	sbi	0x07, 3	; 7
	PORTC&=~(1<<PC3);
     cb4:	43 98       	cbi	0x08, 3	; 8

	
	DDRD&=~((1<<PD5)|(1<<PD6)|(1<<PD2));
     cb6:	8a b1       	in	r24, 0x0a	; 10
     cb8:	8b 79       	andi	r24, 0x9B	; 155
     cba:	8a b9       	out	0x0a, r24	; 10
	PORTD|=((1<<PD5)|(1<<PD6)|(1<<PD2));
     cbc:	8b b1       	in	r24, 0x0b	; 11
     cbe:	84 66       	ori	r24, 0x64	; 100
     cc0:	8b b9       	out	0x0b, r24	; 11
//====================================================================
	
	//Timer 1 Configuration
	OCR1A = 1270;	//OCR1A = 0x3D08;==1sec
     cc2:	86 ef       	ldi	r24, 0xF6	; 246
     cc4:	94 e0       	ldi	r25, 0x04	; 4
     cc6:	90 93 89 00 	sts	0x0089, r25
     cca:	80 93 88 00 	sts	0x0088, r24
	
    TCCR1B |= (1 << WGM12);
     cce:	80 91 81 00 	lds	r24, 0x0081
     cd2:	88 60       	ori	r24, 0x08	; 8
     cd4:	80 93 81 00 	sts	0x0081, r24
    // Mode 4, CTC on OCR1A

    TIMSK1 |= (1 << OCIE1A);
     cd8:	80 91 6f 00 	lds	r24, 0x006F
     cdc:	82 60       	ori	r24, 0x02	; 2
     cde:	80 93 6f 00 	sts	0x006F, r24
    //Set interrupt on compare match

    TCCR1B |= (1 << CS11)|(1 << CS10);
     ce2:	80 91 81 00 	lds	r24, 0x0081
     ce6:	83 60       	ori	r24, 0x03	; 3
     ce8:	80 93 81 00 	sts	0x0081, r24
	start=0;
	ball_vert=DOWN;
	ball_horiz=RIGHT;
*/

	glcd_init();
     cec:	0e 94 b5 07 	call	0xf6a	; 0xf6a <glcd_init>
	//glcd_clear();
	//glcd_write();
	glcd_tiny_set_font(Font5x7 ,5,7,32,127);
     cf0:	88 e6       	ldi	r24, 0x68	; 104
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	65 e0       	ldi	r22, 0x05	; 5
     cf6:	47 e0       	ldi	r20, 0x07	; 7
     cf8:	20 e2       	ldi	r18, 0x20	; 32
     cfa:	0f e7       	ldi	r16, 0x7F	; 127
     cfc:	0e 94 70 13 	call	0x26e0	; 0x26e0 <glcd_tiny_set_font>
	
	while (1){
	glcd_clear_buffer();
	sei(); //enable global interrupt
	
	sprintf(buffer2,"%d",Milisec);
     d00:	95 e1       	ldi	r25, 0x15	; 21
     d02:	a9 2e       	mov	r10, r25
     d04:	b1 2c       	mov	r11, r1
     d06:	ac 0e       	add	r10, r28
     d08:	bd 1e       	adc	r11, r29
     d0a:	00 e0       	ldi	r16, 0x00	; 0
     d0c:	11 e0       	ldi	r17, 0x01	; 1
	glcd_tiny_draw_string(30,1,buffer2);
	
	
	sprintf(buffer,"%d",Sekunde);
     d0e:	6e 01       	movw	r12, r28
     d10:	08 94       	sec
     d12:	c1 1c       	adc	r12, r1
     d14:	d1 1c       	adc	r13, r1
	glcd_tiny_draw_string(30,2,buffer);
	
	sprintf(buffer1,"%d",Minute);
     d16:	8b e0       	ldi	r24, 0x0B	; 11
     d18:	e8 2e       	mov	r14, r24
     d1a:	f1 2c       	mov	r15, r1
     d1c:	ec 0e       	add	r14, r28
     d1e:	fd 1e       	adc	r15, r29
	
		
	//glcd_write();	
	
	while (1){
	glcd_clear_buffer();
     d20:	0e 94 7d 07 	call	0xefa	; 0xefa <glcd_clear_buffer>
	sei(); //enable global interrupt
     d24:	78 94       	sei
	
	sprintf(buffer2,"%d",Milisec);
     d26:	00 d0       	rcall	.+0      	; 0xd28 <main+0x9c>
     d28:	00 d0       	rcall	.+0      	; 0xd2a <main+0x9e>
     d2a:	00 d0       	rcall	.+0      	; 0xd2c <main+0xa0>
     d2c:	ed b7       	in	r30, 0x3d	; 61
     d2e:	fe b7       	in	r31, 0x3e	; 62
     d30:	31 96       	adiw	r30, 0x01	; 1
     d32:	ad b7       	in	r26, 0x3d	; 61
     d34:	be b7       	in	r27, 0x3e	; 62
     d36:	12 96       	adiw	r26, 0x02	; 2
     d38:	bc 92       	st	X, r11
     d3a:	ae 92       	st	-X, r10
     d3c:	11 97       	sbiw	r26, 0x01	; 1
     d3e:	13 83       	std	Z+3, r17	; 0x03
     d40:	02 83       	std	Z+2, r16	; 0x02
     d42:	80 91 6e 01 	lds	r24, 0x016E
     d46:	90 91 6f 01 	lds	r25, 0x016F
     d4a:	95 83       	std	Z+5, r25	; 0x05
     d4c:	84 83       	std	Z+4, r24	; 0x04
     d4e:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <sprintf>
	glcd_tiny_draw_string(30,1,buffer2);
     d52:	8d b7       	in	r24, 0x3d	; 61
     d54:	9e b7       	in	r25, 0x3e	; 62
     d56:	06 96       	adiw	r24, 0x06	; 6
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	9e bf       	out	0x3e, r25	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	8d bf       	out	0x3d, r24	; 61
     d62:	8e e1       	ldi	r24, 0x1E	; 30
     d64:	61 e0       	ldi	r22, 0x01	; 1
     d66:	a5 01       	movw	r20, r10
     d68:	0e 94 a6 14 	call	0x294c	; 0x294c <glcd_tiny_draw_string>
	
	
	sprintf(buffer,"%d",Sekunde);
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <main+0xe2>
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <main+0xe4>
     d70:	00 d0       	rcall	.+0      	; 0xd72 <main+0xe6>
     d72:	ed b7       	in	r30, 0x3d	; 61
     d74:	fe b7       	in	r31, 0x3e	; 62
     d76:	31 96       	adiw	r30, 0x01	; 1
     d78:	ad b7       	in	r26, 0x3d	; 61
     d7a:	be b7       	in	r27, 0x3e	; 62
     d7c:	12 96       	adiw	r26, 0x02	; 2
     d7e:	dc 92       	st	X, r13
     d80:	ce 92       	st	-X, r12
     d82:	11 97       	sbiw	r26, 0x01	; 1
     d84:	13 83       	std	Z+3, r17	; 0x03
     d86:	02 83       	std	Z+2, r16	; 0x02
     d88:	80 91 6a 01 	lds	r24, 0x016A
     d8c:	90 91 6b 01 	lds	r25, 0x016B
     d90:	95 83       	std	Z+5, r25	; 0x05
     d92:	84 83       	std	Z+4, r24	; 0x04
     d94:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <sprintf>
	glcd_tiny_draw_string(30,2,buffer);
     d98:	8d b7       	in	r24, 0x3d	; 61
     d9a:	9e b7       	in	r25, 0x3e	; 62
     d9c:	06 96       	adiw	r24, 0x06	; 6
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	9e bf       	out	0x3e, r25	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	8d bf       	out	0x3d, r24	; 61
     da8:	8e e1       	ldi	r24, 0x1E	; 30
     daa:	62 e0       	ldi	r22, 0x02	; 2
     dac:	a6 01       	movw	r20, r12
     dae:	0e 94 a6 14 	call	0x294c	; 0x294c <glcd_tiny_draw_string>
	
	sprintf(buffer1,"%d",Minute);
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <main+0x128>
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <main+0x12a>
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <main+0x12c>
     db8:	ed b7       	in	r30, 0x3d	; 61
     dba:	fe b7       	in	r31, 0x3e	; 62
     dbc:	31 96       	adiw	r30, 0x01	; 1
     dbe:	ad b7       	in	r26, 0x3d	; 61
     dc0:	be b7       	in	r27, 0x3e	; 62
     dc2:	12 96       	adiw	r26, 0x02	; 2
     dc4:	fc 92       	st	X, r15
     dc6:	ee 92       	st	-X, r14
     dc8:	11 97       	sbiw	r26, 0x01	; 1
     dca:	13 83       	std	Z+3, r17	; 0x03
     dcc:	02 83       	std	Z+2, r16	; 0x02
     dce:	80 91 6c 01 	lds	r24, 0x016C
     dd2:	90 91 6d 01 	lds	r25, 0x016D
     dd6:	95 83       	std	Z+5, r25	; 0x05
     dd8:	84 83       	std	Z+4, r24	; 0x04
     dda:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <sprintf>
	glcd_tiny_draw_string(30,3,buffer1);
     dde:	8d b7       	in	r24, 0x3d	; 61
     de0:	9e b7       	in	r25, 0x3e	; 62
     de2:	06 96       	adiw	r24, 0x06	; 6
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	9e bf       	out	0x3e, r25	; 62
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	8d bf       	out	0x3d, r24	; 61
     dee:	8e e1       	ldi	r24, 0x1E	; 30
     df0:	63 e0       	ldi	r22, 0x03	; 3
     df2:	a7 01       	movw	r20, r14
     df4:	0e 94 a6 14 	call	0x294c	; 0x294c <glcd_tiny_draw_string>
	glcd_write();
     df8:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_write>
     dfc:	91 cf       	rjmp	.-222    	; 0xd20 <main+0x94>

00000dfe <glcd_update_bbox>:
glcd_BoundingBox_t *glcd_bbox_selected;

/** @} */

void glcd_update_bbox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
     dfe:	98 2f       	mov	r25, r24
     e00:	84 35       	cpi	r24, 0x54	; 84
     e02:	08 f0       	brcs	.+2      	; 0xe06 <glcd_update_bbox+0x8>
     e04:	93 e5       	ldi	r25, 0x53	; 83
     e06:	44 35       	cpi	r20, 0x54	; 84
     e08:	08 f0       	brcs	.+2      	; 0xe0c <glcd_update_bbox+0xe>
     e0a:	43 e5       	ldi	r20, 0x53	; 83
     e0c:	60 33       	cpi	r22, 0x30	; 48
     e0e:	08 f0       	brcs	.+2      	; 0xe12 <glcd_update_bbox+0x14>
     e10:	6f e2       	ldi	r22, 0x2F	; 47
     e12:	20 33       	cpi	r18, 0x30	; 48
     e14:	08 f0       	brcs	.+2      	; 0xe18 <glcd_update_bbox+0x1a>
     e16:	2f e2       	ldi	r18, 0x2F	; 47
	if (ymax > (GLCD_LCD_HEIGHT-1)) {
		ymax = GLCD_LCD_HEIGHT-1;
	}

	/* Update the bounding box size */
	if (xmin < glcd_bbox_selected->x_min) {
     e18:	e0 91 6f 03 	lds	r30, 0x036F
     e1c:	f0 91 70 03 	lds	r31, 0x0370
     e20:	80 81       	ld	r24, Z
     e22:	98 17       	cp	r25, r24
     e24:	08 f4       	brcc	.+2      	; 0xe28 <glcd_update_bbox+0x2a>
		glcd_bbox_selected->x_min = xmin;
     e26:	90 83       	st	Z, r25
	}		
	if (xmax > glcd_bbox_selected->x_max) {
     e28:	82 81       	ldd	r24, Z+2	; 0x02
     e2a:	84 17       	cp	r24, r20
     e2c:	08 f4       	brcc	.+2      	; 0xe30 <glcd_update_bbox+0x32>
		glcd_bbox_selected->x_max = xmax;
     e2e:	42 83       	std	Z+2, r20	; 0x02
	}
	if (ymin < glcd_bbox_selected->y_min) {
     e30:	81 81       	ldd	r24, Z+1	; 0x01
     e32:	68 17       	cp	r22, r24
     e34:	08 f4       	brcc	.+2      	; 0xe38 <glcd_update_bbox+0x3a>
		glcd_bbox_selected->y_min = ymin;
     e36:	61 83       	std	Z+1, r22	; 0x01
	}		
	if (ymax > glcd_bbox_selected->y_max) {
     e38:	83 81       	ldd	r24, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	08 f4       	brcc	.+2      	; 0xe40 <glcd_update_bbox+0x42>
		glcd_bbox_selected->y_max = ymax;
     e3e:	23 83       	std	Z+3, r18	; 0x03
     e40:	08 95       	ret

00000e42 <glcd_reset_bbox>:
}

void glcd_reset_bbox()
{
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
     e42:	e0 91 6f 03 	lds	r30, 0x036F
     e46:	f0 91 70 03 	lds	r31, 0x0370
     e4a:	83 e5       	ldi	r24, 0x53	; 83
     e4c:	80 83       	st	Z, r24
	glcd_bbox_selected->x_max = 0;
     e4e:	12 82       	std	Z+2, r1	; 0x02
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
     e50:	8f e2       	ldi	r24, 0x2F	; 47
     e52:	81 83       	std	Z+1, r24	; 0x01
	glcd_bbox_selected->y_max = 0;	
     e54:	13 82       	std	Z+3, r1	; 0x03
}
     e56:	08 95       	ret

00000e58 <glcd_bbox_reset>:
}

void glcd_reset_bbox()
{
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
     e58:	e0 91 6f 03 	lds	r30, 0x036F
     e5c:	f0 91 70 03 	lds	r31, 0x0370
     e60:	83 e5       	ldi	r24, 0x53	; 83
     e62:	80 83       	st	Z, r24
	glcd_bbox_selected->x_max = 0;
     e64:	12 82       	std	Z+2, r1	; 0x02
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
     e66:	8f e2       	ldi	r24, 0x2F	; 47
     e68:	81 83       	std	Z+1, r24	; 0x01
	glcd_bbox_selected->y_max = 0;	
     e6a:	13 82       	std	Z+3, r1	; 0x03
}

void glcd_bbox_reset() {
	glcd_reset_bbox();
}
     e6c:	08 95       	ret

00000e6e <glcd_bbox_refresh>:

void glcd_bbox_refresh() {
	/* Marks bounding box as entire screen, so on next glcd_write(), it writes the entire buffer to the LCD */
	glcd_bbox_selected->x_min = 0;
     e6e:	e0 91 6f 03 	lds	r30, 0x036F
     e72:	f0 91 70 03 	lds	r31, 0x0370
     e76:	10 82       	st	Z, r1
	glcd_bbox_selected->x_max = GLCD_LCD_WIDTH - 1;
     e78:	83 e5       	ldi	r24, 0x53	; 83
     e7a:	82 83       	std	Z+2, r24	; 0x02
	glcd_bbox_selected->y_min = 0;
     e7c:	11 82       	std	Z+1, r1	; 0x01
	glcd_bbox_selected->y_max = GLCD_LCD_HEIGHT -1;		
     e7e:	8f e2       	ldi	r24, 0x2F	; 47
     e80:	83 83       	std	Z+3, r24	; 0x03
}
     e82:	08 95       	ret

00000e84 <glcd_select_screen>:
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
}

void glcd_select_screen(uint8_t *buffer, glcd_BoundingBox_t *bbox)
{
	glcd_buffer_selected = buffer;
     e84:	90 93 6e 03 	sts	0x036E, r25
     e88:	80 93 6d 03 	sts	0x036D, r24
	glcd_bbox_selected = bbox;
     e8c:	70 93 70 03 	sts	0x0370, r23
     e90:	60 93 6f 03 	sts	0x036F, r22
}
     e94:	08 95       	ret

00000e96 <glcd_scroll>:
		uint8_t x;
		for (x=0; x<GLCD_LCD_WIDTH; x++) {
			
		}
	}
}
     e96:	08 95       	ret

00000e98 <glcd_scroll_line>:

void glcd_scroll_line(void)
{
     e98:	40 e0       	ldi	r20, 0x00	; 0
     e9a:	50 e0       	ldi	r21, 0x00	; 0
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
		if (y < (number_of_rows - 1)) {
			/* All lines except the last */
			memcpy(glcd_buffer_selected + y*GLCD_LCD_WIDTH, glcd_buffer_selected + y*GLCD_LCD_WIDTH + GLCD_LCD_WIDTH, GLCD_LCD_WIDTH);
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
     ea0:	64 e5       	ldi	r22, 0x54	; 84
     ea2:	80 91 6d 03 	lds	r24, 0x036D
     ea6:	90 91 6e 03 	lds	r25, 0x036E
void glcd_scroll_line(void)
{
	uint8_t y;
	uint8_t number_of_rows = GLCD_LCD_HEIGHT / 8;
	for (y=0; y<number_of_rows; y++) {
		if (y < (number_of_rows - 1)) {
     eaa:	45 30       	cpi	r20, 0x05	; 5
     eac:	51 05       	cpc	r21, r1
     eae:	81 f0       	breq	.+32     	; 0xed0 <glcd_scroll_line+0x38>
			/* All lines except the last */
			memcpy(glcd_buffer_selected + y*GLCD_LCD_WIDTH, glcd_buffer_selected + y*GLCD_LCD_WIDTH + GLCD_LCD_WIDTH, GLCD_LCD_WIDTH);
     eb0:	dc 01       	movw	r26, r24
     eb2:	a2 0f       	add	r26, r18
     eb4:	b3 1f       	adc	r27, r19
     eb6:	2c 5a       	subi	r18, 0xAC	; 172
     eb8:	3f 4f       	sbci	r19, 0xFF	; 255
     eba:	fc 01       	movw	r30, r24
     ebc:	e2 0f       	add	r30, r18
     ebe:	f3 1f       	adc	r31, r19
     ec0:	24 55       	subi	r18, 0x54	; 84
     ec2:	30 40       	sbci	r19, 0x00	; 0
     ec4:	84 e5       	ldi	r24, 0x54	; 84
     ec6:	01 90       	ld	r0, Z+
     ec8:	0d 92       	st	X+, r0
     eca:	81 50       	subi	r24, 0x01	; 1
     ecc:	e1 f7       	brne	.-8      	; 0xec6 <glcd_scroll_line+0x2e>
     ece:	07 c0       	rjmp	.+14     	; 0xede <glcd_scroll_line+0x46>
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
     ed0:	8c 55       	subi	r24, 0x5C	; 92
     ed2:	9e 4f       	sbci	r25, 0xFE	; 254
     ed4:	dc 01       	movw	r26, r24
     ed6:	86 2f       	mov	r24, r22
     ed8:	1d 92       	st	X+, r1
     eda:	8a 95       	dec	r24
     edc:	e9 f7       	brne	.-6      	; 0xed8 <glcd_scroll_line+0x40>
     ede:	4f 5f       	subi	r20, 0xFF	; 255
     ee0:	5f 4f       	sbci	r21, 0xFF	; 255
     ee2:	2c 5a       	subi	r18, 0xAC	; 172
     ee4:	3f 4f       	sbci	r19, 0xFF	; 255

void glcd_scroll_line(void)
{
	uint8_t y;
	uint8_t number_of_rows = GLCD_LCD_HEIGHT / 8;
	for (y=0; y<number_of_rows; y++) {
     ee6:	46 30       	cpi	r20, 0x06	; 6
     ee8:	51 05       	cpc	r21, r1
     eea:	d9 f6       	brne	.-74     	; 0xea2 <glcd_scroll_line+0xa>
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
		}
	}
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	43 e5       	ldi	r20, 0x53	; 83
     ef2:	2f e2       	ldi	r18, 0x2F	; 47
     ef4:	0e 94 ff 06 	call	0xdfe	; 0xdfe <glcd_update_bbox>
}
     ef8:	08 95       	ret

00000efa <glcd_clear_buffer>:
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
	glcd_write();
}

void glcd_clear_buffer(void) {
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
     efa:	e0 91 6d 03 	lds	r30, 0x036D
     efe:	f0 91 6e 03 	lds	r31, 0x036E
     f02:	88 ef       	ldi	r24, 0xF8	; 248
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	df 01       	movw	r26, r30
     f08:	9c 01       	movw	r18, r24
     f0a:	1d 92       	st	X+, r1
     f0c:	21 50       	subi	r18, 0x01	; 1
     f0e:	30 40       	sbci	r19, 0x00	; 0
     f10:	e1 f7       	brne	.-8      	; 0xf0a <glcd_clear_buffer+0x10>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	43 e5       	ldi	r20, 0x53	; 83
     f18:	2f e2       	ldi	r18, 0x2F	; 47
     f1a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <glcd_update_bbox>
}
     f1e:	08 95       	ret

00000f20 <glcd_clear>:
	glcd_bbox_selected->y_min = 0;
	glcd_bbox_selected->y_max = GLCD_LCD_HEIGHT -1;		
}

void glcd_clear(void) {
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
     f20:	e0 91 6d 03 	lds	r30, 0x036D
     f24:	f0 91 6e 03 	lds	r31, 0x036E
     f28:	88 ef       	ldi	r24, 0xF8	; 248
     f2a:	91 e0       	ldi	r25, 0x01	; 1
     f2c:	df 01       	movw	r26, r30
     f2e:	9c 01       	movw	r18, r24
     f30:	1d 92       	st	X+, r1
     f32:	21 50       	subi	r18, 0x01	; 1
     f34:	30 40       	sbci	r19, 0x00	; 0
     f36:	e1 f7       	brne	.-8      	; 0xf30 <glcd_clear+0x10>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	43 e5       	ldi	r20, 0x53	; 83
     f3e:	2f e2       	ldi	r18, 0x2F	; 47
     f40:	0e 94 ff 06 	call	0xdfe	; 0xdfe <glcd_update_bbox>
	glcd_write();
     f44:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_write>
}
     f48:	08 95       	ret

00000f4a <glcd_spi_write>:
	
}

void glcd_spi_write(uint8_t c)
{
	GLCD_SELECT();
     f4a:	28 98       	cbi	0x05, 0	; 5
	SPDR = c;
     f4c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); /* wait until transmission is complete */
     f4e:	0d b4       	in	r0, 0x2d	; 45
     f50:	07 fe       	sbrs	r0, 7
     f52:	fd cf       	rjmp	.-6      	; 0xf4e <glcd_spi_write+0x4>
	GLCD_DESELECT();	
     f54:	28 9a       	sbi	0x05, 0	; 5
}
     f56:	08 95       	ret

00000f58 <glcd_reset>:

void glcd_reset(void)
{
	/* Toggle RST low to reset. Minimum pulse 100ns on datasheet. */
	GLCD_SELECT();
     f58:	28 98       	cbi	0x05, 0	; 5
	GLCD_RESET_LOW();
     f5a:	5f 98       	cbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f5c:	80 ea       	ldi	r24, 0xA0	; 160
     f5e:	9f e0       	ldi	r25, 0x0F	; 15
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <glcd_reset+0x8>
	delay_ms(GLCD_RESET_TIME);
	GLCD_RESET_HIGH();
     f64:	5f 9a       	sbi	0x0b, 7	; 11
	GLCD_DESELECT();	
     f66:	28 9a       	sbi	0x05, 0	; 5
}
     f68:	08 95       	ret

00000f6a <glcd_init>:
	/*
	 * Set up SPI for AVR8
	 * Note: AVR's SS pin must be set to output, regardless of whether we
	 * actually use it. This is a requirement of SPI mster mode.
	 */
	sbi(DDR(AVR_SS_PORT),AVR_SS_PIN);
     f6a:	20 9a       	sbi	0x04, 0	; 4
	
	/*
	 *  Set MOSI, Master SS, SCK to output (otherwise SPI won't work)
	 *  Must be done even if native SS pin not used
	 */
	sbi(DDR(CONTROLLER_MOSI_PORT),CONTROLLER_MOSI_PIN);
     f6c:	23 9a       	sbi	0x04, 3	; 4
	sbi(DDR(CONTROLLER_SS_PORT),CONTROLLER_SS_PIN);
     f6e:	20 9a       	sbi	0x04, 0	; 4
	sbi(DDR(CONTROLLER_SCK_PORT),CONTROLLER_SCK_PIN);
     f70:	25 9a       	sbi	0x04, 5	; 4
		
	/* Set SS, DC and RST pins to output */
	sbi( DDR(CONTROLLER_SS_PORT), CONTROLLER_SS_PIN );
     f72:	20 9a       	sbi	0x04, 0	; 4
	sbi( DDR(CONTROLLER_DC_PORT), CONTROLLER_DC_PIN );
     f74:	21 9a       	sbi	0x04, 1	; 4
	sbi( DDR(CONTROLLER_RST_PORT), CONTROLLER_RST_PIN );
     f76:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Deselect LCD */
	GLCD_DESELECT();
     f78:	28 9a       	sbi	0x05, 0	; 5

	/*
	 * Max allowed SPI clock is 4 MHz from datasheet.
	 * Enable SPI, set master mode and clock rate to /4 (4MHz with F_CPU=8MHz)
	 */
	SPCR = (1<<SPE)|(1<<MSTR);
     f7a:	80 e5       	ldi	r24, 0x50	; 80
     f7c:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0;
     f7e:	1d bc       	out	0x2d, r1	; 45
	
	glcd_PCD8544_init();
     f80:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <glcd_PCD8544_init>

	/* Select screen buffer */
	glcd_select_screen(glcd_buffer,&glcd_bbox);
     f84:	85 e7       	ldi	r24, 0x75	; 117
     f86:	91 e0       	ldi	r25, 0x01	; 1
     f88:	61 e7       	ldi	r22, 0x71	; 113
     f8a:	71 e0       	ldi	r23, 0x01	; 1
     f8c:	0e 94 42 07 	call	0xe84	; 0xe84 <glcd_select_screen>
	
	/* Clear screen, we are now ready to go */
	glcd_clear();
     f90:	0e 94 90 07 	call	0xf20	; 0xf20 <glcd_clear>
	
#else
	#error "Controller not supported"
#endif /* GLCD_CONTROLLER_* */
	
}
     f94:	08 95       	ret

00000f96 <glcd_data>:
	glcd_spi_write(c);
}

void glcd_data(uint8_t c)
{
	GLCD_DC_HIGH();
     f96:	29 9a       	sbi	0x05, 1	; 5
	glcd_spi_write(c);
     f98:	0e 94 a5 07 	call	0xf4a	; 0xf4a <glcd_spi_write>
}
     f9c:	08 95       	ret

00000f9e <glcd_command>:

#include "../glcd.h"

void glcd_command(uint8_t c)
{
	GLCD_DC_LOW();
     f9e:	29 98       	cbi	0x05, 1	; 5
	glcd_spi_write(c);
     fa0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <glcd_spi_write>
}
     fa4:	08 95       	ret

00000fa6 <glcd_PCD8544_init>:

}

void glcd_PCD8544_init(void) {

	glcd_reset();
     fa6:	0e 94 ac 07 	call	0xf58	; 0xf58 <glcd_reset>
	
	/* Get into the EXTENDED mode! */
	glcd_command(PCD8544_FUNCTION_SET | PCD8544_EXTENDED_INSTRUCTION);
     faa:	81 e2       	ldi	r24, 0x21	; 33
     fac:	0e 94 cf 07 	call	0xf9e	; 0xf9e <glcd_command>

	/* LCD bias select (4 is optimal?) */
	glcd_command(PCD8544_SET_BIAS | 0x2);
     fb0:	82 e1       	ldi	r24, 0x12	; 18
     fb2:	0e 94 cf 07 	call	0xf9e	; 0xf9e <glcd_command>

	/* Set VOP (affects contrast) */
	glcd_command(PCD8544_SET_VOP | 60); /* Experimentally determined, play with this figure until contrast looks nice */
     fb6:	8c eb       	ldi	r24, 0xBC	; 188
     fb8:	0e 94 cf 07 	call	0xf9e	; 0xf9e <glcd_command>

	/* Back to standard instructions */
	glcd_command(PCD8544_FUNCTION_SET);
     fbc:	80 e2       	ldi	r24, 0x20	; 32
     fbe:	0e 94 cf 07 	call	0xf9e	; 0xf9e <glcd_command>

	/* Normal mode */
	glcd_command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_NORMAL);
     fc2:	8c e0       	ldi	r24, 0x0C	; 12
     fc4:	0e 94 cf 07 	call	0xf9e	; 0xf9e <glcd_command>
}
     fc8:	08 95       	ret

00000fca <glcd_write>:
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
}

void glcd_write()
{
     fca:	ef 92       	push	r14
     fcc:	ff 92       	push	r15
     fce:	0f 93       	push	r16
     fd0:	1f 93       	push	r17
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	00 e0       	ldi	r16, 0x00	; 0
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	c0 e0       	ldi	r28, 0x00	; 0
     fde:	d0 e0       	ldi	r29, 0x00	; 0

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
		/* Each bank is a single row 8 bits tall */
		uint8_t column;

		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
     fe0:	e0 91 6f 03 	lds	r30, 0x036F
     fe4:	f0 91 70 03 	lds	r31, 0x0370
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
}

void glcd_write()
{
     fe8:	88 e0       	ldi	r24, 0x08	; 8
     fea:	e8 2e       	mov	r14, r24
     fec:	f1 2c       	mov	r15, r1
     fee:	e2 0e       	add	r14, r18
     ff0:	f3 1e       	adc	r15, r19

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
		/* Each bank is a single row 8 bits tall */
		uint8_t column;

		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
     ff2:	81 81       	ldd	r24, Z+1	; 0x01
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	8e 15       	cp	r24, r14
     ff8:	9f 05       	cpc	r25, r15
     ffa:	54 f5       	brge	.+84     	; 0x1050 <glcd_write+0x86>
			continue; /* Skip the entire bank */
		}

		if (glcd_bbox_selected->y_max < bank*8) {
     ffc:	83 81       	ldd	r24, Z+3	; 0x03
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	82 17       	cp	r24, r18
    1002:	93 07       	cpc	r25, r19
    1004:	64 f1       	brlt	.+88     	; 0x105e <glcd_write+0x94>
			break;    /* No more banks need updating */
		}

		glcd_command(PCD8544_SET_Y_ADDRESS | bank);
    1006:	80 2f       	mov	r24, r16
    1008:	80 64       	ori	r24, 0x40	; 64
    100a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <glcd_command>
		glcd_command(PCD8544_SET_X_ADDRESS | glcd_bbox_selected->x_min);
    100e:	e0 91 6f 03 	lds	r30, 0x036F
    1012:	f0 91 70 03 	lds	r31, 0x0370
    1016:	80 81       	ld	r24, Z
    1018:	80 68       	ori	r24, 0x80	; 128
    101a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <glcd_command>

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
    101e:	e0 91 6f 03 	lds	r30, 0x036F
    1022:	f0 91 70 03 	lds	r31, 0x0370
    1026:	10 81       	ld	r17, Z
    1028:	0c c0       	rjmp	.+24     	; 0x1042 <glcd_write+0x78>
		{
			glcd_data( glcd_buffer_selected[PCD8544_MAX_COLS * bank + column] );
    102a:	e0 91 6d 03 	lds	r30, 0x036D
    102e:	f0 91 6e 03 	lds	r31, 0x036E
    1032:	ec 0f       	add	r30, r28
    1034:	fd 1f       	adc	r31, r29
    1036:	e1 0f       	add	r30, r17
    1038:	f1 1d       	adc	r31, r1
    103a:	80 81       	ld	r24, Z
    103c:	0e 94 cb 07 	call	0xf96	; 0xf96 <glcd_data>
		}

		glcd_command(PCD8544_SET_Y_ADDRESS | bank);
		glcd_command(PCD8544_SET_X_ADDRESS | glcd_bbox_selected->x_min);

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
    1040:	1f 5f       	subi	r17, 0xFF	; 255
    1042:	e0 91 6f 03 	lds	r30, 0x036F
    1046:	f0 91 70 03 	lds	r31, 0x0370
    104a:	82 81       	ldd	r24, Z+2	; 0x02
    104c:	81 17       	cp	r24, r17
    104e:	68 f7       	brcc	.-38     	; 0x102a <glcd_write+0x60>

void glcd_write()
{
	uint8_t bank;

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
    1050:	0f 5f       	subi	r16, 0xFF	; 255
    1052:	cc 5a       	subi	r28, 0xAC	; 172
    1054:	df 4f       	sbci	r29, 0xFF	; 255
    1056:	06 30       	cpi	r16, 0x06	; 6
    1058:	11 f0       	breq	.+4      	; 0x105e <glcd_write+0x94>
    105a:	97 01       	movw	r18, r14
    105c:	c1 cf       	rjmp	.-126    	; 0xfe0 <glcd_write+0x16>
		{
			glcd_data( glcd_buffer_selected[PCD8544_MAX_COLS * bank + column] );
		}
	}

	glcd_reset_bbox();
    105e:	0e 94 21 07 	call	0xe42	; 0xe42 <glcd_reset_bbox>

}
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	ff 90       	pop	r15
    106c:	ef 90       	pop	r14
    106e:	08 95       	ret

00001070 <glcd_set_x_address>:
	glcd_command(PCD8544_SET_Y_ADDRESS|(y > 5 ? 5 : y));
}

void glcd_set_x_address(uint8_t x)
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
    1070:	80 68       	ori	r24, 0x80	; 128
    1072:	0e 94 cf 07 	call	0xf9e	; 0xf9e <glcd_command>
}
    1076:	08 95       	ret

00001078 <glcd_set_y_address>:
	glcd_command(PCD8544_FUNCTION_SET);
}

void glcd_set_y_address(uint8_t y)
{
	glcd_command(PCD8544_SET_Y_ADDRESS|(y > 5 ? 5 : y));
    1078:	86 30       	cpi	r24, 0x06	; 6
    107a:	10 f0       	brcs	.+4      	; 0x1080 <glcd_set_y_address+0x8>
    107c:	85 e4       	ldi	r24, 0x45	; 69
    107e:	01 c0       	rjmp	.+2      	; 0x1082 <glcd_set_y_address+0xa>
    1080:	80 64       	ori	r24, 0x40	; 64
    1082:	0e 94 cf 07 	call	0xf9e	; 0xf9e <glcd_command>
}
    1086:	08 95       	ret

00001088 <glcd_power_up>:
	glcd_command(PCD8544_FUNCTION_SET|PCD8544_POWER_DOWN);
}

void glcd_power_up(void)
{
	glcd_command(PCD8544_FUNCTION_SET);
    1088:	80 e2       	ldi	r24, 0x20	; 32
    108a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <glcd_command>
}
    108e:	08 95       	ret

00001090 <glcd_power_down>:
}

void glcd_power_down(void)
{
	/* First, fill RAM with zeroes to ensure minimum specified current consumption */
	glcd_clear();
    1090:	0e 94 90 07 	call	0xf20	; 0xf20 <glcd_clear>

	/* Power down */
	glcd_command(PCD8544_FUNCTION_SET|PCD8544_POWER_DOWN);
    1094:	84 e2       	ldi	r24, 0x24	; 36
    1096:	0e 94 cf 07 	call	0xf9e	; 0xf9e <glcd_command>
}
    109a:	08 95       	ret

0000109c <glcd_set_contrast>:
{
	GLCD_DC_HIGH();
	glcd_spi_write(c);
}

void glcd_set_contrast(uint8_t val) {
    109c:	1f 93       	push	r17
    109e:	18 2f       	mov	r17, r24
	glcd_command(PCD8544_FUNCTION_SET | PCD8544_EXTENDED_INSTRUCTION);
    10a0:	81 e2       	ldi	r24, 0x21	; 33
    10a2:	0e 94 cf 07 	call	0xf9e	; 0xf9e <glcd_command>
	glcd_command(PCD8544_SET_VOP | (val&0x7f));
    10a6:	81 2f       	mov	r24, r17
    10a8:	80 68       	ori	r24, 0x80	; 128
    10aa:	0e 94 cf 07 	call	0xf9e	; 0xf9e <glcd_command>
	glcd_command(PCD8544_FUNCTION_SET);
    10ae:	80 e2       	ldi	r24, 0x20	; 32
    10b0:	0e 94 cf 07 	call	0xf9e	; 0xf9e <glcd_command>
	glcd_command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_NORMAL);
    10b4:	8c e0       	ldi	r24, 0x0C	; 12
    10b6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <glcd_command>
}
    10ba:	1f 91       	pop	r17
    10bc:	08 95       	ret

000010be <glcd_map>:
		delay_ms(delay);
	}
}

static uint8_t glcd_map(uint8_t x1, uint8_t x2, uint8_t x)
{
    10be:	28 2f       	mov	r18, r24
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	68 1b       	sub	r22, r24
    10c6:	71 09       	sbc	r23, r1
    10c8:	46 9f       	mul	r20, r22
    10ca:	c0 01       	movw	r24, r0
    10cc:	47 9f       	mul	r20, r23
    10ce:	90 0d       	add	r25, r0
    10d0:	56 9f       	mul	r21, r22
    10d2:	90 0d       	add	r25, r0
    10d4:	11 24       	eor	r1, r1
    10d6:	6f ef       	ldi	r22, 0xFF	; 255
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divmodhi4>
	return x1+(x2-x1)*x/255;	
}
    10de:	82 2f       	mov	r24, r18
    10e0:	86 0f       	add	r24, r22
    10e2:	08 95       	ret

000010e4 <glcd_scrolling_bar_graph>:
{
	glcd_fill_rect(x, y+glcd_map(0,height-2,255-val), width, height-2-glcd_map(0,height-2,255-val), BLACK);
}

void glcd_scrolling_bar_graph(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    10e4:	2f 92       	push	r2
    10e6:	3f 92       	push	r3
    10e8:	5f 92       	push	r5
    10ea:	6f 92       	push	r6
    10ec:	7f 92       	push	r7
    10ee:	8f 92       	push	r8
    10f0:	9f 92       	push	r9
    10f2:	af 92       	push	r10
    10f4:	bf 92       	push	r11
    10f6:	cf 92       	push	r12
    10f8:	df 92       	push	r13
    10fa:	ef 92       	push	r14
    10fc:	ff 92       	push	r15
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	0f 92       	push	r0
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	88 2e       	mov	r8, r24
    110e:	b6 2e       	mov	r11, r22
    1110:	94 2e       	mov	r9, r20
    1112:	c2 2e       	mov	r12, r18
    1114:	50 2e       	mov	r5, r16
	uint8_t nx, ny;
	uint8_t color;
	
	/* Draw border of graph */
	glcd_draw_rect(x,y,width,height,BLACK);
    1116:	01 e0       	ldi	r16, 0x01	; 1
    1118:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <glcd_draw_rect>
    111c:	dd 24       	eor	r13, r13
    111e:	d3 94       	inc	r13
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
    1120:	0c 2d       	mov	r16, r12
    1122:	10 e0       	ldi	r17, 0x00	; 0
    1124:	38 01       	movw	r6, r16
    1126:	08 94       	sec
    1128:	61 08       	sbc	r6, r1
    112a:	71 08       	sbc	r7, r1
		/* Redraw each horizontal line */
		for (nx = 1; nx <= (width-2); nx += 1) {
    112c:	29 2c       	mov	r2, r9
    112e:	33 24       	eor	r3, r3
    1130:	08 94       	sec
    1132:	21 08       	sbc	r2, r1
    1134:	31 08       	sbc	r3, r1
    1136:	12 c0       	rjmp	.+36     	; 0x115c <glcd_scrolling_bar_graph+0x78>
			color = glcd_get_pixel(x+nx+1,y+ny);
    1138:	8f 2d       	mov	r24, r15
    113a:	8f 5f       	subi	r24, 0xFF	; 255
    113c:	6a 2d       	mov	r22, r10
    113e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <glcd_get_pixel>
    1142:	48 2f       	mov	r20, r24
			glcd_set_pixel(x+nx,y+ny,color);
    1144:	8f 2d       	mov	r24, r15
    1146:	6a 2d       	mov	r22, r10
    1148:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
	glcd_draw_rect(x,y,width,height,BLACK);
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
		/* Redraw each horizontal line */
		for (nx = 1; nx <= (width-2); nx += 1) {
    114c:	e3 94       	inc	r14
    114e:	f3 94       	inc	r15
    1150:	8e 2d       	mov	r24, r14
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	82 15       	cp	r24, r2
    1156:	93 05       	cpc	r25, r3
    1158:	7c f3       	brlt	.-34     	; 0x1138 <glcd_scrolling_bar_graph+0x54>
	
	/* Draw border of graph */
	glcd_draw_rect(x,y,width,height,BLACK);
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
    115a:	d3 94       	inc	r13
    115c:	8d 2d       	mov	r24, r13
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	86 15       	cp	r24, r6
    1162:	97 05       	cpc	r25, r7
    1164:	34 f4       	brge	.+12     	; 0x1172 <glcd_scrolling_bar_graph+0x8e>
    1166:	f8 2c       	mov	r15, r8
    1168:	ee 24       	eor	r14, r14
    116a:	e3 94       	inc	r14
    116c:	ad 2c       	mov	r10, r13
    116e:	ab 0c       	add	r10, r11
    1170:	ee cf       	rjmp	.-36     	; 0x114e <glcd_scrolling_bar_graph+0x6a>
			color = glcd_get_pixel(x+nx+1,y+ny);
			glcd_set_pixel(x+nx,y+ny,color);
		}
	}
	
	val = val * (height-3) / 255;
    1172:	03 50       	subi	r16, 0x03	; 3
    1174:	10 40       	sbci	r17, 0x00	; 0
    1176:	85 2d       	mov	r24, r5
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	9c 01       	movw	r18, r24
    117c:	02 9f       	mul	r16, r18
    117e:	c0 01       	movw	r24, r0
    1180:	03 9f       	mul	r16, r19
    1182:	90 0d       	add	r25, r0
    1184:	12 9f       	mul	r17, r18
    1186:	90 0d       	add	r25, r0
    1188:	11 24       	eor	r1, r1
    118a:	6f ef       	ldi	r22, 0xFF	; 255
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divmodhi4>
    1192:	26 2f       	mov	r18, r22
	
	/* Make sure we're not exceeding the size of box interior */
	if (val > (height-3)) {
    1194:	0f 5f       	subi	r16, 0xFF	; 255
    1196:	1f 4f       	sbci	r17, 0xFF	; 255
    1198:	86 2f       	mov	r24, r22
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	80 17       	cp	r24, r16
    119e:	91 07       	cpc	r25, r17
    11a0:	14 f0       	brlt	.+4      	; 0x11a6 <glcd_scrolling_bar_graph+0xc2>
		val = height - 3;
    11a2:	2c 2d       	mov	r18, r12
    11a4:	23 50       	subi	r18, 0x03	; 3
	}
	
	/* Draw new bar - both black and white portions*/
	glcd_draw_line(x+width-2,y+height-2,x+width-2,y+height-2-val,BLACK);
    11a6:	6c 2d       	mov	r22, r12
    11a8:	6b 0d       	add	r22, r11
    11aa:	98 2d       	mov	r25, r8
    11ac:	92 50       	subi	r25, 0x02	; 2
    11ae:	99 0d       	add	r25, r9
    11b0:	16 2f       	mov	r17, r22
    11b2:	12 1b       	sub	r17, r18
    11b4:	62 50       	subi	r22, 0x02	; 2
    11b6:	12 50       	subi	r17, 0x02	; 2
    11b8:	89 2f       	mov	r24, r25
    11ba:	49 2f       	mov	r20, r25
    11bc:	21 2f       	mov	r18, r17
    11be:	01 e0       	ldi	r16, 0x01	; 1
    11c0:	99 83       	std	Y+1, r25	; 0x01
    11c2:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <glcd_draw_line>
	glcd_draw_line(x+width-2,y+height-3-val,x+width-2,y+1,WHITE);
    11c6:	11 50       	subi	r17, 0x01	; 1
    11c8:	b3 94       	inc	r11
    11ca:	99 81       	ldd	r25, Y+1	; 0x01
    11cc:	89 2f       	mov	r24, r25
    11ce:	61 2f       	mov	r22, r17
    11d0:	49 2f       	mov	r20, r25
    11d2:	2b 2d       	mov	r18, r11
    11d4:	00 e0       	ldi	r16, 0x00	; 0
    11d6:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <glcd_draw_line>
	
	/* Write to display */
	glcd_write();
    11da:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_write>
}
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	ff 90       	pop	r15
    11ea:	ef 90       	pop	r14
    11ec:	df 90       	pop	r13
    11ee:	cf 90       	pop	r12
    11f0:	bf 90       	pop	r11
    11f2:	af 90       	pop	r10
    11f4:	9f 90       	pop	r9
    11f6:	8f 90       	pop	r8
    11f8:	7f 90       	pop	r7
    11fa:	6f 90       	pop	r6
    11fc:	5f 90       	pop	r5
    11fe:	3f 90       	pop	r3
    1200:	2f 90       	pop	r2
    1202:	08 95       	ret

00001204 <glcd_scrolling_bar_graph_timing>:

void glcd_scrolling_bar_graph_timing(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val, uint8_t line_width, uint16_t delay)
{
    1204:	7f 92       	push	r7
    1206:	8f 92       	push	r8
    1208:	9f 92       	push	r9
    120a:	af 92       	push	r10
    120c:	bf 92       	push	r11
    120e:	cf 92       	push	r12
    1210:	df 92       	push	r13
    1212:	ef 92       	push	r14
    1214:	ff 92       	push	r15
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	78 2e       	mov	r7, r24
    121c:	86 2e       	mov	r8, r22
    121e:	94 2e       	mov	r9, r20
    1220:	a2 2e       	mov	r10, r18
    1222:	b0 2e       	mov	r11, r16
    1224:	fe 2c       	mov	r15, r14
	uint8_t n;
	if (line_width == 0) {
    1226:	ee 20       	and	r14, r14
    1228:	11 f4       	brne	.+4      	; 0x122e <glcd_scrolling_bar_graph_timing+0x2a>
    122a:	ff 24       	eor	r15, r15
    122c:	f3 94       	inc	r15
    122e:	10 e0       	ldi	r17, 0x00	; 0
    1230:	08 c0       	rjmp	.+16     	; 0x1242 <glcd_scrolling_bar_graph_timing+0x3e>
	}
	
	/* Adjust graph line's width by just running glcd_scrolling_bar_graph() x number of times */
	/* \todo This should be done differently! */
	for (n=0; n<line_width; n++) {
		glcd_scrolling_bar_graph(x,y,width,height,val);
    1232:	87 2d       	mov	r24, r7
    1234:	68 2d       	mov	r22, r8
    1236:	49 2d       	mov	r20, r9
    1238:	2a 2d       	mov	r18, r10
    123a:	0b 2d       	mov	r16, r11
    123c:	0e 94 72 08 	call	0x10e4	; 0x10e4 <glcd_scrolling_bar_graph>
		line_width = 1;
	}
	
	/* Adjust graph line's width by just running glcd_scrolling_bar_graph() x number of times */
	/* \todo This should be done differently! */
	for (n=0; n<line_width; n++) {
    1240:	1f 5f       	subi	r17, 0xFF	; 255
    1242:	1f 15       	cp	r17, r15
    1244:	b0 f3       	brcs	.-20     	; 0x1232 <glcd_scrolling_bar_graph_timing+0x2e>
		glcd_scrolling_bar_graph(x,y,width,height,val);
	}
	
	if (delay) {
    1246:	c1 14       	cp	r12, r1
    1248:	d1 04       	cpc	r13, r1
    124a:	09 f4       	brne	.+2      	; 0x124e <glcd_scrolling_bar_graph_timing+0x4a>
    124c:	41 c0       	rjmp	.+130    	; 0x12d0 <glcd_scrolling_bar_graph_timing+0xcc>
		delay_ms(delay);
    124e:	b6 01       	movw	r22, r12
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__floatunsisf>
    1258:	5b 01       	movw	r10, r22
    125a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	4a e7       	ldi	r20, 0x7A	; 122
    1262:	55 e4       	ldi	r21, 0x45	; 69
    1264:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <__mulsf3>
    1268:	7b 01       	movw	r14, r22
    126a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5f e3       	ldi	r21, 0x3F	; 63
    1274:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <__cmpsf2>
    1278:	88 23       	and	r24, r24
    127a:	1c f4       	brge	.+6      	; 0x1282 <glcd_scrolling_bar_graph_timing+0x7e>
    127c:	61 e0       	ldi	r22, 0x01	; 1
    127e:	70 e0       	ldi	r23, 0x00	; 0
    1280:	24 c0       	rjmp	.+72     	; 0x12ca <glcd_scrolling_bar_graph_timing+0xc6>
		__ticks = 1;
	else if (__tmp > 65535)
    1282:	c8 01       	movw	r24, r16
    1284:	b7 01       	movw	r22, r14
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	3f ef       	ldi	r19, 0xFF	; 255
    128a:	4f e7       	ldi	r20, 0x7F	; 127
    128c:	57 e4       	ldi	r21, 0x47	; 71
    128e:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <__gesf2>
    1292:	18 16       	cp	r1, r24
    1294:	b4 f4       	brge	.+44     	; 0x12c2 <glcd_scrolling_bar_graph_timing+0xbe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1296:	c6 01       	movw	r24, r12
    1298:	b5 01       	movw	r22, r10
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	40 e2       	ldi	r20, 0x20	; 32
    12a0:	51 e4       	ldi	r21, 0x41	; 65
    12a2:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <__mulsf3>
    12a6:	0e 94 09 15 	call	0x2a12	; 0x2a12 <__fixunssfsi>
    12aa:	80 e9       	ldi	r24, 0x90	; 144
    12ac:	91 e0       	ldi	r25, 0x01	; 1
    12ae:	05 c0       	rjmp	.+10     	; 0x12ba <glcd_scrolling_bar_graph_timing+0xb6>
    12b0:	fc 01       	movw	r30, r24
    12b2:	31 97       	sbiw	r30, 0x01	; 1
    12b4:	f1 f7       	brne	.-4      	; 0x12b2 <glcd_scrolling_bar_graph_timing+0xae>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b6:	61 50       	subi	r22, 0x01	; 1
    12b8:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ba:	61 15       	cp	r22, r1
    12bc:	71 05       	cpc	r23, r1
    12be:	c1 f7       	brne	.-16     	; 0x12b0 <glcd_scrolling_bar_graph_timing+0xac>
    12c0:	07 c0       	rjmp	.+14     	; 0x12d0 <glcd_scrolling_bar_graph_timing+0xcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c2:	c8 01       	movw	r24, r16
    12c4:	b7 01       	movw	r22, r14
    12c6:	0e 94 09 15 	call	0x2a12	; 0x2a12 <__fixunssfsi>
    12ca:	cb 01       	movw	r24, r22
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	f1 f7       	brne	.-4      	; 0x12cc <glcd_scrolling_bar_graph_timing+0xc8>
	}
}
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	ff 90       	pop	r15
    12d6:	ef 90       	pop	r14
    12d8:	df 90       	pop	r13
    12da:	cf 90       	pop	r12
    12dc:	bf 90       	pop	r11
    12de:	af 90       	pop	r10
    12e0:	9f 90       	pop	r9
    12e2:	8f 90       	pop	r8
    12e4:	7f 90       	pop	r7
    12e6:	08 95       	ret

000012e8 <glcd_bar_graph_vertical_no_border>:
	glcd_draw_rect(x, y, width, height, BLACK);
	glcd_fill_rect(x+1, y+1+glcd_map(0,height-2,255-val), width-2, height-2-glcd_map(0,height-2,255-val), BLACK);
}

void glcd_bar_graph_vertical_no_border(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	e8 2e       	mov	r14, r24
    12f4:	f6 2e       	mov	r15, r22
    12f6:	d4 2e       	mov	r13, r20
    12f8:	12 2f       	mov	r17, r18
    12fa:	40 2f       	mov	r20, r16
	glcd_fill_rect(x, y+glcd_map(0,height-2,255-val), width, height-2-glcd_map(0,height-2,255-val), BLACK);
    12fc:	62 2f       	mov	r22, r18
    12fe:	62 50       	subi	r22, 0x02	; 2
    1300:	40 95       	com	r20
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	0e 94 5f 08 	call	0x10be	; 0x10be <glcd_map>
    1308:	f8 0e       	add	r15, r24
    130a:	18 1b       	sub	r17, r24
    130c:	12 50       	subi	r17, 0x02	; 2
    130e:	8e 2d       	mov	r24, r14
    1310:	6f 2d       	mov	r22, r15
    1312:	4d 2d       	mov	r20, r13
    1314:	21 2f       	mov	r18, r17
    1316:	01 e0       	ldi	r16, 0x01	; 1
    1318:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <glcd_fill_rect>
}
    131c:	1f 91       	pop	r17
    131e:	0f 91       	pop	r16
    1320:	ff 90       	pop	r15
    1322:	ef 90       	pop	r14
    1324:	df 90       	pop	r13
    1326:	08 95       	ret

00001328 <glcd_bar_graph_vertical>:
	}	
	glcd_fill_rect(x, y, glcd_map(0,width,val), height , BLACK);
}

void glcd_bar_graph_vertical(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    1328:	cf 92       	push	r12
    132a:	df 92       	push	r13
    132c:	ef 92       	push	r14
    132e:	ff 92       	push	r15
    1330:	0f 93       	push	r16
    1332:	1f 93       	push	r17
    1334:	c8 2e       	mov	r12, r24
    1336:	d6 2e       	mov	r13, r22
    1338:	e4 2e       	mov	r14, r20
    133a:	12 2f       	mov	r17, r18
    133c:	f0 2e       	mov	r15, r16
	glcd_draw_rect(x, y, width, height, BLACK);
    133e:	01 e0       	ldi	r16, 0x01	; 1
    1340:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <glcd_draw_rect>
	glcd_fill_rect(x+1, y+1+glcd_map(0,height-2,255-val), width-2, height-2-glcd_map(0,height-2,255-val), BLACK);
    1344:	61 2f       	mov	r22, r17
    1346:	62 50       	subi	r22, 0x02	; 2
    1348:	f0 94       	com	r15
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	4f 2d       	mov	r20, r15
    134e:	0e 94 5f 08 	call	0x10be	; 0x10be <glcd_map>
    1352:	68 2f       	mov	r22, r24
    1354:	6f 5f       	subi	r22, 0xFF	; 255
    1356:	6d 0d       	add	r22, r13
    1358:	9e ef       	ldi	r25, 0xFE	; 254
    135a:	e9 0e       	add	r14, r25
    135c:	18 1b       	sub	r17, r24
    135e:	12 50       	subi	r17, 0x02	; 2
    1360:	8c 2d       	mov	r24, r12
    1362:	8f 5f       	subi	r24, 0xFF	; 255
    1364:	4e 2d       	mov	r20, r14
    1366:	21 2f       	mov	r18, r17
    1368:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <glcd_fill_rect>
}
    136c:	1f 91       	pop	r17
    136e:	0f 91       	pop	r16
    1370:	ff 90       	pop	r15
    1372:	ef 90       	pop	r14
    1374:	df 90       	pop	r13
    1376:	cf 90       	pop	r12
    1378:	08 95       	ret

0000137a <glcd_bar_graph_horizontal_no_border>:
	glcd_draw_rect(x, y, width, height, BLACK);
	glcd_fill_rect(x+1, y+1, glcd_map(0,width-2,val), height-2 , BLACK);
}

void glcd_bar_graph_horizontal_no_border(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    137a:	ef 92       	push	r14
    137c:	ff 92       	push	r15
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	f8 2e       	mov	r15, r24
    1384:	e6 2e       	mov	r14, r22
    1386:	12 2f       	mov	r17, r18
	if (height < 3) {
    1388:	23 30       	cpi	r18, 0x03	; 3
    138a:	60 f0       	brcs	.+24     	; 0x13a4 <glcd_bar_graph_horizontal_no_border+0x2a>
		return;
	}	
	glcd_fill_rect(x, y, glcd_map(0,width,val), height , BLACK);
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	64 2f       	mov	r22, r20
    1390:	40 2f       	mov	r20, r16
    1392:	0e 94 5f 08 	call	0x10be	; 0x10be <glcd_map>
    1396:	48 2f       	mov	r20, r24
    1398:	8f 2d       	mov	r24, r15
    139a:	6e 2d       	mov	r22, r14
    139c:	21 2f       	mov	r18, r17
    139e:	01 e0       	ldi	r16, 0x01	; 1
    13a0:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <glcd_fill_rect>
}
    13a4:	1f 91       	pop	r17
    13a6:	0f 91       	pop	r16
    13a8:	ff 90       	pop	r15
    13aa:	ef 90       	pop	r14
    13ac:	08 95       	ret

000013ae <glcd_bar_graph_horizontal>:
#include "glcd.h"

static uint8_t glcd_map(uint8_t x1, uint8_t x2, uint8_t x);

void glcd_bar_graph_horizontal(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    13ae:	cf 92       	push	r12
    13b0:	df 92       	push	r13
    13b2:	ef 92       	push	r14
    13b4:	ff 92       	push	r15
    13b6:	0f 93       	push	r16
    13b8:	1f 93       	push	r17
    13ba:	c8 2e       	mov	r12, r24
    13bc:	e6 2e       	mov	r14, r22
    13be:	14 2f       	mov	r17, r20
    13c0:	f2 2e       	mov	r15, r18
    13c2:	d0 2e       	mov	r13, r16
	if (height < 3) {
    13c4:	82 e0       	ldi	r24, 0x02	; 2
    13c6:	82 17       	cp	r24, r18
    13c8:	a0 f4       	brcc	.+40     	; 0x13f2 <glcd_bar_graph_horizontal+0x44>
		return;
	}
	glcd_draw_rect(x, y, width, height, BLACK);
    13ca:	8c 2d       	mov	r24, r12
    13cc:	01 e0       	ldi	r16, 0x01	; 1
    13ce:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <glcd_draw_rect>
	glcd_fill_rect(x+1, y+1, glcd_map(0,width-2,val), height-2 , BLACK);
    13d2:	12 50       	subi	r17, 0x02	; 2
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	61 2f       	mov	r22, r17
    13d8:	4d 2d       	mov	r20, r13
    13da:	0e 94 5f 08 	call	0x10be	; 0x10be <glcd_map>
    13de:	48 2f       	mov	r20, r24
    13e0:	e3 94       	inc	r14
    13e2:	8e ef       	ldi	r24, 0xFE	; 254
    13e4:	f8 0e       	add	r15, r24
    13e6:	8c 2d       	mov	r24, r12
    13e8:	8f 5f       	subi	r24, 0xFF	; 255
    13ea:	6e 2d       	mov	r22, r14
    13ec:	2f 2d       	mov	r18, r15
    13ee:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <glcd_fill_rect>
}
    13f2:	1f 91       	pop	r17
    13f4:	0f 91       	pop	r16
    13f6:	ff 90       	pop	r15
    13f8:	ef 90       	pop	r14
    13fa:	df 90       	pop	r13
    13fc:	cf 90       	pop	r12
    13fe:	08 95       	ret

00001400 <glcd_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
    1400:	0f 93       	push	r16
	/* Supports variable width fonts */
	font_current.font_table = font_table;
    1402:	90 93 72 03 	sts	0x0372, r25
    1406:	80 93 71 03 	sts	0x0371, r24
	font_current.width = width;
    140a:	60 93 73 03 	sts	0x0373, r22
	font_current.height = height;
    140e:	40 93 74 03 	sts	0x0374, r20
	font_current.start_char = start_char;
    1412:	20 93 75 03 	sts	0x0375, r18
	font_current.end_char = end_char;
    1416:	00 93 76 03 	sts	0x0376, r16
	font_current.table_type = MIKRO; /* Only supports MikroElektronika generated format at the moment */
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	80 93 77 03 	sts	0x0377, r24
}
    1420:	0f 91       	pop	r16
    1422:	08 95       	ret

00001424 <glcd_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char, font_table_type_t type)
#else
void glcd_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char, font_table_type_t type)
#endif
{
    1424:	ef 92       	push	r14
    1426:	0f 93       	push	r16
	/* Supports variable width fonts */
	font_current.font_table = font_table;
    1428:	90 93 72 03 	sts	0x0372, r25
    142c:	80 93 71 03 	sts	0x0371, r24
	font_current.width = width;
    1430:	60 93 73 03 	sts	0x0373, r22
	font_current.height = height;
    1434:	40 93 74 03 	sts	0x0374, r20
	font_current.start_char = start_char;
    1438:	20 93 75 03 	sts	0x0375, r18
	font_current.end_char = end_char;
    143c:	00 93 76 03 	sts	0x0376, r16
	font_current.table_type = type; /* Only supports MikroElektronika generated format at the moment */
    1440:	e0 92 77 03 	sts	0x0377, r14
}
    1444:	0f 91       	pop	r16
    1446:	ef 90       	pop	r14
    1448:	08 95       	ret

0000144a <glcd_draw_char_xy>:

uint8_t glcd_draw_char_xy(uint8_t x, uint8_t y, char c)
{
    144a:	2f 92       	push	r2
    144c:	3f 92       	push	r3
    144e:	4f 92       	push	r4
    1450:	5f 92       	push	r5
    1452:	6f 92       	push	r6
    1454:	7f 92       	push	r7
    1456:	8f 92       	push	r8
    1458:	9f 92       	push	r9
    145a:	af 92       	push	r10
    145c:	bf 92       	push	r11
    145e:	cf 92       	push	r12
    1460:	df 92       	push	r13
    1462:	ef 92       	push	r14
    1464:	ff 92       	push	r15
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	63 97       	sbiw	r28, 0x13	; 19
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
    147e:	48 2e       	mov	r4, r24
    1480:	e6 2e       	mov	r14, r22
    1482:	34 2f       	mov	r19, r20
	if (c < font_current.start_char || c > font_current.end_char) {
    1484:	50 91 75 03 	lds	r21, 0x0375
    1488:	45 17       	cp	r20, r21
    148a:	20 f0       	brcs	.+8      	; 0x1494 <glcd_draw_char_xy+0x4a>
    148c:	80 91 76 03 	lds	r24, 0x0376
    1490:	84 17       	cp	r24, r20
    1492:	08 f4       	brcc	.+2      	; 0x1496 <glcd_draw_char_xy+0x4c>
    1494:	3e e2       	ldi	r19, 0x2E	; 46
		c = '.';
	}
	
	if (font_current.table_type == STANG) {
    1496:	80 91 77 03 	lds	r24, 0x0377
    149a:	88 23       	and	r24, r24
    149c:	09 f0       	breq	.+2      	; 0x14a0 <glcd_draw_char_xy+0x56>
    149e:	58 c0       	rjmp	.+176    	; 0x1550 <glcd_draw_char_xy+0x106>
    14a0:	04 2d       	mov	r16, r4
    14a2:	ff 24       	eor	r15, r15
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    14a4:	43 2e       	mov	r4, r19
    14a6:	55 24       	eor	r5, r5
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    14a8:	60 2e       	mov	r6, r16
    14aa:	77 24       	eor	r7, r7
    14ac:	8e 2c       	mov	r8, r14
    14ae:	99 24       	eor	r9, r9
    14b0:	49 c0       	rjmp	.+146    	; 0x1544 <glcd_draw_char_xy+0xfa>
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    14b2:	4f 2d       	mov	r20, r15
    14b4:	50 e0       	ldi	r21, 0x00	; 0
    14b6:	80 91 75 03 	lds	r24, 0x0375
    14ba:	92 01       	movw	r18, r4
    14bc:	28 1b       	sub	r18, r24
    14be:	31 09       	sbc	r19, r1
    14c0:	89 2f       	mov	r24, r25
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	bc 01       	movw	r22, r24
    14c6:	26 9f       	mul	r18, r22
    14c8:	c0 01       	movw	r24, r0
    14ca:	27 9f       	mul	r18, r23
    14cc:	90 0d       	add	r25, r0
    14ce:	36 9f       	mul	r19, r22
    14d0:	90 0d       	add	r25, r0
    14d2:	11 24       	eor	r1, r1
    14d4:	84 0f       	add	r24, r20
    14d6:	95 1f       	adc	r25, r21
    14d8:	e0 91 71 03 	lds	r30, 0x0371
    14dc:	f0 91 72 03 	lds	r31, 0x0372
    14e0:	e8 0f       	add	r30, r24
    14e2:	f9 1f       	adc	r31, r25
    14e4:	e4 91       	lpm	r30, Z+
    14e6:	1e 2d       	mov	r17, r14
    14e8:	22 24       	eor	r2, r2
    14ea:	33 24       	eor	r3, r3
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    14ec:	5a 01       	movw	r10, r20
    14ee:	a6 0c       	add	r10, r6
    14f0:	b7 1c       	adc	r11, r7
					/* Don't try and write past the dimensions of the LCD */
					return 0;
				}
				if (dat & (1<<j)) {
    14f2:	ce 2e       	mov	r12, r30
    14f4:	dd 24       	eor	r13, r13
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    14f6:	74 e5       	ldi	r23, 0x54	; 84
    14f8:	a7 16       	cp	r10, r23
    14fa:	b1 04       	cpc	r11, r1
    14fc:	0c f0       	brlt	.+2      	; 0x1500 <glcd_draw_char_xy+0xb6>
    14fe:	70 c1       	rjmp	.+736    	; 0x17e0 <glcd_draw_char_xy+0x396>
    1500:	c1 01       	movw	r24, r2
    1502:	88 0d       	add	r24, r8
    1504:	99 1d       	adc	r25, r9
    1506:	c0 97       	sbiw	r24, 0x30	; 48
    1508:	0c f0       	brlt	.+2      	; 0x150c <glcd_draw_char_xy+0xc2>
    150a:	6a c1       	rjmp	.+724    	; 0x17e0 <glcd_draw_char_xy+0x396>
					/* Don't try and write past the dimensions of the LCD */
					return 0;
				}
				if (dat & (1<<j)) {
    150c:	c6 01       	movw	r24, r12
    150e:	02 2c       	mov	r0, r2
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <glcd_draw_char_xy+0xcc>
    1512:	95 95       	asr	r25
    1514:	87 95       	ror	r24
    1516:	0a 94       	dec	r0
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <glcd_draw_char_xy+0xc8>
    151a:	80 ff       	sbrs	r24, 0
    151c:	04 c0       	rjmp	.+8      	; 0x1526 <glcd_draw_char_xy+0xdc>
					glcd_set_pixel(x+i,y+j,BLACK);
    151e:	80 2f       	mov	r24, r16
    1520:	61 2f       	mov	r22, r17
    1522:	41 e0       	ldi	r20, 0x01	; 1
    1524:	03 c0       	rjmp	.+6      	; 0x152c <glcd_draw_char_xy+0xe2>
				} else {
					glcd_set_pixel(x+i,y+j,WHITE);
    1526:	80 2f       	mov	r24, r16
    1528:	61 2f       	mov	r22, r17
    152a:	40 e0       	ldi	r20, 0x00	; 0
    152c:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
    1530:	08 94       	sec
    1532:	21 1c       	adc	r2, r1
    1534:	31 1c       	adc	r3, r1
    1536:	1f 5f       	subi	r17, 0xFF	; 255
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
    1538:	88 e0       	ldi	r24, 0x08	; 8
    153a:	28 16       	cp	r2, r24
    153c:	31 04       	cpc	r3, r1
    153e:	d9 f6       	brne	.-74     	; 0x14f6 <glcd_draw_char_xy+0xac>
	if (font_current.table_type == STANG) {
		/* Font table in Pascal Stang format (single byte height with with no width specifier) */
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
    1540:	f3 94       	inc	r15
    1542:	0f 5f       	subi	r16, 0xFF	; 255
    1544:	90 91 73 03 	lds	r25, 0x0373
    1548:	f9 16       	cp	r15, r25
    154a:	08 f4       	brcc	.+2      	; 0x154e <glcd_draw_char_xy+0x104>
    154c:	b2 cf       	rjmp	.-156    	; 0x14b2 <glcd_draw_char_xy+0x68>
    154e:	49 c1       	rjmp	.+658    	; 0x17e2 <glcd_draw_char_xy+0x398>
		
		/* always return how many pixels of width were written */
		/* here for "stang" format fonts, it is always fixed */
		return font_current.width;
		
	} else if (font_current.table_type == MIKRO) {
    1550:	81 30       	cpi	r24, 0x01	; 1
    1552:	09 f0       	breq	.+2      	; 0x1556 <glcd_draw_char_xy+0x10c>
    1554:	9c c0       	rjmp	.+312    	; 0x168e <glcd_draw_char_xy+0x244>
		
		uint8_t i;
		uint8_t var_width;
		uint8_t bytes_high;
		
		if ((font_current.height % 8) > 0){
    1556:	20 91 74 03 	lds	r18, 0x0374
    155a:	82 2f       	mov	r24, r18
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	87 70       	andi	r24, 0x07	; 7
    1560:	90 70       	andi	r25, 0x00	; 0
    1562:	26 95       	lsr	r18
    1564:	26 95       	lsr	r18
    1566:	26 95       	lsr	r18
    1568:	89 2b       	or	r24, r25
    156a:	09 f0       	breq	.+2      	; 0x156e <glcd_draw_char_xy+0x124>
			bytes_high = (font_current.height / 8) + 1;
    156c:	2f 5f       	subi	r18, 0xFF	; 255
		}
		else{
			bytes_high = (font_current.height / 8);
    156e:	2c 83       	std	Y+4, r18	; 0x04
		}
		uint8_t bytes_per_char = font_current.width * bytes_high + 1; /* The +1 is the width byte at the start */
		
		const char *p;
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
    1570:	80 91 73 03 	lds	r24, 0x0373
    1574:	9c 81       	ldd	r25, Y+4	; 0x04
    1576:	98 9f       	mul	r25, r24
    1578:	80 2d       	mov	r24, r0
    157a:	11 24       	eor	r1, r1
    157c:	8f 5f       	subi	r24, 0xFF	; 255
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	23 2f       	mov	r18, r19
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	25 1b       	sub	r18, r21
    1586:	31 09       	sbc	r19, r1
    1588:	dc 01       	movw	r26, r24
    158a:	a2 9f       	mul	r26, r18
    158c:	c0 01       	movw	r24, r0
    158e:	a3 9f       	mul	r26, r19
    1590:	90 0d       	add	r25, r0
    1592:	b2 9f       	mul	r27, r18
    1594:	90 0d       	add	r25, r0
    1596:	11 24       	eor	r1, r1
    1598:	e0 91 71 03 	lds	r30, 0x0371
    159c:	f0 91 72 03 	lds	r31, 0x0372
    15a0:	e8 0f       	add	r30, r24
    15a2:	f9 1f       	adc	r31, r25

		/* The first byte per character is always the width of the character */
#if defined(GLCD_DEVICE_AVR8)		
		var_width = pgm_read_byte(p);
    15a4:	b4 91       	lpm	r27, Z+
    15a6:	bb 83       	std	Y+3, r27	; 0x03
    15a8:	3c 81       	ldd	r19, Y+4	; 0x04
    15aa:	23 2f       	mov	r18, r19
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	3a 83       	std	Y+2, r19	; 0x02
    15b0:	29 83       	std	Y+1, r18	; 0x01
    15b2:	3f 01       	movw	r6, r30
    15b4:	08 94       	sec
    15b6:	61 1c       	adc	r6, r1
    15b8:	71 1c       	adc	r7, r1
    15ba:	54 2c       	mov	r5, r4
    15bc:	88 24       	eor	r8, r8
    15be:	99 24       	eor	r9, r9
		if (x+var_width >= GLCD_LCD_WIDTH || y+font_current.height >= GLCD_LCD_HEIGHT) {
			return;
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
    15c0:	e9 8a       	std	Y+17, r14	; 0x11
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    15c2:	44 2d       	mov	r20, r4
    15c4:	50 e0       	ldi	r21, 0x00	; 0
    15c6:	5c 87       	std	Y+12, r21	; 0x0c
    15c8:	4b 87       	std	Y+11, r20	; 0x0b
    15ca:	4f c0       	rjmp	.+158    	; 0x166a <glcd_draw_char_xy+0x220>
		
		for ( i = 0; i < var_width; i++ ) {
			uint8_t j;
			for ( j = 0; j < bytes_high; j++ ) {
#if defined(GLCD_DEVICE_AVR8)				
				uint8_t dat = pgm_read_byte( p + i*bytes_high + j );
    15cc:	f5 01       	movw	r30, r10
    15ce:	84 91       	lpm	r24, Z+
    15d0:	e8 86       	std	Y+8, r14	; 0x08
    15d2:	86 01       	movw	r16, r12
    15d4:	1b 8a       	std	Y+19, r1	; 0x13
    15d6:	1a 8a       	std	Y+18, r1	; 0x12
					if ((j*8 + bit) >= font_current.height) {
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    15d8:	28 2e       	mov	r2, r24
    15da:	33 24       	eor	r3, r3
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    15dc:	29 85       	ldd	r18, Y+9	; 0x09
    15de:	3a 85       	ldd	r19, Y+10	; 0x0a
    15e0:	24 35       	cpi	r18, 0x54	; 84
    15e2:	31 05       	cpc	r19, r1
    15e4:	0c f0       	brlt	.+2      	; 0x15e8 <glcd_draw_char_xy+0x19e>
    15e6:	fc c0       	rjmp	.+504    	; 0x17e0 <glcd_draw_char_xy+0x396>
    15e8:	2a 89       	ldd	r18, Y+18	; 0x12
    15ea:	8a 89       	ldd	r24, Y+18	; 0x12
    15ec:	9b 89       	ldd	r25, Y+19	; 0x13
    15ee:	8e 0d       	add	r24, r14
    15f0:	9f 1d       	adc	r25, r15
    15f2:	c0 97       	sbiw	r24, 0x30	; 48
    15f4:	0c f0       	brlt	.+2      	; 0x15f8 <glcd_draw_char_xy+0x1ae>
    15f6:	f4 c0       	rjmp	.+488    	; 0x17e0 <glcd_draw_char_xy+0x396>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
    15f8:	80 91 74 03 	lds	r24, 0x0374
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	08 17       	cp	r16, r24
    1600:	19 07       	cpc	r17, r25
    1602:	94 f4       	brge	.+36     	; 0x1628 <glcd_draw_char_xy+0x1de>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    1604:	c1 01       	movw	r24, r2
    1606:	02 2e       	mov	r0, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <glcd_draw_char_xy+0x1c4>
    160a:	95 95       	asr	r25
    160c:	87 95       	ror	r24
    160e:	0a 94       	dec	r0
    1610:	e2 f7       	brpl	.-8      	; 0x160a <glcd_draw_char_xy+0x1c0>
    1612:	68 85       	ldd	r22, Y+8	; 0x08
    1614:	62 0f       	add	r22, r18
    1616:	80 ff       	sbrs	r24, 0
    1618:	03 c0       	rjmp	.+6      	; 0x1620 <glcd_draw_char_xy+0x1d6>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
    161a:	85 2d       	mov	r24, r5
    161c:	41 e0       	ldi	r20, 0x01	; 1
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <glcd_draw_char_xy+0x1da>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
    1620:	85 2d       	mov	r24, r5
    1622:	40 e0       	ldi	r20, 0x00	; 0
    1624:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
    1628:	4a 89       	ldd	r20, Y+18	; 0x12
    162a:	5b 89       	ldd	r21, Y+19	; 0x13
    162c:	4f 5f       	subi	r20, 0xFF	; 255
    162e:	5f 4f       	sbci	r21, 0xFF	; 255
    1630:	5b 8b       	std	Y+19, r21	; 0x13
    1632:	4a 8b       	std	Y+18, r20	; 0x12
    1634:	0f 5f       	subi	r16, 0xFF	; 255
    1636:	1f 4f       	sbci	r17, 0xFF	; 255
				uint8_t dat = pgm_read_byte( p + i*bytes_high + j );
#else
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
    1638:	48 30       	cpi	r20, 0x08	; 8
    163a:	51 05       	cpc	r21, r1
    163c:	79 f6       	brne	.-98     	; 0x15dc <glcd_draw_char_xy+0x192>
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
			uint8_t j;
			for ( j = 0; j < bytes_high; j++ ) {
    163e:	43 94       	inc	r4
    1640:	68 e0       	ldi	r22, 0x08	; 8
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	e6 0e       	add	r14, r22
    1646:	f7 1e       	adc	r15, r23
    1648:	c6 0e       	add	r12, r22
    164a:	d7 1e       	adc	r13, r23
    164c:	08 94       	sec
    164e:	a1 1c       	adc	r10, r1
    1650:	b1 1c       	adc	r11, r1
    1652:	7c 81       	ldd	r23, Y+4	; 0x04
    1654:	47 16       	cp	r4, r23
    1656:	08 f4       	brcc	.+2      	; 0x165a <glcd_draw_char_xy+0x210>
    1658:	b9 cf       	rjmp	.-142    	; 0x15cc <glcd_draw_char_xy+0x182>
    165a:	08 94       	sec
    165c:	81 1c       	adc	r8, r1
    165e:	91 1c       	adc	r9, r1
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	9a 81       	ldd	r25, Y+2	; 0x02
    1664:	68 0e       	add	r6, r24
    1666:	79 1e       	adc	r7, r25
    1668:	53 94       	inc	r5
		if (x+var_width >= GLCD_LCD_WIDTH || y+font_current.height >= GLCD_LCD_HEIGHT) {
			return;
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
    166a:	9b 81       	ldd	r25, Y+3	; 0x03
    166c:	89 16       	cp	r8, r25
    166e:	08 f0       	brcs	.+2      	; 0x1672 <glcd_draw_char_xy+0x228>
    1670:	b8 c0       	rjmp	.+368    	; 0x17e2 <glcd_draw_char_xy+0x398>
    1672:	89 89       	ldd	r24, Y+17	; 0x11
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	7c 01       	movw	r14, r24
    1678:	53 01       	movw	r10, r6
    167a:	44 24       	eor	r4, r4
    167c:	cc 24       	eor	r12, r12
    167e:	dd 24       	eor	r13, r13
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    1680:	ab 85       	ldd	r26, Y+11	; 0x0b
    1682:	bc 85       	ldd	r27, Y+12	; 0x0c
    1684:	a8 0d       	add	r26, r8
    1686:	b9 1d       	adc	r27, r9
    1688:	ba 87       	std	Y+10, r27	; 0x0a
    168a:	a9 87       	std	Y+9, r26	; 0x09
    168c:	e2 cf       	rjmp	.-60     	; 0x1652 <glcd_draw_char_xy+0x208>
				}									
			}				
		}
		return var_width;	
	
	} else if (font_current.table_type == GLCD_UTILS) {
    168e:	82 30       	cpi	r24, 0x02	; 2
    1690:	09 f0       	breq	.+2      	; 0x1694 <glcd_draw_char_xy+0x24a>
    1692:	a6 c0       	rjmp	.+332    	; 0x17e0 <glcd_draw_char_xy+0x396>
		
		uint8_t var_width, n;
		uint8_t bytes_high, bytes_per_char;
		const char *p;

		bytes_high = font_current.height / 8 + 1;
    1694:	b0 90 74 03 	lds	r11, 0x0374
    1698:	b6 94       	lsr	r11
    169a:	b6 94       	lsr	r11
    169c:	b6 94       	lsr	r11
    169e:	b3 94       	inc	r11
		bytes_per_char = font_current.width * bytes_high;
    16a0:	40 91 73 03 	lds	r20, 0x0373
		
		/* Point to chars first byte */
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
    16a4:	23 2f       	mov	r18, r19
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	25 1b       	sub	r18, r21
    16aa:	31 09       	sbc	r19, r1
    16ac:	b4 9e       	mul	r11, r20
    16ae:	80 2d       	mov	r24, r0
    16b0:	11 24       	eor	r1, r1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	fc 01       	movw	r30, r24
    16b6:	2e 9f       	mul	r18, r30
    16b8:	c0 01       	movw	r24, r0
    16ba:	2f 9f       	mul	r18, r31
    16bc:	90 0d       	add	r25, r0
    16be:	3e 9f       	mul	r19, r30
    16c0:	90 0d       	add	r25, r0
    16c2:	11 24       	eor	r1, r1
    16c4:	80 90 71 03 	lds	r8, 0x0371
    16c8:	90 90 72 03 	lds	r9, 0x0372
    16cc:	88 0e       	add	r8, r24
    16ce:	99 1e       	adc	r9, r25
    16d0:	54 2e       	mov	r5, r20
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	50 e0       	ldi	r21, 0x00	; 0
    16d6:	41 50       	subi	r20, 0x01	; 1
    16d8:	50 40       	sbci	r21, 0x00	; 0
    16da:	64 2f       	mov	r22, r20
    16dc:	63 1b       	sub	r22, r19
    16de:	e0 e0       	ldi	r30, 0x00	; 0
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	07 c0       	rjmp	.+14     	; 0x16f4 <glcd_draw_char_xy+0x2aa>
			uint8_t row = 0;
			
			for (row = 0; row < bytes_high; row++) {
				uint8_t offset;
				offset = (font_current.width - 1 - n) * row;
				max_byte = *(p + offset);
    16e6:	89 2f       	mov	r24, r25
    16e8:	86 1b       	sub	r24, r22
    16ea:	f4 01       	movw	r30, r8
    16ec:	e8 0f       	add	r30, r24
    16ee:	f1 1d       	adc	r31, r1
    16f0:	e0 81       	ld	r30, Z
		
		while (1) {
			uint8_t max_byte = 0;
			uint8_t row = 0;
			
			for (row = 0; row < bytes_high; row++) {
    16f2:	2f 5f       	subi	r18, 0xFF	; 255
    16f4:	96 0f       	add	r25, r22
    16f6:	2b 15       	cp	r18, r11
    16f8:	b0 f3       	brcs	.-20     	; 0x16e6 <glcd_draw_char_xy+0x29c>
				uint8_t offset;
				offset = (font_current.width - 1 - n) * row;
				max_byte = *(p + offset);
			}
			if (max_byte == 0) {
    16fa:	ee 23       	and	r30, r30
    16fc:	21 f4       	brne	.+8      	; 0x1706 <glcd_draw_char_xy+0x2bc>
				/* column is empty for all rows, go left and test again */
				/* reduce variable width by 1 */
				var_width--;
    16fe:	5a 94       	dec	r5
				if (var_width == 0) {
    1700:	11 f0       	breq	.+4      	; 0x1706 <glcd_draw_char_xy+0x2bc>
					break;
				}
			} else {
				break; /* Part of a character was found */
			}
			n++;
    1702:	3f 5f       	subi	r19, 0xFF	; 255
    1704:	ea cf       	rjmp	.-44     	; 0x16da <glcd_draw_char_xy+0x290>
		}
    1706:	ff 24       	eor	r15, r15
    1708:	66 24       	eor	r6, r6
    170a:	cc 24       	eor	r12, r12
    170c:	dd 24       	eor	r13, r13
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    170e:	24 2d       	mov	r18, r4
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	38 8b       	std	Y+16, r19	; 0x10
    1714:	2f 87       	std	Y+15, r18	; 0x0f
    1716:	58 c0       	rjmp	.+176    	; 0x17c8 <glcd_draw_char_xy+0x37e>
				/* Loop one column at a time */
				
				uint8_t dat, bit;
				
#if defined(GLCD_DEVICE_AVR8)
				dat = pgm_read_byte( p + j*font_current.width + i );
    1718:	8a 2d       	mov	r24, r10
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	20 91 73 03 	lds	r18, 0x0373
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	4e 81       	ldd	r20, Y+6	; 0x06
    1724:	5f 81       	ldd	r21, Y+7	; 0x07
    1726:	42 9f       	mul	r20, r18
    1728:	f0 01       	movw	r30, r0
    172a:	43 9f       	mul	r20, r19
    172c:	f0 0d       	add	r31, r0
    172e:	52 9f       	mul	r21, r18
    1730:	f0 0d       	add	r31, r0
    1732:	11 24       	eor	r1, r1
    1734:	e8 0f       	add	r30, r24
    1736:	f9 1f       	adc	r31, r25
    1738:	e8 0d       	add	r30, r8
    173a:	f9 1d       	adc	r31, r9
    173c:	e4 91       	lpm	r30, Z+
    173e:	86 01       	movw	r16, r12
    1740:	1b 8a       	std	Y+19, r1	; 0x13
    1742:	1a 8a       	std	Y+18, r1	; 0x12
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    1744:	6f 85       	ldd	r22, Y+15	; 0x0f
    1746:	78 89       	ldd	r23, Y+16	; 0x10
    1748:	68 0f       	add	r22, r24
    174a:	79 1f       	adc	r23, r25
    174c:	7e 87       	std	Y+14, r23	; 0x0e
    174e:	6d 87       	std	Y+13, r22	; 0x0d
					if ((j*8 + bit) >= font_current.height) {
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    1750:	2e 2e       	mov	r2, r30
    1752:	33 24       	eor	r3, r3
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    1754:	8d 85       	ldd	r24, Y+13	; 0x0d
    1756:	9e 85       	ldd	r25, Y+14	; 0x0e
    1758:	84 35       	cpi	r24, 0x54	; 84
    175a:	91 05       	cpc	r25, r1
    175c:	0c f0       	brlt	.+2      	; 0x1760 <glcd_draw_char_xy+0x316>
    175e:	40 c0       	rjmp	.+128    	; 0x17e0 <glcd_draw_char_xy+0x396>
    1760:	2a 89       	ldd	r18, Y+18	; 0x12
    1762:	8a 89       	ldd	r24, Y+18	; 0x12
    1764:	9b 89       	ldd	r25, Y+19	; 0x13
    1766:	8e 0d       	add	r24, r14
    1768:	9f 1d       	adc	r25, r15
    176a:	c0 97       	sbiw	r24, 0x30	; 48
    176c:	cc f5       	brge	.+114    	; 0x17e0 <glcd_draw_char_xy+0x396>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
    176e:	80 91 74 03 	lds	r24, 0x0374
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	08 17       	cp	r16, r24
    1776:	19 07       	cpc	r17, r25
    1778:	94 f4       	brge	.+36     	; 0x179e <glcd_draw_char_xy+0x354>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    177a:	c1 01       	movw	r24, r2
    177c:	02 2e       	mov	r0, r18
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <glcd_draw_char_xy+0x33a>
    1780:	95 95       	asr	r25
    1782:	87 95       	ror	r24
    1784:	0a 94       	dec	r0
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <glcd_draw_char_xy+0x336>
    1788:	6d 81       	ldd	r22, Y+5	; 0x05
    178a:	62 0f       	add	r22, r18
    178c:	80 ff       	sbrs	r24, 0
    178e:	03 c0       	rjmp	.+6      	; 0x1796 <glcd_draw_char_xy+0x34c>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
    1790:	87 2d       	mov	r24, r7
    1792:	41 e0       	ldi	r20, 0x01	; 1
    1794:	02 c0       	rjmp	.+4      	; 0x179a <glcd_draw_char_xy+0x350>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
    1796:	87 2d       	mov	r24, r7
    1798:	40 e0       	ldi	r20, 0x00	; 0
    179a:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
    179e:	ea 89       	ldd	r30, Y+18	; 0x12
    17a0:	fb 89       	ldd	r31, Y+19	; 0x13
    17a2:	31 96       	adiw	r30, 0x01	; 1
    17a4:	fb 8b       	std	Y+19, r31	; 0x13
    17a6:	ea 8b       	std	Y+18, r30	; 0x12
    17a8:	0f 5f       	subi	r16, 0xFF	; 255
    17aa:	1f 4f       	sbci	r17, 0xFF	; 255
				dat = pgm_read_byte( p + j*font_current.width + i );
#else
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
    17ac:	38 97       	sbiw	r30, 0x08	; 8
    17ae:	91 f6       	brne	.-92     	; 0x1754 <glcd_draw_char_xy+0x30a>
		uint8_t j; /* loop as rows, 1st row, j=0 */
		for ( j = 0; j < bytes_high; j++ ) {
			/* Loop one row at a time */
		
			uint8_t i;
			for ( i = 0; i < var_width; i++ ) {
    17b0:	a3 94       	inc	r10
    17b2:	73 94       	inc	r7
    17b4:	a5 14       	cp	r10, r5
    17b6:	08 f4       	brcc	.+2      	; 0x17ba <glcd_draw_char_xy+0x370>
    17b8:	af cf       	rjmp	.-162    	; 0x1718 <glcd_draw_char_xy+0x2ce>
		/* Uncomment line below, to force fixed width, for debugging only */
		//var_width = font_current.width; // bypass auto width detection, treat as fixed width
				
		/* For glcd-utils format, we write one complete row at a time */
		uint8_t j; /* loop as rows, 1st row, j=0 */
		for ( j = 0; j < bytes_high; j++ ) {
    17ba:	63 94       	inc	r6
    17bc:	28 e0       	ldi	r18, 0x08	; 8
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	e2 0e       	add	r14, r18
    17c2:	f3 1e       	adc	r15, r19
    17c4:	c2 0e       	add	r12, r18
    17c6:	d3 1e       	adc	r13, r19
    17c8:	6b 14       	cp	r6, r11
    17ca:	10 f0       	brcs	.+4      	; 0x17d0 <glcd_draw_char_xy+0x386>
    17cc:	95 2d       	mov	r25, r5
    17ce:	09 c0       	rjmp	.+18     	; 0x17e2 <glcd_draw_char_xy+0x398>
				/* Loop one column at a time */
				
				uint8_t dat, bit;
				
#if defined(GLCD_DEVICE_AVR8)
				dat = pgm_read_byte( p + j*font_current.width + i );
    17d0:	46 2d       	mov	r20, r6
    17d2:	50 e0       	ldi	r21, 0x00	; 0
    17d4:	5f 83       	std	Y+7, r21	; 0x07
    17d6:	4e 83       	std	Y+6, r20	; 0x06
    17d8:	ed 82       	std	Y+5, r14	; 0x05
    17da:	74 2c       	mov	r7, r4
    17dc:	aa 24       	eor	r10, r10
    17de:	ea cf       	rjmp	.-44     	; 0x17b4 <glcd_draw_char_xy+0x36a>
    17e0:	90 e0       	ldi	r25, 0x00	; 0
		/* Don't recognise the font table */
		return 0;
		
	}

}
    17e2:	89 2f       	mov	r24, r25
    17e4:	63 96       	adiw	r28, 0x13	; 19
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	ff 90       	pop	r15
    17fa:	ef 90       	pop	r14
    17fc:	df 90       	pop	r13
    17fe:	cf 90       	pop	r12
    1800:	bf 90       	pop	r11
    1802:	af 90       	pop	r10
    1804:	9f 90       	pop	r9
    1806:	8f 90       	pop	r8
    1808:	7f 90       	pop	r7
    180a:	6f 90       	pop	r6
    180c:	5f 90       	pop	r5
    180e:	4f 90       	pop	r4
    1810:	3f 90       	pop	r3
    1812:	2f 90       	pop	r2
    1814:	08 95       	ret

00001816 <glcd_draw_string_xy_P>:
		c++;
	}		
}

void glcd_draw_string_xy_P(uint8_t x, uint8_t y, const char *str)
{
    1816:	0f 93       	push	r16
    1818:	1f 93       	push	r17
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	18 2f       	mov	r17, r24
    1820:	06 2f       	mov	r16, r22
    1822:	ea 01       	movw	r28, r20
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
    1824:	86 2f       	mov	r24, r22
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	40 91 74 03 	lds	r20, 0x0374
    182c:	2f e2       	ldi	r18, 0x2F	; 47
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	24 1b       	sub	r18, r20
    1832:	31 09       	sbc	r19, r1
    1834:	28 17       	cp	r18, r24
    1836:	39 07       	cpc	r19, r25
    1838:	64 f0       	brlt	.+24     	; 0x1852 <glcd_draw_string_xy_P+0x3c>
		/* Character won't fit */
		return;
    183a:	fe 01       	movw	r30, r28
	}

	while (1) {
#if defined(GLCD_DEVICE_AVR8)		
		char c = pgm_read_byte(str++);
    183c:	21 96       	adiw	r28, 0x01	; 1
    183e:	44 91       	lpm	r20, Z+
#else
		char c = *(str++);
#endif
		if (!c)
    1840:	44 23       	and	r20, r20
    1842:	39 f0       	breq	.+14     	; 0x1852 <glcd_draw_string_xy_P+0x3c>
			return;
					
		width = glcd_draw_char_xy(x,y,c);
    1844:	81 2f       	mov	r24, r17
    1846:	60 2f       	mov	r22, r16
    1848:	0e 94 25 0a 	call	0x144a	; 0x144a <glcd_draw_char_xy>
		x += (width + 1);
    184c:	8f 5f       	subi	r24, 0xFF	; 255
    184e:	18 0f       	add	r17, r24
    1850:	f4 cf       	rjmp	.-24     	; 0x183a <glcd_draw_string_xy_P+0x24>
		c++;
	}		
}
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	08 95       	ret

0000185c <glcd_draw_string_xy>:
	}

}

void glcd_draw_string_xy(uint8_t x, uint8_t y, char *c)
{
    185c:	0f 93       	push	r16
    185e:	1f 93       	push	r17
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	18 2f       	mov	r17, r24
    1866:	06 2f       	mov	r16, r22
    1868:	ea 01       	movw	r28, r20
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
    186a:	86 2f       	mov	r24, r22
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	40 91 74 03 	lds	r20, 0x0374
    1872:	2f e2       	ldi	r18, 0x2F	; 47
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	24 1b       	sub	r18, r20
    1878:	31 09       	sbc	r19, r1
    187a:	28 17       	cp	r18, r24
    187c:	39 07       	cpc	r19, r25
    187e:	44 f4       	brge	.+16     	; 0x1890 <glcd_draw_string_xy+0x34>
    1880:	0a c0       	rjmp	.+20     	; 0x1896 <glcd_draw_string_xy+0x3a>
		/* Character won't fit */
		return;
	}

	while (*c) {
		width = glcd_draw_char_xy(x,y,*c);
    1882:	81 2f       	mov	r24, r17
    1884:	60 2f       	mov	r22, r16
    1886:	0e 94 25 0a 	call	0x144a	; 0x144a <glcd_draw_char_xy>
		x += (width + 1);
    188a:	8f 5f       	subi	r24, 0xFF	; 255
    188c:	18 0f       	add	r17, r24
		c++;
    188e:	21 96       	adiw	r28, 0x01	; 1
	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
		/* Character won't fit */
		return;
	}

	while (*c) {
    1890:	48 81       	ld	r20, Y
    1892:	44 23       	and	r20, r20
    1894:	b1 f7       	brne	.-20     	; 0x1882 <glcd_draw_string_xy+0x26>
		width = glcd_draw_char_xy(x,y,*c);
		x += (width + 1);
		c++;
	}		
}
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	08 95       	ret

000018a0 <glcd_get_pixel>:

	glcd_update_bbox(x,y,x,y);
}

/* Based on PCD8544 library by Limor Fried */
uint8_t glcd_get_pixel(uint8_t x, uint8_t y) {
    18a0:	48 2f       	mov	r20, r24
	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
    18a2:	84 35       	cpi	r24, 0x54	; 84
    18a4:	f0 f4       	brcc	.+60     	; 0x18e2 <glcd_get_pixel+0x42>
    18a6:	60 33       	cpi	r22, 0x30	; 48
    18a8:	e0 f4       	brcc	.+56     	; 0x18e2 <glcd_get_pixel+0x42>
    18aa:	86 2f       	mov	r24, r22
    18ac:	86 95       	lsr	r24
    18ae:	86 95       	lsr	r24
    18b0:	86 95       	lsr	r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	24 e5       	ldi	r18, 0x54	; 84
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	82 9f       	mul	r24, r18
    18ba:	f0 01       	movw	r30, r0
    18bc:	83 9f       	mul	r24, r19
    18be:	f0 0d       	add	r31, r0
    18c0:	92 9f       	mul	r25, r18
    18c2:	f0 0d       	add	r31, r0
    18c4:	11 24       	eor	r1, r1
    18c6:	e4 0f       	add	r30, r20
    18c8:	f1 1d       	adc	r31, r1
    18ca:	eb 58       	subi	r30, 0x8B	; 139
    18cc:	fe 4f       	sbci	r31, 0xFE	; 254
    18ce:	80 81       	ld	r24, Z
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	67 70       	andi	r22, 0x07	; 7
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <glcd_get_pixel+0x3a>
    18d6:	95 95       	asr	r25
    18d8:	87 95       	ror	r24
    18da:	6a 95       	dec	r22
    18dc:	e2 f7       	brpl	.-8      	; 0x18d6 <glcd_get_pixel+0x36>
    18de:	81 70       	andi	r24, 0x01	; 1
    18e0:	08 95       	ret
    18e2:	80 e0       	ldi	r24, 0x00	; 0
	if ( glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] & ( 1 << (y%8)) ) {
		return 1;
	} else {
		return 0;
	}
}
    18e4:	08 95       	ret

000018e6 <glcd_draw_bitmap>:
		}
	}
}

void glcd_draw_bitmap(const unsigned char *data)
{
    18e6:	bc 01       	movw	r22, r24
	glcd_select_screen(original_buffer, glcd_bbox_selected);	
#endif
	
	/* Copy bitmap data to the screen buffer */
#if defined(GLCD_DEVICE_AVR8)
	memcpy_P(glcd_buffer_selected, data, (GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8));
    18e8:	80 91 6d 03 	lds	r24, 0x036D
    18ec:	90 91 6e 03 	lds	r25, 0x036E
    18f0:	48 ef       	ldi	r20, 0xF8	; 248
    18f2:	51 e0       	ldi	r21, 0x01	; 1
    18f4:	0e 94 d6 16 	call	0x2dac	; 0x2dac <memcpy_P>
#else
	memcpy(glcd_buffer_selected, data, (GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8));
#endif

	glcd_bbox_refresh(); 
    18f8:	0e 94 37 07 	call	0xe6e	; 0xe6e <glcd_bbox_refresh>
}
    18fc:	08 95       	ret

000018fe <glcd_invert_pixel>:
	} else {
		return 0;
	}
}

void glcd_invert_pixel(uint8_t x, uint8_t y) {
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	08 2f       	mov	r16, r24
    1904:	16 2f       	mov	r17, r22
	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
    1906:	84 35       	cpi	r24, 0x54	; 84
    1908:	e8 f4       	brcc	.+58     	; 0x1944 <glcd_invert_pixel+0x46>
    190a:	60 33       	cpi	r22, 0x30	; 48
    190c:	d8 f4       	brcc	.+54     	; 0x1944 <glcd_invert_pixel+0x46>
		return;
	}
	glcd_update_bbox(x,y,x,y);
    190e:	40 2f       	mov	r20, r16
    1910:	21 2f       	mov	r18, r17
    1912:	0e 94 ff 06 	call	0xdfe	; 0xdfe <glcd_update_bbox>
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
    1916:	e1 2f       	mov	r30, r17
    1918:	e6 95       	lsr	r30
    191a:	e6 95       	lsr	r30
    191c:	e6 95       	lsr	r30
    191e:	84 e5       	ldi	r24, 0x54	; 84
    1920:	e8 9f       	mul	r30, r24
    1922:	f0 01       	movw	r30, r0
    1924:	11 24       	eor	r1, r1
    1926:	e0 0f       	add	r30, r16
    1928:	f1 1d       	adc	r31, r1
    192a:	eb 58       	subi	r30, 0x8B	; 139
    192c:	fe 4f       	sbci	r31, 0xFE	; 254
    192e:	17 70       	andi	r17, 0x07	; 7
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	02 c0       	rjmp	.+4      	; 0x193a <glcd_invert_pixel+0x3c>
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	1a 95       	dec	r17
    193c:	e2 f7       	brpl	.-8      	; 0x1936 <glcd_invert_pixel+0x38>
    193e:	20 81       	ld	r18, Z
    1940:	28 27       	eor	r18, r24
    1942:	20 83       	st	Z, r18
}
    1944:	1f 91       	pop	r17
    1946:	0f 91       	pop	r16
    1948:	08 95       	ret

0000194a <glcd_invert_area>:
		}    
	}
}

void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
    194a:	df 92       	push	r13
    194c:	ef 92       	push	r14
    194e:	ff 92       	push	r15
    1950:	0f 93       	push	r16
    1952:	1f 93       	push	r17
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	d6 2e       	mov	r13, r22
    195a:	08 2f       	mov	r16, r24
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
    195c:	e8 2e       	mov	r14, r24
    195e:	ff 24       	eor	r15, r15
    1960:	e4 0e       	add	r14, r20
    1962:	f1 1c       	adc	r15, r1
		/* Loop through each partial column */
		for (yy = y; yy < (y+h); yy++) {
    1964:	c6 2f       	mov	r28, r22
    1966:	d0 e0       	ldi	r29, 0x00	; 0
    1968:	c2 0f       	add	r28, r18
    196a:	d1 1d       	adc	r29, r1
    196c:	0b c0       	rjmp	.+22     	; 0x1984 <glcd_invert_area+0x3a>
			/* Go down and invert every pixel */
			glcd_invert_pixel(xx,yy);
    196e:	80 2f       	mov	r24, r16
    1970:	61 2f       	mov	r22, r17
    1972:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <glcd_invert_pixel>
void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
		/* Loop through each partial column */
		for (yy = y; yy < (y+h); yy++) {
    1976:	1f 5f       	subi	r17, 0xFF	; 255
    1978:	81 2f       	mov	r24, r17
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	8c 17       	cp	r24, r28
    197e:	9d 07       	cpc	r25, r29
    1980:	b4 f3       	brlt	.-20     	; 0x196e <glcd_invert_area+0x24>
}

void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
    1982:	0f 5f       	subi	r16, 0xFF	; 255
    1984:	80 2f       	mov	r24, r16
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	8e 15       	cp	r24, r14
    198a:	9f 05       	cpc	r25, r15
    198c:	14 f4       	brge	.+4      	; 0x1992 <glcd_invert_area+0x48>
    198e:	1d 2d       	mov	r17, r13
    1990:	f3 cf       	rjmp	.-26     	; 0x1978 <glcd_invert_area+0x2e>
		for (yy = y; yy < (y+h); yy++) {
			/* Go down and invert every pixel */
			glcd_invert_pixel(xx,yy);
		}
	}
}
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	1f 91       	pop	r17
    1998:	0f 91       	pop	r16
    199a:	ff 90       	pop	r15
    199c:	ef 90       	pop	r14
    199e:	df 90       	pop	r13
    19a0:	08 95       	ret

000019a2 <glcd_set_pixel>:
#include <stdlib.h>
#include <string.h>
#include "glcd.h"

/* Based on PCD8544 library by Limor Fried */
void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
    19a2:	a8 2f       	mov	r26, r24
    19a4:	76 2f       	mov	r23, r22
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
    19a6:	84 35       	cpi	r24, 0x54	; 84
    19a8:	d0 f5       	brcc	.+116    	; 0x1a1e <glcd_set_pixel+0x7c>
    19aa:	60 33       	cpi	r22, 0x30	; 48
    19ac:	c0 f5       	brcc	.+112    	; 0x1a1e <glcd_set_pixel+0x7c>
    19ae:	56 2f       	mov	r21, r22
    19b0:	56 95       	lsr	r21
    19b2:	56 95       	lsr	r21
    19b4:	56 95       	lsr	r21
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	26 2f       	mov	r18, r22
    19ba:	30 e0       	ldi	r19, 0x00	; 0
		/* don't do anything if x/y is outside bounds of display size */
		return;
	}

	if (color) {
    19bc:	44 23       	and	r20, r20
    19be:	a1 f0       	breq	.+40     	; 0x19e8 <glcd_set_pixel+0x46>
		/* Set black */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
    19c0:	e4 e5       	ldi	r30, 0x54	; 84
    19c2:	5e 9f       	mul	r21, r30
    19c4:	f0 01       	movw	r30, r0
    19c6:	11 24       	eor	r1, r1
    19c8:	e8 0f       	add	r30, r24
    19ca:	f9 1f       	adc	r31, r25
    19cc:	eb 58       	subi	r30, 0x8B	; 139
    19ce:	fe 4f       	sbci	r31, 0xFE	; 254
    19d0:	27 70       	andi	r18, 0x07	; 7
    19d2:	30 70       	andi	r19, 0x00	; 0
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <glcd_set_pixel+0x3c>
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	2a 95       	dec	r18
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <glcd_set_pixel+0x38>
    19e2:	20 81       	ld	r18, Z
    19e4:	28 2b       	or	r18, r24
    19e6:	14 c0       	rjmp	.+40     	; 0x1a10 <glcd_set_pixel+0x6e>
	} else {
		/* Set white */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
    19e8:	e4 e5       	ldi	r30, 0x54	; 84
    19ea:	5e 9f       	mul	r21, r30
    19ec:	f0 01       	movw	r30, r0
    19ee:	11 24       	eor	r1, r1
    19f0:	e8 0f       	add	r30, r24
    19f2:	f9 1f       	adc	r31, r25
    19f4:	eb 58       	subi	r30, 0x8B	; 139
    19f6:	fe 4f       	sbci	r31, 0xFE	; 254
    19f8:	27 70       	andi	r18, 0x07	; 7
    19fa:	30 70       	andi	r19, 0x00	; 0
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <glcd_set_pixel+0x64>
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	2a 95       	dec	r18
    1a08:	e2 f7       	brpl	.-8      	; 0x1a02 <glcd_set_pixel+0x60>
    1a0a:	80 95       	com	r24
    1a0c:	20 81       	ld	r18, Z
    1a0e:	28 23       	and	r18, r24
    1a10:	20 83       	st	Z, r18
	}

	glcd_update_bbox(x,y,x,y);
    1a12:	8a 2f       	mov	r24, r26
    1a14:	67 2f       	mov	r22, r23
    1a16:	4a 2f       	mov	r20, r26
    1a18:	27 2f       	mov	r18, r23
    1a1a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <glcd_update_bbox>
    1a1e:	08 95       	ret

00001a20 <glcd_fill_circle>:
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1a20:	3f 92       	push	r3
    1a22:	4f 92       	push	r4
    1a24:	5f 92       	push	r5
    1a26:	6f 92       	push	r6
    1a28:	7f 92       	push	r7
    1a2a:	8f 92       	push	r8
    1a2c:	9f 92       	push	r9
    1a2e:	af 92       	push	r10
    1a30:	bf 92       	push	r11
    1a32:	cf 92       	push	r12
    1a34:	df 92       	push	r13
    1a36:	ef 92       	push	r14
    1a38:	ff 92       	push	r15
    1a3a:	0f 93       	push	r16
    1a3c:	1f 93       	push	r17
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	00 d0       	rcall	.+0      	; 0x1a44 <glcd_fill_circle+0x24>
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <glcd_fill_circle+0x26>
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <glcd_fill_circle+0x28>
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	b8 2e       	mov	r11, r24
    1a4e:	e6 2e       	mov	r14, r22
    1a50:	f4 2e       	mov	r15, r20
    1a52:	62 2e       	mov	r6, r18
	
	int8_t f = 1 - r;
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    1a54:	04 2f       	mov	r16, r20
    1a56:	10 e0       	ldi	r17, 0x00	; 0
	int8_t x = 0;
	int8_t y = r;
	
	int16_t i;

	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
    1a58:	64 1b       	sub	r22, r20
    1a5a:	48 0f       	add	r20, r24
    1a5c:	2f 2d       	mov	r18, r15
    1a5e:	2e 0d       	add	r18, r14
    1a60:	8f 19       	sub	r24, r15
    1a62:	0e 94 ff 06 	call	0xdfe	; 0xdfe <glcd_update_bbox>
	
	for (i=y0-r; i<=y0+r; i++) {
    1a66:	8e 2c       	mov	r8, r14
    1a68:	99 24       	eor	r9, r9
    1a6a:	24 01       	movw	r4, r8
    1a6c:	40 1a       	sub	r4, r16
    1a6e:	51 0a       	sbc	r5, r17
    1a70:	68 01       	movw	r12, r16
    1a72:	c8 0c       	add	r12, r8
    1a74:	d9 1c       	adc	r13, r9
    1a76:	08 c0       	rjmp	.+16     	; 0x1a88 <glcd_fill_circle+0x68>
		glcd_set_pixel(x0, i, color);
    1a78:	8b 2d       	mov	r24, r11
    1a7a:	64 2d       	mov	r22, r4
    1a7c:	46 2d       	mov	r20, r6
    1a7e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
	
	int16_t i;

	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
	
	for (i=y0-r; i<=y0+r; i++) {
    1a82:	08 94       	sec
    1a84:	41 1c       	adc	r4, r1
    1a86:	51 1c       	adc	r5, r1
    1a88:	c4 14       	cp	r12, r4
    1a8a:	d5 04       	cpc	r13, r5
    1a8c:	ac f7       	brge	.-22     	; 0x1a78 <glcd_fill_circle+0x58>
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
	
	int8_t f = 1 - r;
    1a8e:	dd 24       	eor	r13, r13
    1a90:	d3 94       	inc	r13
    1a92:	df 18       	sub	r13, r15
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    1a94:	00 0f       	add	r16, r16
    1a96:	11 1f       	adc	r17, r17
    1a98:	40 2e       	mov	r4, r16
    1a9a:	41 94       	neg	r4
	int8_t x = 0;
	int8_t y = r;
    1a9c:	cf 2c       	mov	r12, r15
    1a9e:	aa 24       	eor	r10, r10
    1aa0:	00 e0       	ldi	r16, 0x00	; 0
    1aa2:	10 e0       	ldi	r17, 0x00	; 0
    1aa4:	83 e0       	ldi	r24, 0x03	; 3
    1aa6:	78 2e       	mov	r7, r24
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1aa8:	8e 2d       	mov	r24, r14
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	9c 01       	movw	r18, r24
    1aae:	21 50       	subi	r18, 0x01	; 1
    1ab0:	30 40       	sbci	r19, 0x00	; 0
    1ab2:	3a 83       	std	Y+2, r19	; 0x02
    1ab4:	29 83       	std	Y+1, r18	; 0x01
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	31 96       	adiw	r30, 0x01	; 1
    1aba:	fc 83       	std	Y+4, r31	; 0x04
    1abc:	eb 83       	std	Y+3, r30	; 0x03
    1abe:	54 c0       	rjmp	.+168    	; 0x1b68 <glcd_fill_circle+0x148>
	for (i=y0-r; i<=y0+r; i++) {
		glcd_set_pixel(x0, i, color);
	}
	
	while (x < y) {
		if (f >= 0) {
    1ac0:	d7 fc       	sbrc	r13, 7
    1ac2:	04 c0       	rjmp	.+8      	; 0x1acc <glcd_fill_circle+0xac>
			y--;
    1ac4:	ca 94       	dec	r12
			ddF_y += 2;
    1ac6:	f2 e0       	ldi	r31, 0x02	; 2
    1ac8:	4f 0e       	add	r4, r31
			f += ddF_y;
    1aca:	d4 0c       	add	r13, r4
		}
		x++;
    1acc:	a3 94       	inc	r10
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
    1ace:	8c 2d       	mov	r24, r12
    1ad0:	99 27       	eor	r25, r25
    1ad2:	87 fd       	sbrc	r24, 7
    1ad4:	90 95       	com	r25
    1ad6:	94 01       	movw	r18, r8
    1ad8:	28 1b       	sub	r18, r24
    1ada:	39 0b       	sbc	r19, r25
    1adc:	3e 83       	std	Y+6, r19	; 0x06
    1ade:	2d 83       	std	Y+5, r18	; 0x05
    1ae0:	7c 01       	movw	r14, r24
    1ae2:	e8 0c       	add	r14, r8
    1ae4:	f9 1c       	adc	r15, r9
			glcd_set_pixel(x0+x, i, color);
    1ae6:	3a 2c       	mov	r3, r10
    1ae8:	3b 0c       	add	r3, r11
			glcd_set_pixel(x0-x, i, color);
    1aea:	5b 2c       	mov	r5, r11
    1aec:	5a 18       	sub	r5, r10
    1aee:	0f c0       	rjmp	.+30     	; 0x1b0e <glcd_fill_circle+0xee>
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
    1af0:	83 2d       	mov	r24, r3
    1af2:	6d 81       	ldd	r22, Y+5	; 0x05
    1af4:	46 2d       	mov	r20, r6
    1af6:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
			glcd_set_pixel(x0-x, i, color);
    1afa:	85 2d       	mov	r24, r5
    1afc:	6d 81       	ldd	r22, Y+5	; 0x05
    1afe:	46 2d       	mov	r20, r6
    1b00:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
    1b04:	8d 81       	ldd	r24, Y+5	; 0x05
    1b06:	9e 81       	ldd	r25, Y+6	; 0x06
    1b08:	01 96       	adiw	r24, 0x01	; 1
    1b0a:	9e 83       	std	Y+6, r25	; 0x06
    1b0c:	8d 83       	std	Y+5, r24	; 0x05
    1b0e:	ed 81       	ldd	r30, Y+5	; 0x05
    1b10:	fe 81       	ldd	r31, Y+6	; 0x06
    1b12:	ee 16       	cp	r14, r30
    1b14:	ff 06       	cpc	r15, r31
    1b16:	64 f7       	brge	.-40     	; 0x1af0 <glcd_fill_circle+0xd0>
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1b18:	29 81       	ldd	r18, Y+1	; 0x01
    1b1a:	3a 81       	ldd	r19, Y+2	; 0x02
    1b1c:	20 1b       	sub	r18, r16
    1b1e:	31 0b       	sbc	r19, r17
    1b20:	3e 83       	std	Y+6, r19	; 0x06
    1b22:	2d 83       	std	Y+5, r18	; 0x05
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    1b24:	eb 80       	ldd	r14, Y+3	; 0x03
    1b26:	fc 80       	ldd	r15, Y+4	; 0x04
    1b28:	e0 0e       	add	r14, r16
    1b2a:	f1 1e       	adc	r15, r17
			glcd_set_pixel(x0+y, i, color);
    1b2c:	3c 2c       	mov	r3, r12
    1b2e:	3b 0c       	add	r3, r11
			glcd_set_pixel(x0-y, i, color);
    1b30:	5b 2c       	mov	r5, r11
    1b32:	5c 18       	sub	r5, r12
    1b34:	0f c0       	rjmp	.+30     	; 0x1b54 <glcd_fill_circle+0x134>
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
			glcd_set_pixel(x0+y, i, color);
    1b36:	83 2d       	mov	r24, r3
    1b38:	6d 81       	ldd	r22, Y+5	; 0x05
    1b3a:	46 2d       	mov	r20, r6
    1b3c:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
			glcd_set_pixel(x0-y, i, color);
    1b40:	85 2d       	mov	r24, r5
    1b42:	6d 81       	ldd	r22, Y+5	; 0x05
    1b44:	46 2d       	mov	r20, r6
    1b46:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    1b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4e:	01 96       	adiw	r24, 0x01	; 1
    1b50:	9e 83       	std	Y+6, r25	; 0x06
    1b52:	8d 83       	std	Y+5, r24	; 0x05
    1b54:	ed 81       	ldd	r30, Y+5	; 0x05
    1b56:	fe 81       	ldd	r31, Y+6	; 0x06
    1b58:	ee 16       	cp	r14, r30
    1b5a:	ff 06       	cpc	r15, r31
    1b5c:	64 f7       	brge	.-40     	; 0x1b36 <glcd_fill_circle+0x116>
			ddF_y += 2;
			f += ddF_y;
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
    1b5e:	d7 0c       	add	r13, r7
    1b60:	0f 5f       	subi	r16, 0xFF	; 255
    1b62:	1f 4f       	sbci	r17, 0xFF	; 255
    1b64:	f2 e0       	ldi	r31, 0x02	; 2
    1b66:	7f 0e       	add	r7, r31
	
	for (i=y0-r; i<=y0+r; i++) {
		glcd_set_pixel(x0, i, color);
	}
	
	while (x < y) {
    1b68:	ac 14       	cp	r10, r12
    1b6a:	0c f4       	brge	.+2      	; 0x1b6e <glcd_fill_circle+0x14e>
    1b6c:	a9 cf       	rjmp	.-174    	; 0x1ac0 <glcd_fill_circle+0xa0>
		for (i=y0-x; i<=y0+x; i++) {
			glcd_set_pixel(x0+y, i, color);
			glcd_set_pixel(x0-y, i, color);
		}    
	}
}
    1b6e:	26 96       	adiw	r28, 0x06	; 6
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	1f 91       	pop	r17
    1b80:	0f 91       	pop	r16
    1b82:	ff 90       	pop	r15
    1b84:	ef 90       	pop	r14
    1b86:	df 90       	pop	r13
    1b88:	cf 90       	pop	r12
    1b8a:	bf 90       	pop	r11
    1b8c:	af 90       	pop	r10
    1b8e:	9f 90       	pop	r9
    1b90:	8f 90       	pop	r8
    1b92:	7f 90       	pop	r7
    1b94:	6f 90       	pop	r6
    1b96:	5f 90       	pop	r5
    1b98:	4f 90       	pop	r4
    1b9a:	3f 90       	pop	r3
    1b9c:	08 95       	ret

00001b9e <glcd_draw_circle>:
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
}

void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1b9e:	7f 92       	push	r7
    1ba0:	8f 92       	push	r8
    1ba2:	9f 92       	push	r9
    1ba4:	af 92       	push	r10
    1ba6:	bf 92       	push	r11
    1ba8:	cf 92       	push	r12
    1baa:	df 92       	push	r13
    1bac:	ef 92       	push	r14
    1bae:	ff 92       	push	r15
    1bb0:	0f 93       	push	r16
    1bb2:	1f 93       	push	r17
    1bb4:	a8 2e       	mov	r10, r24
    1bb6:	b6 2e       	mov	r11, r22
    1bb8:	c2 2e       	mov	r12, r18
		
	int8_t f = 1 - r;
    1bba:	99 24       	eor	r9, r9
    1bbc:	93 94       	inc	r9
    1bbe:	94 1a       	sub	r9, r20
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    1bc0:	84 2f       	mov	r24, r20
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	78 2e       	mov	r7, r24
    1bca:	71 94       	neg	r7
	int8_t x = 0;
	int8_t y = r;
    1bcc:	d4 2e       	mov	r13, r20
	
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
    1bce:	ea 2c       	mov	r14, r10
    1bd0:	e4 1a       	sub	r14, r20
    1bd2:	06 2f       	mov	r16, r22
    1bd4:	04 1b       	sub	r16, r20
    1bd6:	f4 2e       	mov	r15, r20
    1bd8:	fa 0c       	add	r15, r10
    1bda:	14 2f       	mov	r17, r20
    1bdc:	16 0f       	add	r17, r22
    1bde:	8e 2d       	mov	r24, r14
    1be0:	60 2f       	mov	r22, r16
    1be2:	4f 2d       	mov	r20, r15
    1be4:	21 2f       	mov	r18, r17
    1be6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <glcd_update_bbox>
	
	glcd_set_pixel(x0, y0+r, color);
    1bea:	8a 2d       	mov	r24, r10
    1bec:	61 2f       	mov	r22, r17
    1bee:	4c 2d       	mov	r20, r12
    1bf0:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
	glcd_set_pixel(x0, y0-r, color);
    1bf4:	8a 2d       	mov	r24, r10
    1bf6:	60 2f       	mov	r22, r16
    1bf8:	4c 2d       	mov	r20, r12
    1bfa:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
	glcd_set_pixel(x0+r, y0, color);
    1bfe:	8f 2d       	mov	r24, r15
    1c00:	6b 2d       	mov	r22, r11
    1c02:	4c 2d       	mov	r20, r12
    1c04:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
	glcd_set_pixel(x0-r, y0, color);
    1c08:	8e 2d       	mov	r24, r14
    1c0a:	6b 2d       	mov	r22, r11
    1c0c:	4c 2d       	mov	r20, r12
    1c0e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
    1c12:	ee 24       	eor	r14, r14
    1c14:	23 e0       	ldi	r18, 0x03	; 3
    1c16:	82 2e       	mov	r8, r18
    1c18:	42 c0       	rjmp	.+132    	; 0x1c9e <glcd_draw_circle+0x100>
	
	while (x<y) {
		if (f >= 0) {
    1c1a:	97 fc       	sbrc	r9, 7
    1c1c:	04 c0       	rjmp	.+8      	; 0x1c26 <glcd_draw_circle+0x88>
			y--;
    1c1e:	da 94       	dec	r13
			ddF_y += 2;
    1c20:	82 e0       	ldi	r24, 0x02	; 2
    1c22:	78 0e       	add	r7, r24
			f += ddF_y;
    1c24:	97 0c       	add	r9, r7
		}
		x++;
    1c26:	e3 94       	inc	r14
		ddF_x += 2;
		f += ddF_x;
    1c28:	98 0c       	add	r9, r8
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
}

void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1c2a:	fe 2c       	mov	r15, r14
    1c2c:	fa 0c       	add	r15, r10
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		glcd_set_pixel(x0 + x, y0 + y, color);
    1c2e:	1d 2d       	mov	r17, r13
    1c30:	1b 0d       	add	r17, r11
    1c32:	8f 2d       	mov	r24, r15
    1c34:	61 2f       	mov	r22, r17
    1c36:	4c 2d       	mov	r20, r12
    1c38:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
    1c3c:	0a 2d       	mov	r16, r10
    1c3e:	0e 19       	sub	r16, r14
		glcd_set_pixel(x0 - x, y0 + y, color);
    1c40:	80 2f       	mov	r24, r16
    1c42:	61 2f       	mov	r22, r17
    1c44:	4c 2d       	mov	r20, r12
    1c46:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
		glcd_set_pixel(x0 + x, y0 - y, color);
    1c4a:	1b 2d       	mov	r17, r11
    1c4c:	1d 19       	sub	r17, r13
    1c4e:	8f 2d       	mov	r24, r15
    1c50:	61 2f       	mov	r22, r17
    1c52:	4c 2d       	mov	r20, r12
    1c54:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
		glcd_set_pixel(x0 - x, y0 - y, color);
    1c58:	80 2f       	mov	r24, r16
    1c5a:	61 2f       	mov	r22, r17
    1c5c:	4c 2d       	mov	r20, r12
    1c5e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
		
		glcd_set_pixel(x0 + y, y0 + x, color);
    1c62:	fd 2c       	mov	r15, r13
    1c64:	fa 0c       	add	r15, r10
    1c66:	1e 2d       	mov	r17, r14
    1c68:	1b 0d       	add	r17, r11
    1c6a:	8f 2d       	mov	r24, r15
    1c6c:	61 2f       	mov	r22, r17
    1c6e:	4c 2d       	mov	r20, r12
    1c70:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
		glcd_set_pixel(x0 - y, y0 + x, color);
    1c74:	0a 2d       	mov	r16, r10
    1c76:	0d 19       	sub	r16, r13
    1c78:	80 2f       	mov	r24, r16
    1c7a:	61 2f       	mov	r22, r17
    1c7c:	4c 2d       	mov	r20, r12
    1c7e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
    1c82:	1b 2d       	mov	r17, r11
    1c84:	1e 19       	sub	r17, r14
		glcd_set_pixel(x0 + y, y0 - x, color);
    1c86:	8f 2d       	mov	r24, r15
    1c88:	61 2f       	mov	r22, r17
    1c8a:	4c 2d       	mov	r20, r12
    1c8c:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
		glcd_set_pixel(x0 - y, y0 - x, color);
    1c90:	80 2f       	mov	r24, r16
    1c92:	61 2f       	mov	r22, r17
    1c94:	4c 2d       	mov	r20, r12
    1c96:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
    1c9a:	82 e0       	ldi	r24, 0x02	; 2
    1c9c:	88 0e       	add	r8, r24
	glcd_set_pixel(x0, y0+r, color);
	glcd_set_pixel(x0, y0-r, color);
	glcd_set_pixel(x0+r, y0, color);
	glcd_set_pixel(x0-r, y0, color);
	
	while (x<y) {
    1c9e:	ed 14       	cp	r14, r13
    1ca0:	0c f4       	brge	.+2      	; 0x1ca4 <glcd_draw_circle+0x106>
    1ca2:	bb cf       	rjmp	.-138    	; 0x1c1a <glcd_draw_circle+0x7c>
		glcd_set_pixel(x0 - y, y0 + x, color);
		glcd_set_pixel(x0 + y, y0 - x, color);
		glcd_set_pixel(x0 - y, y0 - x, color);
		
	}
}
    1ca4:	1f 91       	pop	r17
    1ca6:	0f 91       	pop	r16
    1ca8:	ff 90       	pop	r15
    1caa:	ef 90       	pop	r14
    1cac:	df 90       	pop	r13
    1cae:	cf 90       	pop	r12
    1cb0:	bf 90       	pop	r11
    1cb2:	af 90       	pop	r10
    1cb4:	9f 90       	pop	r9
    1cb6:	8f 90       	pop	r8
    1cb8:	7f 90       	pop	r7
    1cba:	08 95       	ret

00001cbc <glcd_draw_rect_thick>:
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect_thick(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t tx, uint8_t ty, uint8_t color)
{
    1cbc:	2f 92       	push	r2
    1cbe:	3f 92       	push	r3
    1cc0:	4f 92       	push	r4
    1cc2:	5f 92       	push	r5
    1cc4:	6f 92       	push	r6
    1cc6:	7f 92       	push	r7
    1cc8:	8f 92       	push	r8
    1cca:	9f 92       	push	r9
    1ccc:	af 92       	push	r10
    1cce:	bf 92       	push	r11
    1cd0:	cf 92       	push	r12
    1cd2:	df 92       	push	r13
    1cd4:	ef 92       	push	r14
    1cd6:	ff 92       	push	r15
    1cd8:	0f 93       	push	r16
    1cda:	1f 93       	push	r17
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <glcd_draw_rect_thick+0x26>
    1ce2:	0f 92       	push	r0
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	b8 2e       	mov	r11, r24
    1cea:	a6 2e       	mov	r10, r22
    1cec:	44 2e       	mov	r4, r20
    1cee:	29 83       	std	Y+1, r18	; 0x01
    1cf0:	90 2e       	mov	r9, r16
    1cf2:	8e 2d       	mov	r24, r14
    1cf4:	5c 2c       	mov	r5, r12
	int16_t i, t;
	
	if (tx == 0) {
    1cf6:	00 23       	and	r16, r16
    1cf8:	11 f4       	brne	.+4      	; 0x1cfe <glcd_draw_rect_thick+0x42>
    1cfa:	99 24       	eor	r9, r9
    1cfc:	93 94       	inc	r9
		tx = 1;
	}

	if (ty == 0) {
    1cfe:	88 23       	and	r24, r24
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <glcd_draw_rect_thick+0x48>
    1d02:	81 e0       	ldi	r24, 0x01	; 1
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
    1d04:	00 e0       	ldi	r16, 0x00	; 0
    1d06:	10 e0       	ldi	r17, 0x00	; 0
    1d08:	cb 2c       	mov	r12, r11
    1d0a:	dd 24       	eor	r13, r13
    1d0c:	16 01       	movw	r2, r12
    1d0e:	24 0c       	add	r2, r4
    1d10:	31 1c       	adc	r3, r1
    1d12:	89 80       	ldd	r8, Y+1	; 0x01
    1d14:	8a 0c       	add	r8, r10
		/* Top and bottom sides */
		for (t=0; t<(ty); t++) {
    1d16:	68 2e       	mov	r6, r24
    1d18:	77 24       	eor	r7, r7
    1d1a:	18 c0       	rjmp	.+48     	; 0x1d4c <glcd_draw_rect_thick+0x90>
			glcd_set_pixel(i, y+t, color);
    1d1c:	6a 81       	ldd	r22, Y+2	; 0x02
    1d1e:	6a 0d       	add	r22, r10
    1d20:	8e 2d       	mov	r24, r14
    1d22:	45 2d       	mov	r20, r5
    1d24:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
			glcd_set_pixel(i, y+h-1-t, color);
    1d28:	8e 2d       	mov	r24, r14
    1d2a:	6f 2d       	mov	r22, r15
    1d2c:	45 2d       	mov	r20, r5
    1d2e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
		/* Top and bottom sides */
		for (t=0; t<(ty); t++) {
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	9b 81       	ldd	r25, Y+3	; 0x03
    1d36:	01 96       	adiw	r24, 0x01	; 1
    1d38:	9b 83       	std	Y+3, r25	; 0x03
    1d3a:	8a 83       	std	Y+2, r24	; 0x02
    1d3c:	fa 94       	dec	r15
    1d3e:	ea 81       	ldd	r30, Y+2	; 0x02
    1d40:	fb 81       	ldd	r31, Y+3	; 0x03
    1d42:	e6 15       	cp	r30, r6
    1d44:	f7 05       	cpc	r31, r7
    1d46:	54 f3       	brlt	.-44     	; 0x1d1c <glcd_draw_rect_thick+0x60>
    1d48:	0f 5f       	subi	r16, 0xFF	; 255
    1d4a:	1f 4f       	sbci	r17, 0xFF	; 255

	if (ty == 0) {
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
    1d4c:	c8 01       	movw	r24, r16
    1d4e:	8c 0d       	add	r24, r12
    1d50:	9d 1d       	adc	r25, r13
    1d52:	82 15       	cp	r24, r2
    1d54:	93 05       	cpc	r25, r3
    1d56:	34 f4       	brge	.+12     	; 0x1d64 <glcd_draw_rect_thick+0xa8>
    1d58:	f8 2c       	mov	r15, r8
    1d5a:	1b 82       	std	Y+3, r1	; 0x03
    1d5c:	1a 82       	std	Y+2, r1	; 0x02
    1d5e:	eb 2c       	mov	r14, r11
    1d60:	e0 0e       	add	r14, r16
    1d62:	ec cf       	rjmp	.-40     	; 0x1d3c <glcd_draw_rect_thick+0x80>
		for (t=0; t<(ty); t++) {
			glcd_set_pixel(i, y+t, color);
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
    1d64:	00 e0       	ldi	r16, 0x00	; 0
    1d66:	10 e0       	ldi	r17, 0x00	; 0
    1d68:	ca 2c       	mov	r12, r10
    1d6a:	dd 24       	eor	r13, r13
    1d6c:	36 01       	movw	r6, r12
    1d6e:	f9 81       	ldd	r31, Y+1	; 0x01
    1d70:	6f 0e       	add	r6, r31
    1d72:	71 1c       	adc	r7, r1
    1d74:	34 2c       	mov	r3, r4
    1d76:	3b 0c       	add	r3, r11
		/* Left and right sides */
		for (t=0; t<(tx); t++) {
    1d78:	89 2c       	mov	r8, r9
    1d7a:	99 24       	eor	r9, r9
    1d7c:	18 c0       	rjmp	.+48     	; 0x1dae <glcd_draw_rect_thick+0xf2>
			glcd_set_pixel(x+t, i, color);
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	8b 0d       	add	r24, r11
    1d82:	6f 2d       	mov	r22, r15
    1d84:	45 2d       	mov	r20, r5
    1d86:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
			glcd_set_pixel(x+w-1-t, i, color);
    1d8a:	8e 2d       	mov	r24, r14
    1d8c:	6f 2d       	mov	r22, r15
    1d8e:	45 2d       	mov	r20, r5
    1d90:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
		/* Left and right sides */
		for (t=0; t<(tx); t++) {
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	9b 81       	ldd	r25, Y+3	; 0x03
    1d98:	01 96       	adiw	r24, 0x01	; 1
    1d9a:	9b 83       	std	Y+3, r25	; 0x03
    1d9c:	8a 83       	std	Y+2, r24	; 0x02
    1d9e:	ea 94       	dec	r14
    1da0:	ea 81       	ldd	r30, Y+2	; 0x02
    1da2:	fb 81       	ldd	r31, Y+3	; 0x03
    1da4:	e8 15       	cp	r30, r8
    1da6:	f9 05       	cpc	r31, r9
    1da8:	54 f3       	brlt	.-44     	; 0x1d7e <glcd_draw_rect_thick+0xc2>
    1daa:	0f 5f       	subi	r16, 0xFF	; 255
    1dac:	1f 4f       	sbci	r17, 0xFF	; 255
		for (t=0; t<(ty); t++) {
			glcd_set_pixel(i, y+t, color);
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
    1dae:	c8 01       	movw	r24, r16
    1db0:	8c 0d       	add	r24, r12
    1db2:	9d 1d       	adc	r25, r13
    1db4:	86 15       	cp	r24, r6
    1db6:	97 05       	cpc	r25, r7
    1db8:	34 f4       	brge	.+12     	; 0x1dc6 <glcd_draw_rect_thick+0x10a>
    1dba:	e3 2c       	mov	r14, r3
    1dbc:	1b 82       	std	Y+3, r1	; 0x03
    1dbe:	1a 82       	std	Y+2, r1	; 0x02
    1dc0:	fa 2c       	mov	r15, r10
    1dc2:	f0 0e       	add	r15, r16
    1dc4:	ec cf       	rjmp	.-40     	; 0x1d9e <glcd_draw_rect_thick+0xe2>
		for (t=0; t<(tx); t++) {
			glcd_set_pixel(x+t, i, color);
			glcd_set_pixel(x+w-1-t, i, color);
		}
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    1dc6:	4b 2d       	mov	r20, r11
    1dc8:	41 50       	subi	r20, 0x01	; 1
    1dca:	44 0d       	add	r20, r4
    1dcc:	2a 2d       	mov	r18, r10
    1dce:	21 50       	subi	r18, 0x01	; 1
    1dd0:	f9 81       	ldd	r31, Y+1	; 0x01
    1dd2:	2f 0f       	add	r18, r31
    1dd4:	8b 2d       	mov	r24, r11
    1dd6:	6a 2d       	mov	r22, r10
    1dd8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <glcd_update_bbox>
}
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	1f 91       	pop	r17
    1de8:	0f 91       	pop	r16
    1dea:	ff 90       	pop	r15
    1dec:	ef 90       	pop	r14
    1dee:	df 90       	pop	r13
    1df0:	cf 90       	pop	r12
    1df2:	bf 90       	pop	r11
    1df4:	af 90       	pop	r10
    1df6:	9f 90       	pop	r9
    1df8:	8f 90       	pop	r8
    1dfa:	7f 90       	pop	r7
    1dfc:	6f 90       	pop	r6
    1dfe:	5f 90       	pop	r5
    1e00:	4f 90       	pop	r4
    1e02:	3f 90       	pop	r3
    1e04:	2f 90       	pop	r2
    1e06:	08 95       	ret

00001e08 <glcd_draw_rect>:
	}
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    1e08:	6f 92       	push	r6
    1e0a:	7f 92       	push	r7
    1e0c:	8f 92       	push	r8
    1e0e:	9f 92       	push	r9
    1e10:	af 92       	push	r10
    1e12:	bf 92       	push	r11
    1e14:	cf 92       	push	r12
    1e16:	df 92       	push	r13
    1e18:	ef 92       	push	r14
    1e1a:	ff 92       	push	r15
    1e1c:	0f 93       	push	r16
    1e1e:	1f 93       	push	r17
    1e20:	cf 93       	push	r28
    1e22:	df 93       	push	r29
    1e24:	e8 2e       	mov	r14, r24
    1e26:	f6 2e       	mov	r15, r22
    1e28:	a4 2e       	mov	r10, r20
    1e2a:	72 2e       	mov	r7, r18
    1e2c:	b0 2e       	mov	r11, r16
	int16_t i;
	for (i=x; i<x+w; i++) {
    1e2e:	c0 e0       	ldi	r28, 0x00	; 0
    1e30:	d0 e0       	ldi	r29, 0x00	; 0
    1e32:	c8 2e       	mov	r12, r24
    1e34:	dd 24       	eor	r13, r13
    1e36:	46 01       	movw	r8, r12
    1e38:	84 0e       	add	r8, r20
    1e3a:	91 1c       	adc	r9, r1
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
    1e3c:	fa 94       	dec	r15
    1e3e:	0f 2d       	mov	r16, r15
    1e40:	02 0f       	add	r16, r18
    1e42:	f3 94       	inc	r15
    1e44:	0d c0       	rjmp	.+26     	; 0x1e60 <glcd_draw_rect+0x58>
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    1e46:	1e 2d       	mov	r17, r14
    1e48:	1c 0f       	add	r17, r28
		glcd_set_pixel(i, y, color);
    1e4a:	81 2f       	mov	r24, r17
    1e4c:	6f 2d       	mov	r22, r15
    1e4e:	4b 2d       	mov	r20, r11
    1e50:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
		glcd_set_pixel(i, y+h-1, color);
    1e54:	81 2f       	mov	r24, r17
    1e56:	60 2f       	mov	r22, r16
    1e58:	4b 2d       	mov	r20, r11
    1e5a:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
    1e5e:	21 96       	adiw	r28, 0x01	; 1
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    1e60:	ce 01       	movw	r24, r28
    1e62:	8c 0d       	add	r24, r12
    1e64:	9d 1d       	adc	r25, r13
    1e66:	88 15       	cp	r24, r8
    1e68:	99 05       	cpc	r25, r9
    1e6a:	6c f3       	brlt	.-38     	; 0x1e46 <glcd_draw_rect+0x3e>
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    1e6c:	c0 e0       	ldi	r28, 0x00	; 0
    1e6e:	d0 e0       	ldi	r29, 0x00	; 0
    1e70:	cf 2c       	mov	r12, r15
    1e72:	dd 24       	eor	r13, r13
    1e74:	46 01       	movw	r8, r12
    1e76:	87 0c       	add	r8, r7
    1e78:	91 1c       	adc	r9, r1
    1e7a:	0e 2d       	mov	r16, r14
    1e7c:	01 50       	subi	r16, 0x01	; 1
		glcd_set_pixel(x, i, color);
		glcd_set_pixel(x+w-1, i, color);
    1e7e:	60 2e       	mov	r6, r16
    1e80:	6a 0c       	add	r6, r10
    1e82:	0d c0       	rjmp	.+26     	; 0x1e9e <glcd_draw_rect+0x96>
	int16_t i;
	for (i=x; i<x+w; i++) {
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    1e84:	1f 2d       	mov	r17, r15
    1e86:	1c 0f       	add	r17, r28
		glcd_set_pixel(x, i, color);
    1e88:	8e 2d       	mov	r24, r14
    1e8a:	61 2f       	mov	r22, r17
    1e8c:	4b 2d       	mov	r20, r11
    1e8e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
		glcd_set_pixel(x+w-1, i, color);
    1e92:	86 2d       	mov	r24, r6
    1e94:	61 2f       	mov	r22, r17
    1e96:	4b 2d       	mov	r20, r11
    1e98:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
    1e9c:	21 96       	adiw	r28, 0x01	; 1
	int16_t i;
	for (i=x; i<x+w; i++) {
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	8c 0d       	add	r24, r12
    1ea2:	9d 1d       	adc	r25, r13
    1ea4:	88 15       	cp	r24, r8
    1ea6:	99 05       	cpc	r25, r9
    1ea8:	6c f3       	brlt	.-38     	; 0x1e84 <glcd_draw_rect+0x7c>
		glcd_set_pixel(x, i, color);
		glcd_set_pixel(x+w-1, i, color);
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    1eaa:	0a 0d       	add	r16, r10
    1eac:	2f 2d       	mov	r18, r15
    1eae:	21 50       	subi	r18, 0x01	; 1
    1eb0:	27 0d       	add	r18, r7
    1eb2:	8e 2d       	mov	r24, r14
    1eb4:	6f 2d       	mov	r22, r15
    1eb6:	40 2f       	mov	r20, r16
    1eb8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <glcd_update_bbox>
}
    1ebc:	df 91       	pop	r29
    1ebe:	cf 91       	pop	r28
    1ec0:	1f 91       	pop	r17
    1ec2:	0f 91       	pop	r16
    1ec4:	ff 90       	pop	r15
    1ec6:	ef 90       	pop	r14
    1ec8:	df 90       	pop	r13
    1eca:	cf 90       	pop	r12
    1ecc:	bf 90       	pop	r11
    1ece:	af 90       	pop	r10
    1ed0:	9f 90       	pop	r9
    1ed2:	8f 90       	pop	r8
    1ed4:	7f 90       	pop	r7
    1ed6:	6f 90       	pop	r6
    1ed8:	08 95       	ret

00001eda <glcd_fill_rect>:
		}
	}
}

void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    1eda:	2f 92       	push	r2
    1edc:	3f 92       	push	r3
    1ede:	4f 92       	push	r4
    1ee0:	5f 92       	push	r5
    1ee2:	6f 92       	push	r6
    1ee4:	7f 92       	push	r7
    1ee6:	8f 92       	push	r8
    1ee8:	9f 92       	push	r9
    1eea:	af 92       	push	r10
    1eec:	bf 92       	push	r11
    1eee:	cf 92       	push	r12
    1ef0:	df 92       	push	r13
    1ef2:	ef 92       	push	r14
    1ef4:	ff 92       	push	r15
    1ef6:	0f 93       	push	r16
    1ef8:	1f 93       	push	r17
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    1efe:	d8 2e       	mov	r13, r24
    1f00:	c6 2e       	mov	r12, r22
    1f02:	44 2e       	mov	r4, r20
    1f04:	32 2e       	mov	r3, r18
    1f06:	20 2e       	mov	r2, r16
	int16_t i;
	for (i=x; i<x+w; i++) {
    1f08:	00 e0       	ldi	r16, 0x00	; 0
    1f0a:	10 e0       	ldi	r17, 0x00	; 0
    1f0c:	a8 2e       	mov	r10, r24
    1f0e:	bb 24       	eor	r11, r11
    1f10:	35 01       	movw	r6, r10
    1f12:	64 0e       	add	r6, r20
    1f14:	71 1c       	adc	r7, r1
		int16_t j;
		for (j=y; j<y+h; j++) {
    1f16:	e6 2e       	mov	r14, r22
    1f18:	ff 24       	eor	r15, r15
    1f1a:	47 01       	movw	r8, r14
    1f1c:	82 0e       	add	r8, r18
    1f1e:	91 1c       	adc	r9, r1
    1f20:	14 c0       	rjmp	.+40     	; 0x1f4a <glcd_fill_rect+0x70>
    1f22:	c0 e0       	ldi	r28, 0x00	; 0
    1f24:	d0 e0       	ldi	r29, 0x00	; 0
			glcd_set_pixel(i, j, color);
    1f26:	5d 2c       	mov	r5, r13
    1f28:	50 0e       	add	r5, r16
    1f2a:	07 c0       	rjmp	.+14     	; 0x1f3a <glcd_fill_rect+0x60>
    1f2c:	6c 2d       	mov	r22, r12
    1f2e:	6c 0f       	add	r22, r28
    1f30:	85 2d       	mov	r24, r5
    1f32:	42 2d       	mov	r20, r2
    1f34:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
    1f38:	21 96       	adiw	r28, 0x01	; 1
void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
		int16_t j;
		for (j=y; j<y+h; j++) {
    1f3a:	ce 01       	movw	r24, r28
    1f3c:	8e 0d       	add	r24, r14
    1f3e:	9f 1d       	adc	r25, r15
    1f40:	88 15       	cp	r24, r8
    1f42:	99 05       	cpc	r25, r9
    1f44:	9c f3       	brlt	.-26     	; 0x1f2c <glcd_fill_rect+0x52>
    1f46:	0f 5f       	subi	r16, 0xFF	; 255
    1f48:	1f 4f       	sbci	r17, 0xFF	; 255
}

void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    1f4a:	c8 01       	movw	r24, r16
    1f4c:	8a 0d       	add	r24, r10
    1f4e:	9b 1d       	adc	r25, r11
    1f50:	86 15       	cp	r24, r6
    1f52:	97 05       	cpc	r25, r7
    1f54:	34 f3       	brlt	.-52     	; 0x1f22 <glcd_fill_rect+0x48>
		int16_t j;
		for (j=y; j<y+h; j++) {
			glcd_set_pixel(i, j, color);
		}
	}
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    1f56:	4d 2d       	mov	r20, r13
    1f58:	41 50       	subi	r20, 0x01	; 1
    1f5a:	44 0d       	add	r20, r4
    1f5c:	2c 2d       	mov	r18, r12
    1f5e:	21 50       	subi	r18, 0x01	; 1
    1f60:	23 0d       	add	r18, r3
    1f62:	8d 2d       	mov	r24, r13
    1f64:	6c 2d       	mov	r22, r12
    1f66:	0e 94 ff 06 	call	0xdfe	; 0xdfe <glcd_update_bbox>
}
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	1f 91       	pop	r17
    1f70:	0f 91       	pop	r16
    1f72:	ff 90       	pop	r15
    1f74:	ef 90       	pop	r14
    1f76:	df 90       	pop	r13
    1f78:	cf 90       	pop	r12
    1f7a:	bf 90       	pop	r11
    1f7c:	af 90       	pop	r10
    1f7e:	9f 90       	pop	r9
    1f80:	8f 90       	pop	r8
    1f82:	7f 90       	pop	r7
    1f84:	6f 90       	pop	r6
    1f86:	5f 90       	pop	r5
    1f88:	4f 90       	pop	r4
    1f8a:	3f 90       	pop	r3
    1f8c:	2f 90       	pop	r2
    1f8e:	08 95       	ret

00001f90 <glcd_draw_line>:
	glcd_update_bbox(x,y,x,y);
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
}

/* Bresenham's algorithm - based on PCD8544 library Limor Fried */
void glcd_draw_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
    1f90:	9f 92       	push	r9
    1f92:	af 92       	push	r10
    1f94:	bf 92       	push	r11
    1f96:	cf 92       	push	r12
    1f98:	df 92       	push	r13
    1f9a:	ef 92       	push	r14
    1f9c:	ff 92       	push	r15
    1f9e:	0f 93       	push	r16
    1fa0:	1f 93       	push	r17
    1fa2:	f8 2e       	mov	r15, r24
    1fa4:	e6 2e       	mov	r14, r22
    1fa6:	d4 2e       	mov	r13, r20
    1fa8:	12 2f       	mov	r17, r18
    1faa:	90 2e       	mov	r9, r16
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    1fac:	aa 24       	eor	r10, r10
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	26 1b       	sub	r18, r22
    1fb2:	31 09       	sbc	r19, r1
    1fb4:	37 ff       	sbrs	r19, 7
    1fb6:	03 c0       	rjmp	.+6      	; 0x1fbe <glcd_draw_line+0x2e>
    1fb8:	30 95       	com	r19
    1fba:	21 95       	neg	r18
    1fbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fbe:	8d 2d       	mov	r24, r13
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	8f 19       	sub	r24, r15
    1fc4:	91 09       	sbc	r25, r1
    1fc6:	97 ff       	sbrs	r25, 7
    1fc8:	03 c0       	rjmp	.+6      	; 0x1fd0 <glcd_draw_line+0x40>
    1fca:	90 95       	com	r25
    1fcc:	81 95       	neg	r24
    1fce:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd0:	82 17       	cp	r24, r18
    1fd2:	93 07       	cpc	r25, r19
    1fd4:	44 f4       	brge	.+16     	; 0x1fe6 <glcd_draw_line+0x56>
    1fd6:	aa 24       	eor	r10, r10
    1fd8:	a3 94       	inc	r10
	uint8_t dx, dy;
	int8_t err;
	int8_t ystep;
	
	if (steep) {
    1fda:	8e 2d       	mov	r24, r14
    1fdc:	ef 2c       	mov	r14, r15
    1fde:	f8 2e       	mov	r15, r24
    1fe0:	81 2f       	mov	r24, r17
    1fe2:	1d 2d       	mov	r17, r13
    1fe4:	d8 2e       	mov	r13, r24
		swap(x0, y0);
		swap(x1, y1);
	}
	
	if (x0 > x1) {
    1fe6:	df 14       	cp	r13, r15
    1fe8:	30 f4       	brcc	.+12     	; 0x1ff6 <glcd_draw_line+0x66>
    1fea:	8d 2d       	mov	r24, r13
    1fec:	df 2c       	mov	r13, r15
    1fee:	f8 2e       	mov	r15, r24
    1ff0:	81 2f       	mov	r24, r17
    1ff2:	1e 2d       	mov	r17, r14
    1ff4:	e8 2e       	mov	r14, r24
		swap(x0, x1);
		swap(y0, y1);
	}
	
	glcd_update_bbox( x0, y0, x1, y1 );
    1ff6:	8f 2d       	mov	r24, r15
    1ff8:	6e 2d       	mov	r22, r14
    1ffa:	4d 2d       	mov	r20, r13
    1ffc:	21 2f       	mov	r18, r17
    1ffe:	0e 94 ff 06 	call	0xdfe	; 0xdfe <glcd_update_bbox>

	dx = x1 - x0;
    2002:	cd 2c       	mov	r12, r13
    2004:	cf 18       	sub	r12, r15
	dy = abs(y1 - y0);
    2006:	81 2f       	mov	r24, r17
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	8e 19       	sub	r24, r14
    200c:	91 09       	sbc	r25, r1
    200e:	97 ff       	sbrs	r25, 7
    2010:	03 c0       	rjmp	.+6      	; 0x2018 <glcd_draw_line+0x88>
    2012:	90 95       	com	r25
    2014:	81 95       	neg	r24
    2016:	9f 4f       	sbci	r25, 0xFF	; 255
    2018:	b8 2e       	mov	r11, r24
	
	err = dx / 2;
	
	if (y0 < y1) {
    201a:	e1 16       	cp	r14, r17
    201c:	10 f0       	brcs	.+4      	; 0x2022 <glcd_draw_line+0x92>
    201e:	0f ef       	ldi	r16, 0xFF	; 255
    2020:	01 c0       	rjmp	.+2      	; 0x2024 <glcd_draw_line+0x94>
    2022:	01 e0       	ldi	r16, 0x01	; 1
	glcd_update_bbox( x0, y0, x1, y1 );

	dx = x1 - x0;
	dy = abs(y1 - y0);
	
	err = dx / 2;
    2024:	1c 2d       	mov	r17, r12
    2026:	16 95       	lsr	r17
    2028:	10 c0       	rjmp	.+32     	; 0x204a <glcd_draw_line+0xba>
	} else {
		ystep = -1;
	}
	
	for (; x0<=x1; x0++) {
		if (steep) {
    202a:	aa 20       	and	r10, r10
    202c:	19 f0       	breq	.+6      	; 0x2034 <glcd_draw_line+0xa4>
			glcd_set_pixel(y0, x0, color);
    202e:	8e 2d       	mov	r24, r14
    2030:	6f 2d       	mov	r22, r15
    2032:	02 c0       	rjmp	.+4      	; 0x2038 <glcd_draw_line+0xa8>
		} else {
			glcd_set_pixel(x0, y0, color);
    2034:	8f 2d       	mov	r24, r15
    2036:	6e 2d       	mov	r22, r14
    2038:	49 2d       	mov	r20, r9
    203a:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
		}
		err -= dy;
    203e:	1b 19       	sub	r17, r11
		if (err < 0) {
    2040:	17 ff       	sbrs	r17, 7
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <glcd_draw_line+0xb8>
			y0 += ystep;
    2044:	e0 0e       	add	r14, r16
			err += dx;
    2046:	1c 0d       	add	r17, r12
		ystep = 1;
	} else {
		ystep = -1;
	}
	
	for (; x0<=x1; x0++) {
    2048:	f3 94       	inc	r15
    204a:	df 14       	cp	r13, r15
    204c:	70 f7       	brcc	.-36     	; 0x202a <glcd_draw_line+0x9a>
		if (err < 0) {
			y0 += ystep;
			err += dx;
		}
	}
}
    204e:	1f 91       	pop	r17
    2050:	0f 91       	pop	r16
    2052:	ff 90       	pop	r15
    2054:	ef 90       	pop	r14
    2056:	df 90       	pop	r13
    2058:	cf 90       	pop	r12
    205a:	bf 90       	pop	r11
    205c:	af 90       	pop	r10
    205e:	9f 90       	pop	r9
    2060:	08 95       	ret

00002062 <glcd_draw_rect_shadow>:
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect_shadow(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    2062:	cf 92       	push	r12
    2064:	df 92       	push	r13
    2066:	ef 92       	push	r14
    2068:	ff 92       	push	r15
    206a:	0f 93       	push	r16
    206c:	1f 93       	push	r17
    206e:	e8 2e       	mov	r14, r24
    2070:	d6 2e       	mov	r13, r22
    2072:	14 2f       	mov	r17, r20
    2074:	f2 2e       	mov	r15, r18
	glcd_draw_rect(x, y, w, h, color);
    2076:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <glcd_draw_rect>
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
    207a:	1e 0d       	add	r17, r14
    207c:	fd 0c       	add	r15, r13
    207e:	8e 2d       	mov	r24, r14
    2080:	8f 5f       	subi	r24, 0xFF	; 255
    2082:	6f 2d       	mov	r22, r15
    2084:	41 2f       	mov	r20, r17
    2086:	2f 2d       	mov	r18, r15
    2088:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <glcd_draw_line>
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
    208c:	d3 94       	inc	r13
    208e:	81 2f       	mov	r24, r17
    2090:	6d 2d       	mov	r22, r13
    2092:	41 2f       	mov	r20, r17
    2094:	2f 2d       	mov	r18, r15
    2096:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <glcd_draw_line>
}
    209a:	1f 91       	pop	r17
    209c:	0f 91       	pop	r16
    209e:	ff 90       	pop	r15
    20a0:	ef 90       	pop	r14
    20a2:	df 90       	pop	r13
    20a4:	cf 90       	pop	r12
    20a6:	08 95       	ret

000020a8 <glcd_test_bitmap_128x64>:
}

#if defined (GLCD_UNIT_TEST_BITMAP_ENABLE)
void glcd_test_bitmap_128x64(void)
{
	glcd_draw_bitmap(bmp_oslogo);
    20a8:	88 e4       	ldi	r24, 0x48	; 72
    20aa:	92 e0       	ldi	r25, 0x02	; 2
    20ac:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <glcd_draw_bitmap>
	glcd_write();	
    20b0:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_write>
	while (1) {
		DEMO_RETURN();
    20b4:	80 91 70 01 	lds	r24, 0x0170
    20b8:	88 23       	and	r24, r24
    20ba:	e1 f3       	breq	.-8      	; 0x20b4 <glcd_test_bitmap_128x64+0xc>
    20bc:	10 92 70 01 	sts	0x0170, r1
	}
}
    20c0:	08 95       	ret

000020c2 <glcd_test_scrolling_graph>:
	}
	
}

void glcd_test_scrolling_graph(void)
{
    20c2:	0f 93       	push	r16
    20c4:	1f 93       	push	r17
    20c6:	cf 93       	push	r28
    20c8:	df 93       	push	r29
	glcd_clear();
    20ca:	0e 94 90 07 	call	0xf20	; 0xf20 <glcd_clear>
	glcd_write();
    20ce:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_write>
    20d2:	40 c0       	rjmp	.+128    	; 0x2154 <glcd_test_scrolling_graph+0x92>
	while(1) {
		uint16_t n;
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,n);
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	60 e0       	ldi	r22, 0x00	; 0
    20d8:	42 e3       	ldi	r20, 0x32	; 50
    20da:	22 e3       	ldi	r18, 0x32	; 50
    20dc:	0c 2f       	mov	r16, r28
    20de:	0e 94 72 08 	call	0x10e4	; 0x10e4 <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,0,50,30,n);
    20e2:	8c e3       	ldi	r24, 0x3C	; 60
    20e4:	60 e0       	ldi	r22, 0x00	; 0
    20e6:	42 e3       	ldi	r20, 0x32	; 50
    20e8:	2e e1       	ldi	r18, 0x1E	; 30
    20ea:	0e 94 72 08 	call	0x10e4	; 0x10e4 <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,35,60,20,n);
    20ee:	8c e3       	ldi	r24, 0x3C	; 60
    20f0:	63 e2       	ldi	r22, 0x23	; 35
    20f2:	4c e3       	ldi	r20, 0x3C	; 60
    20f4:	24 e1       	ldi	r18, 0x14	; 20
    20f6:	0e 94 72 08 	call	0x10e4	; 0x10e4 <glcd_scrolling_bar_graph>
			DEMO_RETURN();
    20fa:	80 91 70 01 	lds	r24, 0x0170
    20fe:	88 23       	and	r24, r24
    2100:	f9 f4       	brne	.+62     	; 0x2140 <glcd_test_scrolling_graph+0x7e>
{
	glcd_clear();
	glcd_write();
	while(1) {
		uint16_t n;
		for (n=0; n<=255; n += 20) {
    2102:	64 96       	adiw	r28, 0x14	; 20
    2104:	cf 3f       	cpi	r28, 0xFF	; 255
    2106:	d1 05       	cpc	r29, r1
    2108:	29 f3       	breq	.-54     	; 0x20d4 <glcd_test_scrolling_graph+0x12>
    210a:	20 f3       	brcs	.-56     	; 0x20d4 <glcd_test_scrolling_graph+0x12>
    210c:	10 e0       	ldi	r17, 0x00	; 0
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
		}
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,255-n);
    210e:	01 2f       	mov	r16, r17
    2110:	00 95       	com	r16
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	60 e0       	ldi	r22, 0x00	; 0
    2116:	42 e3       	ldi	r20, 0x32	; 50
    2118:	22 e3       	ldi	r18, 0x32	; 50
    211a:	0e 94 72 08 	call	0x10e4	; 0x10e4 <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,0,50,30,n);
    211e:	8c e3       	ldi	r24, 0x3C	; 60
    2120:	60 e0       	ldi	r22, 0x00	; 0
    2122:	42 e3       	ldi	r20, 0x32	; 50
    2124:	2e e1       	ldi	r18, 0x1E	; 30
    2126:	01 2f       	mov	r16, r17
    2128:	0e 94 72 08 	call	0x10e4	; 0x10e4 <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,35,60,20,n);
    212c:	8c e3       	ldi	r24, 0x3C	; 60
    212e:	63 e2       	ldi	r22, 0x23	; 35
    2130:	4c e3       	ldi	r20, 0x3C	; 60
    2132:	24 e1       	ldi	r18, 0x14	; 20
    2134:	0e 94 72 08 	call	0x10e4	; 0x10e4 <glcd_scrolling_bar_graph>
			DEMO_RETURN();
    2138:	80 91 70 01 	lds	r24, 0x0170
    213c:	88 23       	and	r24, r24
    213e:	39 f0       	breq	.+14     	; 0x214e <glcd_test_scrolling_graph+0x8c>
    2140:	10 92 70 01 	sts	0x0170, r1
		}
	}	
}
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	1f 91       	pop	r17
    214a:	0f 91       	pop	r16
    214c:	08 95       	ret
		}
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,255-n);
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
    214e:	1c 5e       	subi	r17, 0xEC	; 236
			glcd_scrolling_bar_graph(0,0,50,50,n);
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
		}
		for (n=0; n<=255; n += 20) {
    2150:	14 30       	cpi	r17, 0x04	; 4
    2152:	e9 f6       	brne	.-70     	; 0x210e <glcd_test_scrolling_graph+0x4c>
    2154:	c0 e0       	ldi	r28, 0x00	; 0
    2156:	d0 e0       	ldi	r29, 0x00	; 0
    2158:	d5 cf       	rjmp	.-86     	; 0x2104 <glcd_test_scrolling_graph+0x42>

0000215a <glcd_test_hello_world>:
	}

}

void glcd_test_hello_world(void)
{
    215a:	0f 93       	push	r16
	glcd_tiny_set_font(Font5x7,5,7,32,127);
    215c:	80 eb       	ldi	r24, 0xB0	; 176
    215e:	97 e0       	ldi	r25, 0x07	; 7
    2160:	65 e0       	ldi	r22, 0x05	; 5
    2162:	47 e0       	ldi	r20, 0x07	; 7
    2164:	20 e2       	ldi	r18, 0x20	; 32
    2166:	0f e7       	ldi	r16, 0x7F	; 127
    2168:	0e 94 70 13 	call	0x26e0	; 0x26e0 <glcd_tiny_set_font>
	glcd_clear_buffer();
    216c:	0e 94 7d 07 	call	0xefa	; 0xefa <glcd_clear_buffer>
	glcd_tiny_draw_string(0,0,"Hello World!");
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	60 e0       	ldi	r22, 0x00	; 0
    2174:	43 e0       	ldi	r20, 0x03	; 3
    2176:	51 e0       	ldi	r21, 0x01	; 1
    2178:	0e 94 a6 14 	call	0x294c	; 0x294c <glcd_tiny_draw_string>
	glcd_write();
    217c:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_write>
	while(1) {
		DEMO_RETURN();
    2180:	80 91 70 01 	lds	r24, 0x0170
    2184:	88 23       	and	r24, r24
    2186:	e1 f3       	breq	.-8      	; 0x2180 <glcd_test_hello_world+0x26>
    2188:	10 92 70 01 	sts	0x0170, r1
	}
}
    218c:	0f 91       	pop	r16
    218e:	08 95       	ret

00002190 <glcd_test_rectangles>:

void glcd_test_rectangles(void)
{
    2190:	cf 92       	push	r12
    2192:	ef 92       	push	r14
    2194:	0f 93       	push	r16
    2196:	cf 93       	push	r28
    2198:	df 93       	push	r29
	glcd_tiny_set_font(Font5x7,5,7,32,127);
    219a:	80 eb       	ldi	r24, 0xB0	; 176
    219c:	97 e0       	ldi	r25, 0x07	; 7
    219e:	65 e0       	ldi	r22, 0x05	; 5
    21a0:	47 e0       	ldi	r20, 0x07	; 7
    21a2:	20 e2       	ldi	r18, 0x20	; 32
    21a4:	0f e7       	ldi	r16, 0x7F	; 127
    21a6:	0e 94 70 13 	call	0x26e0	; 0x26e0 <glcd_tiny_set_font>
	glcd_clear_buffer();
    21aa:	0e 94 7d 07 	call	0xefa	; 0xefa <glcd_clear_buffer>
	glcd_tiny_draw_string(0,0,"RECTANGLE DEMO");
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	40 e1       	ldi	r20, 0x10	; 16
    21b4:	51 e0       	ldi	r21, 0x01	; 1
    21b6:	0e 94 a6 14 	call	0x294c	; 0x294c <glcd_tiny_draw_string>
	glcd_write();
    21ba:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_write>
    21be:	80 ed       	ldi	r24, 0xD0	; 208
    21c0:	97 e0       	ldi	r25, 0x07	; 7
    21c2:	20 e9       	ldi	r18, 0x90	; 144
    21c4:	31 e0       	ldi	r19, 0x01	; 1
    21c6:	f9 01       	movw	r30, r18
    21c8:	31 97       	sbiw	r30, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <glcd_test_rectangles+0x38>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ce:	d9 f7       	brne	.-10     	; 0x21c6 <glcd_test_rectangles+0x36>
    21d0:	c0 e9       	ldi	r28, 0x90	; 144
    21d2:	d1 e0       	ldi	r29, 0x01	; 1
	delay_ms(200);
	
	while(1) {
		
		glcd_clear();
    21d4:	0e 94 90 07 	call	0xf20	; 0xf20 <glcd_clear>
		glcd_draw_rect(0,0,100,50,BLACK);
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	60 e0       	ldi	r22, 0x00	; 0
    21dc:	44 e6       	ldi	r20, 0x64	; 100
    21de:	22 e3       	ldi	r18, 0x32	; 50
    21e0:	01 e0       	ldi	r16, 0x01	; 1
    21e2:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <glcd_draw_rect>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect");
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	69 e0       	ldi	r22, 0x09	; 9
    21ea:	4f e1       	ldi	r20, 0x1F	; 31
    21ec:	51 e0       	ldi	r21, 0x01	; 1
    21ee:	0e 94 a6 14 	call	0x294c	; 0x294c <glcd_tiny_draw_string>
		glcd_write();
    21f2:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_write>
    21f6:	88 e8       	ldi	r24, 0x88	; 136
    21f8:	93 e1       	ldi	r25, 0x13	; 19
    21fa:	fe 01       	movw	r30, r28
    21fc:	31 97       	sbiw	r30, 0x01	; 1
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <glcd_test_rectangles+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2200:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2202:	d9 f7       	brne	.-10     	; 0x21fa <glcd_test_rectangles+0x6a>
		delay_ms(500);
		DEMO_RETURN();
    2204:	80 91 70 01 	lds	r24, 0x0170
    2208:	88 23       	and	r24, r24
    220a:	09 f0       	breq	.+2      	; 0x220e <glcd_test_rectangles+0x7e>
    220c:	85 c0       	rjmp	.+266    	; 0x2318 <glcd_test_rectangles+0x188>
		
		glcd_clear();
    220e:	0e 94 90 07 	call	0xf20	; 0xf20 <glcd_clear>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_thick");
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	69 e0       	ldi	r22, 0x09	; 9
    2216:	4e e2       	ldi	r20, 0x2E	; 46
    2218:	51 e0       	ldi	r21, 0x01	; 1
    221a:	0e 94 a6 14 	call	0x294c	; 0x294c <glcd_tiny_draw_string>
		glcd_write();
    221e:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_write>

		glcd_draw_rect_thick(5,5,80,30,3,6,BLACK);
    2222:	85 e0       	ldi	r24, 0x05	; 5
    2224:	65 e0       	ldi	r22, 0x05	; 5
    2226:	40 e5       	ldi	r20, 0x50	; 80
    2228:	2e e1       	ldi	r18, 0x1E	; 30
    222a:	03 e0       	ldi	r16, 0x03	; 3
    222c:	56 e0       	ldi	r21, 0x06	; 6
    222e:	e5 2e       	mov	r14, r21
    2230:	cc 24       	eor	r12, r12
    2232:	c3 94       	inc	r12
    2234:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <glcd_draw_rect_thick>
		glcd_write();
    2238:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_write>
    223c:	88 e8       	ldi	r24, 0x88	; 136
    223e:	93 e1       	ldi	r25, 0x13	; 19
    2240:	fe 01       	movw	r30, r28
    2242:	31 97       	sbiw	r30, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <glcd_test_rectangles+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2246:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2248:	d9 f7       	brne	.-10     	; 0x2240 <glcd_test_rectangles+0xb0>
		delay_ms(500);
		DEMO_RETURN();
    224a:	80 91 70 01 	lds	r24, 0x0170
    224e:	88 23       	and	r24, r24
    2250:	09 f0       	breq	.+2      	; 0x2254 <glcd_test_rectangles+0xc4>
    2252:	62 c0       	rjmp	.+196    	; 0x2318 <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_thick(0,0,20,20,2,2,BLACK);
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	60 e0       	ldi	r22, 0x00	; 0
    2258:	44 e1       	ldi	r20, 0x14	; 20
    225a:	24 e1       	ldi	r18, 0x14	; 20
    225c:	02 e0       	ldi	r16, 0x02	; 2
    225e:	32 e0       	ldi	r19, 0x02	; 2
    2260:	e3 2e       	mov	r14, r19
    2262:	cc 24       	eor	r12, r12
    2264:	c3 94       	inc	r12
    2266:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <glcd_draw_rect_thick>
		glcd_write();
    226a:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_write>
    226e:	88 e8       	ldi	r24, 0x88	; 136
    2270:	93 e1       	ldi	r25, 0x13	; 19
    2272:	fe 01       	movw	r30, r28
    2274:	31 97       	sbiw	r30, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <glcd_test_rectangles+0xe4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2278:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227a:	d9 f7       	brne	.-10     	; 0x2272 <glcd_test_rectangles+0xe2>
		delay_ms(500);
		DEMO_RETURN();
    227c:	80 91 70 01 	lds	r24, 0x0170
    2280:	88 23       	and	r24, r24
    2282:	09 f0       	breq	.+2      	; 0x2286 <glcd_test_rectangles+0xf6>
    2284:	49 c0       	rjmp	.+146    	; 0x2318 <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_thick(100,10,20,20,5,5,BLACK);
    2286:	84 e6       	ldi	r24, 0x64	; 100
    2288:	6a e0       	ldi	r22, 0x0A	; 10
    228a:	44 e1       	ldi	r20, 0x14	; 20
    228c:	24 e1       	ldi	r18, 0x14	; 20
    228e:	05 e0       	ldi	r16, 0x05	; 5
    2290:	95 e0       	ldi	r25, 0x05	; 5
    2292:	e9 2e       	mov	r14, r25
    2294:	cc 24       	eor	r12, r12
    2296:	c3 94       	inc	r12
    2298:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <glcd_draw_rect_thick>
		glcd_write();
    229c:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_write>
    22a0:	88 e8       	ldi	r24, 0x88	; 136
    22a2:	93 e1       	ldi	r25, 0x13	; 19
    22a4:	fe 01       	movw	r30, r28
    22a6:	31 97       	sbiw	r30, 0x01	; 1
    22a8:	f1 f7       	brne	.-4      	; 0x22a6 <glcd_test_rectangles+0x116>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ac:	d9 f7       	brne	.-10     	; 0x22a4 <glcd_test_rectangles+0x114>
		delay_ms(500);
		DEMO_RETURN();
    22ae:	80 91 70 01 	lds	r24, 0x0170
    22b2:	88 23       	and	r24, r24
    22b4:	89 f5       	brne	.+98     	; 0x2318 <glcd_test_rectangles+0x188>

		glcd_clear();
    22b6:	0e 94 90 07 	call	0xf20	; 0xf20 <glcd_clear>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_shadow");
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	69 e0       	ldi	r22, 0x09	; 9
    22be:	43 e4       	ldi	r20, 0x43	; 67
    22c0:	51 e0       	ldi	r21, 0x01	; 1
    22c2:	0e 94 a6 14 	call	0x294c	; 0x294c <glcd_tiny_draw_string>
		glcd_draw_rect_shadow(0,0,45,30,BLACK);
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	60 e0       	ldi	r22, 0x00	; 0
    22ca:	4d e2       	ldi	r20, 0x2D	; 45
    22cc:	2e e1       	ldi	r18, 0x1E	; 30
    22ce:	01 e0       	ldi	r16, 0x01	; 1
    22d0:	0e 94 31 10 	call	0x2062	; 0x2062 <glcd_draw_rect_shadow>
		glcd_write();
    22d4:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_write>
    22d8:	88 e8       	ldi	r24, 0x88	; 136
    22da:	93 e1       	ldi	r25, 0x13	; 19
    22dc:	fe 01       	movw	r30, r28
    22de:	31 97       	sbiw	r30, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <glcd_test_rectangles+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e4:	d9 f7       	brne	.-10     	; 0x22dc <glcd_test_rectangles+0x14c>
		delay_ms(500);
		DEMO_RETURN();
    22e6:	80 91 70 01 	lds	r24, 0x0170
    22ea:	88 23       	and	r24, r24
    22ec:	a9 f4       	brne	.+42     	; 0x2318 <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_shadow(95,5,30,30,BLACK);
    22ee:	8f e5       	ldi	r24, 0x5F	; 95
    22f0:	65 e0       	ldi	r22, 0x05	; 5
    22f2:	4e e1       	ldi	r20, 0x1E	; 30
    22f4:	2e e1       	ldi	r18, 0x1E	; 30
    22f6:	01 e0       	ldi	r16, 0x01	; 1
    22f8:	0e 94 31 10 	call	0x2062	; 0x2062 <glcd_draw_rect_shadow>
		glcd_write();
    22fc:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_write>
    2300:	88 e8       	ldi	r24, 0x88	; 136
    2302:	93 e1       	ldi	r25, 0x13	; 19
    2304:	fe 01       	movw	r30, r28
    2306:	31 97       	sbiw	r30, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <glcd_test_rectangles+0x176>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230c:	d9 f7       	brne	.-10     	; 0x2304 <glcd_test_rectangles+0x174>
		delay_ms(500);
		DEMO_RETURN();
    230e:	80 91 70 01 	lds	r24, 0x0170
    2312:	88 23       	and	r24, r24
    2314:	09 f4       	brne	.+2      	; 0x2318 <glcd_test_rectangles+0x188>
    2316:	5e cf       	rjmp	.-324    	; 0x21d4 <glcd_test_rectangles+0x44>
    2318:	10 92 70 01 	sts	0x0170, r1
		
	}
	
}
    231c:	df 91       	pop	r29
    231e:	cf 91       	pop	r28
    2320:	0f 91       	pop	r16
    2322:	ef 90       	pop	r14
    2324:	cf 90       	pop	r12
    2326:	08 95       	ret

00002328 <glcd_test_tiny_text>:
	}

}

void glcd_test_tiny_text(void)
{
    2328:	af 92       	push	r10
    232a:	bf 92       	push	r11
    232c:	cf 92       	push	r12
    232e:	df 92       	push	r13
    2330:	ef 92       	push	r14
    2332:	ff 92       	push	r15
    2334:	0f 93       	push	r16
    2336:	df 93       	push	r29
    2338:	cf 93       	push	r28
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    233e:	2f 97       	sbiw	r28, 0x0f	; 15
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
	char string[GLCD_LCD_WIDTH / 6 + 1];

	uint8_t c = 32;
	uint8_t len = GLCD_LCD_WIDTH / 6;
	
	GLCD_TEXT_INIT();
    234a:	80 eb       	ldi	r24, 0xB0	; 176
    234c:	97 e0       	ldi	r25, 0x07	; 7
    234e:	65 e0       	ldi	r22, 0x05	; 5
    2350:	47 e0       	ldi	r20, 0x07	; 7
    2352:	20 e2       	ldi	r18, 0x20	; 32
    2354:	0f e7       	ldi	r16, 0x7F	; 127
    2356:	0e 94 70 13 	call	0x26e0	; 0x26e0 <glcd_tiny_set_font>
    235a:	00 e2       	ldi	r16, 0x20	; 32
    235c:	7e 01       	movw	r14, r28
    235e:	08 94       	sec
    2360:	e1 1c       	adc	r14, r1
    2362:	f1 1c       	adc	r15, r1
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
    2364:	7f e0       	ldi	r23, 0x0F	; 15
    2366:	a7 2e       	mov	r10, r23
    2368:	b1 2c       	mov	r11, r1
    236a:	ac 0e       	add	r10, r28
    236c:	bd 1e       	adc	r11, r29
    236e:	60 e9       	ldi	r22, 0x90	; 144
    2370:	c6 2e       	mov	r12, r22
    2372:	61 e0       	ldi	r22, 0x01	; 1
    2374:	d6 2e       	mov	r13, r22
	char string[GLCD_LCD_WIDTH / 6 + 1];

	uint8_t c = 32;
	uint8_t len = GLCD_LCD_WIDTH / 6;
	
	GLCD_TEXT_INIT();
    2376:	f7 01       	movw	r30, r14
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
			string[i] = c;
    2378:	00 83       	st	Z, r16
			c++;
    237a:	0f 5f       	subi	r16, 0xFF	; 255
			if (c > 127) {
    237c:	07 fd       	sbrc	r16, 7
    237e:	00 e2       	ldi	r16, 0x20	; 32
    2380:	31 96       	adiw	r30, 0x01	; 1
	GLCD_TEXT_INIT();
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
    2382:	ea 15       	cp	r30, r10
    2384:	fb 05       	cpc	r31, r11
    2386:	c1 f7       	brne	.-16     	; 0x2378 <glcd_test_tiny_text+0x50>
				c = 32;
			}
		}

		// write null terminator
		string[len] = '\0';
    2388:	1f 86       	std	Y+15, r1	; 0x0f

		GLCD_WRITE(string);
    238a:	c7 01       	movw	r24, r14
    238c:	0e 94 f6 14 	call	0x29ec	; 0x29ec <glcd_tiny_draw_string_ammend>
		
		DEMO_RETURN();
    2390:	80 91 70 01 	lds	r24, 0x0170
    2394:	88 23       	and	r24, r24
    2396:	91 f0       	breq	.+36     	; 0x23bc <glcd_test_tiny_text+0x94>
    2398:	10 92 70 01 	sts	0x0170, r1
		
		delay_ms(1000);
	}

}
    239c:	2f 96       	adiw	r28, 0x0f	; 15
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	0f 91       	pop	r16
    23ae:	ff 90       	pop	r15
    23b0:	ef 90       	pop	r14
    23b2:	df 90       	pop	r13
    23b4:	cf 90       	pop	r12
    23b6:	bf 90       	pop	r11
    23b8:	af 90       	pop	r10
    23ba:	08 95       	ret
		// write null terminator
		string[len] = '\0';

		GLCD_WRITE(string);
		
		DEMO_RETURN();
    23bc:	80 e1       	ldi	r24, 0x10	; 16
    23be:	97 e2       	ldi	r25, 0x27	; 39
    23c0:	f6 01       	movw	r30, r12
    23c2:	31 97       	sbiw	r30, 0x01	; 1
    23c4:	f1 f7       	brne	.-4      	; 0x23c2 <glcd_test_tiny_text+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c8:	d9 f7       	brne	.-10     	; 0x23c0 <glcd_test_tiny_text+0x98>
    23ca:	d5 cf       	rjmp	.-86     	; 0x2376 <glcd_test_tiny_text+0x4e>

000023cc <glcd_test_text_up_down>:
		DEMO_RETURN();
	}
}

void glcd_test_text_up_down(void)
{
    23cc:	0f 93       	push	r16
    23ce:	1f 93       	push	r17
    23d0:	cf 93       	push	r28
    23d2:	df 93       	push	r29

	uint8_t y;
	uint8_t max_y;
	
	//glcd_set_font(Liberation_Sans11x14_Numbers,11,14,46,57);
	glcd_set_font(Liberation_Sans15x21_Numbers,15,21,46,57);
    23d4:	80 e9       	ldi	r24, 0x90	; 144
    23d6:	99 e0       	ldi	r25, 0x09	; 9
    23d8:	6f e0       	ldi	r22, 0x0F	; 15
    23da:	45 e1       	ldi	r20, 0x15	; 21
    23dc:	2e e2       	ldi	r18, 0x2E	; 46
    23de:	09 e3       	ldi	r16, 0x39	; 57
    23e0:	0e 94 00 0a 	call	0x1400	; 0x1400 <glcd_set_font>
	//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
	//glcd_set_font(Liberation_Sans17x17_Alpha,17,17,46,90);

	max_y = GLCD_LCD_HEIGHT - font_current.height - 2; // max y start position for draw_string
    23e4:	1e e2       	ldi	r17, 0x2E	; 46
    23e6:	80 91 74 03 	lds	r24, 0x0374
    23ea:	18 1b       	sub	r17, r24
    23ec:	00 e0       	ldi	r16, 0x00	; 0
    23ee:	c0 e9       	ldi	r28, 0x90	; 144
    23f0:	d1 e0       	ldi	r29, 0x01	; 1
    23f2:	16 c0       	rjmp	.+44     	; 0x2420 <glcd_test_text_up_down+0x54>

	while(1) {
		// move top to bottom
		for (y=0; y<max_y; y++) {
			DEMO_RETURN();
    23f4:	80 91 70 01 	lds	r24, 0x0170
    23f8:	88 23       	and	r24, r24
    23fa:	d1 f4       	brne	.+52     	; 0x2430 <glcd_test_text_up_down+0x64>
			glcd_clear_buffer();
    23fc:	0e 94 7d 07 	call	0xefa	; 0xefa <glcd_clear_buffer>
			glcd_draw_string_xy(0,y,"123");
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	60 2f       	mov	r22, r16
    2404:	49 e5       	ldi	r20, 0x59	; 89
    2406:	51 e0       	ldi	r21, 0x01	; 1
    2408:	0e 94 2e 0c 	call	0x185c	; 0x185c <glcd_draw_string_xy>
			glcd_write();
    240c:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_write>
    2410:	80 e2       	ldi	r24, 0x20	; 32
    2412:	93 e0       	ldi	r25, 0x03	; 3
    2414:	fe 01       	movw	r30, r28
    2416:	31 97       	sbiw	r30, 0x01	; 1
    2418:	f1 f7       	brne	.-4      	; 0x2416 <glcd_test_text_up_down+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241c:	d9 f7       	brne	.-10     	; 0x2414 <glcd_test_text_up_down+0x48>

	max_y = GLCD_LCD_HEIGHT - font_current.height - 2; // max y start position for draw_string

	while(1) {
		// move top to bottom
		for (y=0; y<max_y; y++) {
    241e:	0f 5f       	subi	r16, 0xFF	; 255
    2420:	01 17       	cp	r16, r17
    2422:	40 f3       	brcs	.-48     	; 0x23f4 <glcd_test_text_up_down+0x28>
    2424:	01 2f       	mov	r16, r17
    2426:	1d c0       	rjmp	.+58     	; 0x2462 <glcd_test_text_up_down+0x96>
			delay_ms(80);
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
			DEMO_RETURN();
    2428:	80 91 70 01 	lds	r24, 0x0170
    242c:	88 23       	and	r24, r24
    242e:	39 f0       	breq	.+14     	; 0x243e <glcd_test_text_up_down+0x72>
    2430:	10 92 70 01 	sts	0x0170, r1
			delay_ms(80);
		}
		
	}

}
    2434:	df 91       	pop	r29
    2436:	cf 91       	pop	r28
    2438:	1f 91       	pop	r17
    243a:	0f 91       	pop	r16
    243c:	08 95       	ret
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
			DEMO_RETURN();
			glcd_clear_buffer();
    243e:	0e 94 7d 07 	call	0xefa	; 0xefa <glcd_clear_buffer>
			glcd_draw_string_xy(0,y,"456");
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	60 2f       	mov	r22, r16
    2446:	4d e5       	ldi	r20, 0x5D	; 93
    2448:	51 e0       	ldi	r21, 0x01	; 1
    244a:	0e 94 2e 0c 	call	0x185c	; 0x185c <glcd_draw_string_xy>
			glcd_write();
    244e:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_write>
    2452:	80 e2       	ldi	r24, 0x20	; 32
    2454:	93 e0       	ldi	r25, 0x03	; 3
    2456:	fe 01       	movw	r30, r28
    2458:	31 97       	sbiw	r30, 0x01	; 1
    245a:	f1 f7       	brne	.-4      	; 0x2458 <glcd_test_text_up_down+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245e:	d9 f7       	brne	.-10     	; 0x2456 <glcd_test_text_up_down+0x8a>
			glcd_write();
			delay_ms(80);
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
    2460:	01 50       	subi	r16, 0x01	; 1
    2462:	00 23       	and	r16, r16
    2464:	09 f7       	brne	.-62     	; 0x2428 <glcd_test_text_up_down+0x5c>
    2466:	dc cf       	rjmp	.-72     	; 0x2420 <glcd_test_text_up_down+0x54>

00002468 <glcd_test_glcdutils>:
}

/* Test glcd-utils font table type, increments and display a 16-bit number over and over */
#include "fonts/Earthbound_12x19_48to57.h"
void glcd_test_glcdutils(void)
{
    2468:	8f 92       	push	r8
    246a:	9f 92       	push	r9
    246c:	af 92       	push	r10
    246e:	bf 92       	push	r11
    2470:	cf 92       	push	r12
    2472:	df 92       	push	r13
    2474:	ef 92       	push	r14
    2476:	0f 93       	push	r16
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
    2480:	28 97       	sbiw	r28, 0x08	; 8
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	de bf       	out	0x3e, r29	; 62
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	cd bf       	out	0x3d, r28	; 61
	uint16_t count = 0;
	char string[8] = "";
    248c:	19 82       	std	Y+1, r1	; 0x01
    248e:	1a 82       	std	Y+2, r1	; 0x02
    2490:	1b 82       	std	Y+3, r1	; 0x03
    2492:	1c 82       	std	Y+4, r1	; 0x04
    2494:	1d 82       	std	Y+5, r1	; 0x05
    2496:	1e 82       	std	Y+6, r1	; 0x06
    2498:	1f 82       	std	Y+7, r1	; 0x07
    249a:	18 86       	std	Y+8, r1	; 0x08
    249c:	cc 24       	eor	r12, r12
    249e:	dd 24       	eor	r13, r13
		glcd_clear_buffer();

		/* Set the font */
		glcd_font(font_Earthbound_12x19_48to57,12,19,48,57,GLCD_UTILS);

		sprintf(string,"%d",count);
    24a0:	5e 01       	movw	r10, r28
    24a2:	08 94       	sec
    24a4:	a1 1c       	adc	r10, r1
    24a6:	b1 1c       	adc	r11, r1
    24a8:	f1 e6       	ldi	r31, 0x61	; 97
    24aa:	8f 2e       	mov	r8, r31
    24ac:	f1 e0       	ldi	r31, 0x01	; 1
    24ae:	9f 2e       	mov	r9, r31
void glcd_test_glcdutils(void)
{
	uint16_t count = 0;
	char string[8] = "";
	while(1) {
		glcd_clear_buffer();
    24b0:	0e 94 7d 07 	call	0xefa	; 0xefa <glcd_clear_buffer>

		/* Set the font */
		glcd_font(font_Earthbound_12x19_48to57,12,19,48,57,GLCD_UTILS);
    24b4:	88 e4       	ldi	r24, 0x48	; 72
    24b6:	96 e0       	ldi	r25, 0x06	; 6
    24b8:	6c e0       	ldi	r22, 0x0C	; 12
    24ba:	43 e1       	ldi	r20, 0x13	; 19
    24bc:	20 e3       	ldi	r18, 0x30	; 48
    24be:	09 e3       	ldi	r16, 0x39	; 57
    24c0:	e2 e0       	ldi	r30, 0x02	; 2
    24c2:	ee 2e       	mov	r14, r30
    24c4:	0e 94 12 0a 	call	0x1424	; 0x1424 <glcd_font>

		sprintf(string,"%d",count);
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <glcd_test_glcdutils+0x62>
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <glcd_test_glcdutils+0x64>
    24cc:	00 d0       	rcall	.+0      	; 0x24ce <glcd_test_glcdutils+0x66>
    24ce:	ed b7       	in	r30, 0x3d	; 61
    24d0:	fe b7       	in	r31, 0x3e	; 62
    24d2:	31 96       	adiw	r30, 0x01	; 1
    24d4:	ad b7       	in	r26, 0x3d	; 61
    24d6:	be b7       	in	r27, 0x3e	; 62
    24d8:	12 96       	adiw	r26, 0x02	; 2
    24da:	bc 92       	st	X, r11
    24dc:	ae 92       	st	-X, r10
    24de:	11 97       	sbiw	r26, 0x01	; 1
    24e0:	93 82       	std	Z+3, r9	; 0x03
    24e2:	82 82       	std	Z+2, r8	; 0x02
    24e4:	d5 82       	std	Z+5, r13	; 0x05
    24e6:	c4 82       	std	Z+4, r12	; 0x04
    24e8:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <sprintf>
		glcd_draw_string_xy(0,0,string);
    24ec:	8d b7       	in	r24, 0x3d	; 61
    24ee:	9e b7       	in	r25, 0x3e	; 62
    24f0:	06 96       	adiw	r24, 0x06	; 6
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	9e bf       	out	0x3e, r25	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	8d bf       	out	0x3d, r24	; 61
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	60 e0       	ldi	r22, 0x00	; 0
    2500:	a5 01       	movw	r20, r10
    2502:	0e 94 2e 0c 	call	0x185c	; 0x185c <glcd_draw_string_xy>
		glcd_write();
    2506:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_write>
		
		count += 1;
    250a:	08 94       	sec
    250c:	c1 1c       	adc	r12, r1
    250e:	d1 1c       	adc	r13, r1

		DEMO_RETURN();
    2510:	80 91 70 01 	lds	r24, 0x0170
    2514:	88 23       	and	r24, r24
    2516:	61 f2       	breq	.-104    	; 0x24b0 <glcd_test_glcdutils+0x48>
    2518:	10 92 70 01 	sts	0x0170, r1
	}
}
    251c:	28 96       	adiw	r28, 0x08	; 8
    251e:	0f b6       	in	r0, 0x3f	; 63
    2520:	f8 94       	cli
    2522:	de bf       	out	0x3e, r29	; 62
    2524:	0f be       	out	0x3f, r0	; 63
    2526:	cd bf       	out	0x3d, r28	; 61
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	0f 91       	pop	r16
    252e:	ef 90       	pop	r14
    2530:	df 90       	pop	r13
    2532:	cf 90       	pop	r12
    2534:	bf 90       	pop	r11
    2536:	af 90       	pop	r10
    2538:	9f 90       	pop	r9
    253a:	8f 90       	pop	r8
    253c:	08 95       	ret

0000253e <glcd_test_counter_and_graph>:
		DEMO_RETURN();
	}
}

void glcd_test_counter_and_graph(void)
{
    253e:	8f 92       	push	r8
    2540:	9f 92       	push	r9
    2542:	af 92       	push	r10
    2544:	bf 92       	push	r11
    2546:	df 92       	push	r13
    2548:	ef 92       	push	r14
    254a:	ff 92       	push	r15
    254c:	0f 93       	push	r16
    254e:	1f 93       	push	r17
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	28 97       	sbiw	r28, 0x08	; 8
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	f8 94       	cli
    255e:	de bf       	out	0x3e, r29	; 62
    2560:	0f be       	out	0x3f, r0	; 63
    2562:	cd bf       	out	0x3d, r28	; 61
	uint8_t count = 0;
	char string[8] = "";
    2564:	19 82       	std	Y+1, r1	; 0x01
    2566:	1a 82       	std	Y+2, r1	; 0x02
    2568:	1b 82       	std	Y+3, r1	; 0x03
    256a:	1c 82       	std	Y+4, r1	; 0x04
    256c:	1d 82       	std	Y+5, r1	; 0x05
    256e:	1e 82       	std	Y+6, r1	; 0x06
    2570:	1f 82       	std	Y+7, r1	; 0x07
    2572:	18 86       	std	Y+8, r1	; 0x08
    2574:	dd 24       	eor	r13, r13
		//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
		//glcd_set_font(Bebas_Neue20x36_Bold_Numbers,20,36,46,57);
		//glcd_set_font(Bebas_Neue18x36_Numbers,18,36,46,57);
		//glcd_set_font(HelveticaNeueLT_Com_57_Cn23x35_Numbers,23,35,46,57); // commercial font - not for public distribution

		sprintf(string,"%d",count);
    2576:	5e 01       	movw	r10, r28
    2578:	08 94       	sec
    257a:	a1 1c       	adc	r10, r1
    257c:	b1 1c       	adc	r11, r1
    257e:	11 e6       	ldi	r17, 0x61	; 97
    2580:	81 2e       	mov	r8, r17
    2582:	11 e0       	ldi	r17, 0x01	; 1
    2584:	91 2e       	mov	r9, r17
void glcd_test_counter_and_graph(void)
{
	uint8_t count = 0;
	char string[8] = "";
	while(1) {
		glcd_clear_buffer();
    2586:	0e 94 7d 07 	call	0xefa	; 0xefa <glcd_clear_buffer>

		//glcd_tiny_set_font(Font5x7,5,7,32,127);
		//glcd_draw_string_xy(0,40,(char *)utoa(count,string,10));

		glcd_set_font(Liberation_Sans15x21_Numbers,15,21,46,57);
    258a:	80 e9       	ldi	r24, 0x90	; 144
    258c:	99 e0       	ldi	r25, 0x09	; 9
    258e:	6f e0       	ldi	r22, 0x0F	; 15
    2590:	45 e1       	ldi	r20, 0x15	; 21
    2592:	2e e2       	ldi	r18, 0x2E	; 46
    2594:	09 e3       	ldi	r16, 0x39	; 57
    2596:	0e 94 00 0a 	call	0x1400	; 0x1400 <glcd_set_font>
		//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
		//glcd_set_font(Bebas_Neue20x36_Bold_Numbers,20,36,46,57);
		//glcd_set_font(Bebas_Neue18x36_Numbers,18,36,46,57);
		//glcd_set_font(HelveticaNeueLT_Com_57_Cn23x35_Numbers,23,35,46,57); // commercial font - not for public distribution

		sprintf(string,"%d",count);
    259a:	ed 2c       	mov	r14, r13
    259c:	ff 24       	eor	r15, r15
    259e:	00 d0       	rcall	.+0      	; 0x25a0 <glcd_test_counter_and_graph+0x62>
    25a0:	00 d0       	rcall	.+0      	; 0x25a2 <glcd_test_counter_and_graph+0x64>
    25a2:	00 d0       	rcall	.+0      	; 0x25a4 <glcd_test_counter_and_graph+0x66>
    25a4:	ed b7       	in	r30, 0x3d	; 61
    25a6:	fe b7       	in	r31, 0x3e	; 62
    25a8:	31 96       	adiw	r30, 0x01	; 1
    25aa:	ad b7       	in	r26, 0x3d	; 61
    25ac:	be b7       	in	r27, 0x3e	; 62
    25ae:	12 96       	adiw	r26, 0x02	; 2
    25b0:	bc 92       	st	X, r11
    25b2:	ae 92       	st	-X, r10
    25b4:	11 97       	sbiw	r26, 0x01	; 1
    25b6:	93 82       	std	Z+3, r9	; 0x03
    25b8:	82 82       	std	Z+2, r8	; 0x02
    25ba:	f5 82       	std	Z+5, r15	; 0x05
    25bc:	e4 82       	std	Z+4, r14	; 0x04
    25be:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <sprintf>
		glcd_draw_string_xy(0,0,string);
    25c2:	8d b7       	in	r24, 0x3d	; 61
    25c4:	9e b7       	in	r25, 0x3e	; 62
    25c6:	06 96       	adiw	r24, 0x06	; 6
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	9e bf       	out	0x3e, r25	; 62
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	8d bf       	out	0x3d, r24	; 61
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	60 e0       	ldi	r22, 0x00	; 0
    25d6:	a5 01       	movw	r20, r10
    25d8:	0e 94 2e 0c 	call	0x185c	; 0x185c <glcd_draw_string_xy>
		glcd_bar_graph_horizontal(10,38,30,6,count*4);
    25dc:	87 01       	movw	r16, r14
    25de:	00 0f       	add	r16, r16
    25e0:	11 1f       	adc	r17, r17
    25e2:	00 0f       	add	r16, r16
    25e4:	11 1f       	adc	r17, r17
    25e6:	8a e0       	ldi	r24, 0x0A	; 10
    25e8:	66 e2       	ldi	r22, 0x26	; 38
    25ea:	4e e1       	ldi	r20, 0x1E	; 30
    25ec:	26 e0       	ldi	r18, 0x06	; 6
    25ee:	0e 94 d7 09 	call	0x13ae	; 0x13ae <glcd_bar_graph_horizontal>
		glcd_bar_graph_vertical(70,0,8,30,count*2);
    25f2:	ee 0c       	add	r14, r14
    25f4:	ff 1c       	adc	r15, r15
    25f6:	86 e4       	ldi	r24, 0x46	; 70
    25f8:	60 e0       	ldi	r22, 0x00	; 0
    25fa:	48 e0       	ldi	r20, 0x08	; 8
    25fc:	2e e1       	ldi	r18, 0x1E	; 30
    25fe:	0e 2d       	mov	r16, r14
    2600:	0e 94 94 09 	call	0x1328	; 0x1328 <glcd_bar_graph_vertical>

		glcd_write();
    2604:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_write>
		count += 1;
    2608:	d3 94       	inc	r13

		DEMO_RETURN();
    260a:	80 91 70 01 	lds	r24, 0x0170
    260e:	88 23       	and	r24, r24
    2610:	09 f4       	brne	.+2      	; 0x2614 <glcd_test_counter_and_graph+0xd6>
    2612:	b9 cf       	rjmp	.-142    	; 0x2586 <glcd_test_counter_and_graph+0x48>
    2614:	10 92 70 01 	sts	0x0170, r1
	}

}
    2618:	28 96       	adiw	r28, 0x08	; 8
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	f8 94       	cli
    261e:	de bf       	out	0x3e, r29	; 62
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	cd bf       	out	0x3d, r28	; 61
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	1f 91       	pop	r17
    262a:	0f 91       	pop	r16
    262c:	ff 90       	pop	r15
    262e:	ef 90       	pop	r14
    2630:	df 90       	pop	r13
    2632:	bf 90       	pop	r11
    2634:	af 90       	pop	r10
    2636:	9f 90       	pop	r9
    2638:	8f 90       	pop	r8
    263a:	08 95       	ret

0000263c <glcd_test_circles>:
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf0, 0xe0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xf0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 
	};
#endif /* GLCD_UNIT_TEST_BITMAP_ENABLE */

void glcd_test_circles(void)
{
    263c:	cf 92       	push	r12
    263e:	df 92       	push	r13
    2640:	ef 92       	push	r14
    2642:	ff 92       	push	r15
    2644:	0f 93       	push	r16
    2646:	1f 93       	push	r17
    2648:	cf 93       	push	r28
    264a:	df 93       	push	r29
    264c:	00 e4       	ldi	r16, 0x40	; 64
    264e:	c0 2e       	mov	r12, r16
    2650:	0f e1       	ldi	r16, 0x1F	; 31
    2652:	d0 2e       	mov	r13, r16
	uint8_t x,y,radius;

	while (1) {
		uint8_t i;
		
		glcd_clear();
    2654:	c0 ea       	ldi	r28, 0xA0	; 160
    2656:	df e0       	ldi	r29, 0x0F	; 15
    2658:	0e 94 90 07 	call	0xf20	; 0xf20 <glcd_clear>

		// generate random(ish) position on display
		x = rand() % GLCD_LCD_WIDTH;
    265c:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <rand>
    2660:	64 e5       	ldi	r22, 0x54	; 84
    2662:	70 e0       	ldi	r23, 0x00	; 0
    2664:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divmodhi4>
    2668:	e8 2e       	mov	r14, r24
		y = rand() % GLCD_LCD_HEIGHT;
    266a:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <rand>
    266e:	60 e3       	ldi	r22, 0x30	; 48
    2670:	70 e0       	ldi	r23, 0x00	; 0
    2672:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divmodhi4>
    2676:	f8 2e       	mov	r15, r24
		radius = rand() % 50;
    2678:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <rand>
    267c:	62 e3       	ldi	r22, 0x32	; 50
    267e:	70 e0       	ldi	r23, 0x00	; 0
    2680:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divmodhi4>
    2684:	08 2f       	mov	r16, r24
    2686:	10 e0       	ldi	r17, 0x00	; 0
		//x = 70; y=25; radius=50; // for debugging

		// fill circle with black
		
		for (i=0; i<=radius; i++) {
			glcd_fill_circle(x,y,i,BLACK);
    2688:	8e 2d       	mov	r24, r14
    268a:	6f 2d       	mov	r22, r15
    268c:	41 2f       	mov	r20, r17
    268e:	21 e0       	ldi	r18, 0x01	; 1
    2690:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <glcd_fill_circle>
			glcd_write();
    2694:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_write>
    2698:	c6 01       	movw	r24, r12
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	f1 f7       	brne	.-4      	; 0x269a <glcd_test_circles+0x5e>

		//x = 70; y=25; radius=50; // for debugging

		// fill circle with black
		
		for (i=0; i<=radius; i++) {
    269e:	1f 5f       	subi	r17, 0xFF	; 255
    26a0:	01 17       	cp	r16, r17
    26a2:	90 f7       	brcc	.-28     	; 0x2688 <glcd_test_circles+0x4c>
    26a4:	10 e0       	ldi	r17, 0x00	; 0
			delay_ms(2);
		}

		// fill the same circle above but with white
		for (i=0; i<=radius; i++) {
			glcd_fill_circle(x,y,i,WHITE);
    26a6:	8e 2d       	mov	r24, r14
    26a8:	6f 2d       	mov	r22, r15
    26aa:	41 2f       	mov	r20, r17
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <glcd_fill_circle>
			glcd_write();
    26b2:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_write>
    26b6:	ce 01       	movw	r24, r28
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	f1 f7       	brne	.-4      	; 0x26b8 <glcd_test_circles+0x7c>
			glcd_write();
			delay_ms(2);
		}

		// fill the same circle above but with white
		for (i=0; i<=radius; i++) {
    26bc:	1f 5f       	subi	r17, 0xFF	; 255
    26be:	01 17       	cp	r16, r17
    26c0:	90 f7       	brcc	.-28     	; 0x26a6 <glcd_test_circles+0x6a>
			glcd_fill_circle(x,y,i,WHITE);
			glcd_write();
			delay_ms(1);
		}
		DEMO_RETURN();
    26c2:	80 91 70 01 	lds	r24, 0x0170
    26c6:	88 23       	and	r24, r24
    26c8:	39 f2       	breq	.-114    	; 0x2658 <glcd_test_circles+0x1c>
    26ca:	10 92 70 01 	sts	0x0170, r1
	}
}
    26ce:	df 91       	pop	r29
    26d0:	cf 91       	pop	r28
    26d2:	1f 91       	pop	r17
    26d4:	0f 91       	pop	r16
    26d6:	ff 90       	pop	r15
    26d8:	ef 90       	pop	r14
    26da:	df 90       	pop	r13
    26dc:	cf 90       	pop	r12
    26de:	08 95       	ret

000026e0 <glcd_tiny_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_tiny_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
    26e0:	0f 93       	push	r16
	font_current.font_table = font_table;
    26e2:	90 93 72 03 	sts	0x0372, r25
    26e6:	80 93 71 03 	sts	0x0371, r24
	font_current.width = width;
    26ea:	60 93 73 03 	sts	0x0373, r22
	font_current.height = height;
    26ee:	40 93 74 03 	sts	0x0374, r20
	font_current.start_char = start_char;
    26f2:	20 93 75 03 	sts	0x0375, r18
	font_current.end_char = end_char;
    26f6:	00 93 76 03 	sts	0x0376, r16
	font_current.table_type = STANG;
    26fa:	10 92 77 03 	sts	0x0377, r1
}
    26fe:	0f 91       	pop	r16
    2700:	08 95       	ret

00002702 <glcd_tiny_draw_char_xy>:
{
	glcd_invert_area(0,line*8,GLCD_LCD_WIDTH-1,8);
}

void glcd_tiny_draw_char_xy(uint8_t x, uint8_t y, char c)
{
    2702:	bf 92       	push	r11
    2704:	cf 92       	push	r12
    2706:	df 92       	push	r13
    2708:	ef 92       	push	r14
    270a:	ff 92       	push	r15
    270c:	0f 93       	push	r16
    270e:	1f 93       	push	r17
    2710:	cf 93       	push	r28
    2712:	df 93       	push	r29
    2714:	f8 2e       	mov	r15, r24
    2716:	e6 2e       	mov	r14, r22
	uint8_t dat;
	
	/* Only works for fonts < 8 bits in height */
	
	/* Check all important bounds requirements are okay */
	if ( (y >= GLCD_LCD_HEIGHT) || ((x+font_current.width) >= GLCD_LCD_WIDTH) || (font_current.height >= 8) || font_current.table_type != STANG) {
    2718:	5f e2       	ldi	r21, 0x2F	; 47
    271a:	56 17       	cp	r21, r22
    271c:	08 f4       	brcc	.+2      	; 0x2720 <glcd_tiny_draw_char_xy+0x1e>
    271e:	5d c0       	rjmp	.+186    	; 0x27da <glcd_tiny_draw_char_xy+0xd8>
    2720:	80 91 73 03 	lds	r24, 0x0373
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	8f 0d       	add	r24, r15
    2728:	91 1d       	adc	r25, r1
    272a:	84 35       	cpi	r24, 0x54	; 84
    272c:	91 05       	cpc	r25, r1
    272e:	0c f0       	brlt	.+2      	; 0x2732 <glcd_tiny_draw_char_xy+0x30>
    2730:	54 c0       	rjmp	.+168    	; 0x27da <glcd_tiny_draw_char_xy+0xd8>
    2732:	80 91 74 03 	lds	r24, 0x0374
    2736:	88 30       	cpi	r24, 0x08	; 8
    2738:	08 f0       	brcs	.+2      	; 0x273c <glcd_tiny_draw_char_xy+0x3a>
    273a:	4f c0       	rjmp	.+158    	; 0x27da <glcd_tiny_draw_char_xy+0xd8>
    273c:	80 91 77 03 	lds	r24, 0x0377
    2740:	88 23       	and	r24, r24
    2742:	09 f0       	breq	.+2      	; 0x2746 <glcd_tiny_draw_char_xy+0x44>
    2744:	4a c0       	rjmp	.+148    	; 0x27da <glcd_tiny_draw_char_xy+0xd8>
		return;
	}		
	if (c < font_current.start_char || c > font_current.end_char) {
    2746:	80 91 75 03 	lds	r24, 0x0375
    274a:	48 17       	cp	r20, r24
    274c:	20 f0       	brcs	.+8      	; 0x2756 <glcd_tiny_draw_char_xy+0x54>
    274e:	80 91 76 03 	lds	r24, 0x0376
    2752:	84 17       	cp	r24, r20
    2754:	08 f4       	brcc	.+2      	; 0x2758 <glcd_tiny_draw_char_xy+0x56>
    2756:	4e e2       	ldi	r20, 0x2E	; 46
    2758:	00 e0       	ldi	r16, 0x00	; 0
	
	xvar = x;
	
	for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
		dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    275a:	c4 2e       	mov	r12, r20
    275c:	dd 24       	eor	r13, r13
    275e:	2f c0       	rjmp	.+94     	; 0x27be <glcd_tiny_draw_char_xy+0xbc>
    2760:	80 91 75 03 	lds	r24, 0x0375
    2764:	96 01       	movw	r18, r12
    2766:	28 1b       	sub	r18, r24
    2768:	31 09       	sbc	r19, r1
    276a:	84 2f       	mov	r24, r20
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	ac 01       	movw	r20, r24
    2770:	24 9f       	mul	r18, r20
    2772:	c0 01       	movw	r24, r0
    2774:	25 9f       	mul	r18, r21
    2776:	90 0d       	add	r25, r0
    2778:	34 9f       	mul	r19, r20
    277a:	90 0d       	add	r25, r0
    277c:	11 24       	eor	r1, r1
    277e:	80 0f       	add	r24, r16
    2780:	91 1d       	adc	r25, r1
    2782:	e0 91 71 03 	lds	r30, 0x0371
    2786:	f0 91 72 03 	lds	r31, 0x0372
    278a:	e8 0f       	add	r30, r24
    278c:	f9 1f       	adc	r31, r25
    278e:	e4 91       	lpm	r30, Z+
    2790:	10 e0       	ldi	r17, 0x00	; 0
#else
		dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		for (yvar = 0; yvar < font_current.height; yvar++) {
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
    2792:	ce 2f       	mov	r28, r30
    2794:	d0 e0       	ldi	r29, 0x00	; 0
    2796:	0e c0       	rjmp	.+28     	; 0x27b4 <glcd_tiny_draw_char_xy+0xb2>
    2798:	61 2f       	mov	r22, r17
    279a:	6e 0d       	add	r22, r14
    279c:	ae 01       	movw	r20, r28
    279e:	01 2e       	mov	r0, r17
    27a0:	02 c0       	rjmp	.+4      	; 0x27a6 <glcd_tiny_draw_char_xy+0xa4>
    27a2:	55 95       	asr	r21
    27a4:	47 95       	ror	r20
    27a6:	0a 94       	dec	r0
    27a8:	e2 f7       	brpl	.-8      	; 0x27a2 <glcd_tiny_draw_char_xy+0xa0>
    27aa:	41 70       	andi	r20, 0x01	; 1
    27ac:	8b 2d       	mov	r24, r11
    27ae:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <glcd_set_pixel>
#if defined(GLCD_DEVICE_AVR8)			
		dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
		dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		for (yvar = 0; yvar < font_current.height; yvar++) {
    27b2:	1f 5f       	subi	r17, 0xFF	; 255
    27b4:	80 91 74 03 	lds	r24, 0x0374
    27b8:	18 17       	cp	r17, r24
    27ba:	70 f3       	brcs	.-36     	; 0x2798 <glcd_tiny_draw_char_xy+0x96>
		c = '.';
	}
	
	xvar = x;
	
	for ( i = 0; i < font_current.width; i++ ) {
    27bc:	0f 5f       	subi	r16, 0xFF	; 255
    27be:	b0 2e       	mov	r11, r16
    27c0:	bf 0c       	add	r11, r15
    27c2:	40 91 73 03 	lds	r20, 0x0373
    27c6:	04 17       	cp	r16, r20
    27c8:	58 f2       	brcs	.-106    	; 0x2760 <glcd_tiny_draw_char_xy+0x5e>
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
		}
		xvar++;
	}
	
	glcd_update_bbox(x, y, x+font_current.width,y+font_current.height);
    27ca:	4f 0d       	add	r20, r15
    27cc:	20 91 74 03 	lds	r18, 0x0374
    27d0:	2e 0d       	add	r18, r14
    27d2:	8f 2d       	mov	r24, r15
    27d4:	6e 2d       	mov	r22, r14
    27d6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <glcd_update_bbox>
	
}
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	1f 91       	pop	r17
    27e0:	0f 91       	pop	r16
    27e2:	ff 90       	pop	r15
    27e4:	ef 90       	pop	r14
    27e6:	df 90       	pop	r13
    27e8:	cf 90       	pop	r12
    27ea:	bf 90       	pop	r11
    27ec:	08 95       	ret

000027ee <glcd_tiny_draw_char>:
	font_current.end_char = end_char;
	font_current.table_type = STANG;
}

void glcd_tiny_draw_char(uint8_t x, uint8_t line, char c)
{
    27ee:	0f 93       	push	r16
    27f0:	1f 93       	push	r17
    27f2:	cf 93       	push	r28
    27f4:	df 93       	push	r29
    27f6:	08 2f       	mov	r16, r24
    27f8:	26 2f       	mov	r18, r22
    27fa:	14 2f       	mov	r17, r20
	uint8_t i;
	
	/* Only works for fonts < 8 bits in height */
	if (font_current.height >= 8) {
    27fc:	60 91 74 03 	lds	r22, 0x0374
    2800:	68 30       	cpi	r22, 0x08	; 8
    2802:	08 f0       	brcs	.+2      	; 0x2806 <glcd_tiny_draw_char+0x18>
    2804:	6a c0       	rjmp	.+212    	; 0x28da <glcd_tiny_draw_char+0xec>
		return;
	}
	if (c < font_current.start_char || c > font_current.end_char) {
    2806:	80 91 75 03 	lds	r24, 0x0375
    280a:	48 17       	cp	r20, r24
    280c:	20 f0       	brcs	.+8      	; 0x2816 <glcd_tiny_draw_char+0x28>
    280e:	80 91 76 03 	lds	r24, 0x0376
    2812:	84 17       	cp	r24, r20
    2814:	08 f4       	brcc	.+2      	; 0x2818 <glcd_tiny_draw_char+0x2a>
    2816:	1e e2       	ldi	r17, 0x2E	; 46
		c = '.';
	}
	if ( line >= GLCD_LCD_HEIGHT / (font_current.height + 1) ) {
    2818:	c2 2f       	mov	r28, r18
    281a:	d0 e0       	ldi	r29, 0x00	; 0
    281c:	e6 2f       	mov	r30, r22
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	31 96       	adiw	r30, 0x01	; 1
    2822:	80 e3       	ldi	r24, 0x30	; 48
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	bf 01       	movw	r22, r30
    2828:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divmodhi4>
    282c:	c6 17       	cp	r28, r22
    282e:	d7 07       	cpc	r29, r23
    2830:	0c f0       	brlt	.+2      	; 0x2834 <glcd_tiny_draw_char+0x46>
    2832:	53 c0       	rjmp	.+166    	; 0x28da <glcd_tiny_draw_char+0xec>
		return;
	}		
	if ( (x+font_current.width) >= GLCD_LCD_WIDTH ) {
    2834:	40 91 73 03 	lds	r20, 0x0373
    2838:	84 2f       	mov	r24, r20
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	80 0f       	add	r24, r16
    283e:	91 1d       	adc	r25, r1
    2840:	84 35       	cpi	r24, 0x54	; 84
    2842:	91 05       	cpc	r25, r1
    2844:	0c f0       	brlt	.+2      	; 0x2848 <glcd_tiny_draw_char+0x5a>
    2846:	49 c0       	rjmp	.+146    	; 0x28da <glcd_tiny_draw_char+0xec>
		return;
	}		
	
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
    2848:	ce 9f       	mul	r28, r30
    284a:	b0 01       	movw	r22, r0
    284c:	cf 9f       	mul	r28, r31
    284e:	70 0d       	add	r23, r0
    2850:	de 9f       	mul	r29, r30
    2852:	70 0d       	add	r23, r0
    2854:	11 24       	eor	r1, r1
    2856:	40 0f       	add	r20, r16
    2858:	21 96       	adiw	r28, 0x01	; 1
    285a:	ce 9f       	mul	r28, r30
    285c:	90 01       	movw	r18, r0
    285e:	cf 9f       	mul	r28, r31
    2860:	30 0d       	add	r19, r0
    2862:	de 9f       	mul	r29, r30
    2864:	30 0d       	add	r19, r0
    2866:	11 24       	eor	r1, r1
    2868:	21 97       	sbiw	r28, 0x01	; 1
    286a:	80 2f       	mov	r24, r16
    286c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <glcd_update_bbox>
	
	for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)		
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    2870:	84 e5       	ldi	r24, 0x54	; 84
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	c8 9f       	mul	r28, r24
    2876:	d0 01       	movw	r26, r0
    2878:	c9 9f       	mul	r28, r25
    287a:	b0 0d       	add	r27, r0
    287c:	d8 9f       	mul	r29, r24
    287e:	b0 0d       	add	r27, r0
    2880:	11 24       	eor	r1, r1
    2882:	50 e0       	ldi	r21, 0x00	; 0
    2884:	61 2f       	mov	r22, r17
    2886:	70 e0       	ldi	r23, 0x00	; 0
    2888:	22 c0       	rjmp	.+68     	; 0x28ce <glcd_tiny_draw_char+0xe0>
    288a:	80 91 75 03 	lds	r24, 0x0375
    288e:	9b 01       	movw	r18, r22
    2890:	28 1b       	sub	r18, r24
    2892:	31 09       	sbc	r19, r1
    2894:	89 2f       	mov	r24, r25
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	fc 01       	movw	r30, r24
    289a:	2e 9f       	mul	r18, r30
    289c:	c0 01       	movw	r24, r0
    289e:	2f 9f       	mul	r18, r31
    28a0:	90 0d       	add	r25, r0
    28a2:	3e 9f       	mul	r19, r30
    28a4:	90 0d       	add	r25, r0
    28a6:	11 24       	eor	r1, r1
    28a8:	85 0f       	add	r24, r21
    28aa:	91 1d       	adc	r25, r1
    28ac:	e0 91 71 03 	lds	r30, 0x0371
    28b0:	f0 91 72 03 	lds	r31, 0x0372
    28b4:	e8 0f       	add	r30, r24
    28b6:	f9 1f       	adc	r31, r25
    28b8:	84 91       	lpm	r24, Z+
    28ba:	e0 91 6d 03 	lds	r30, 0x036D
    28be:	f0 91 6e 03 	lds	r31, 0x036E
    28c2:	ea 0f       	add	r30, r26
    28c4:	fb 1f       	adc	r31, r27
    28c6:	e4 0f       	add	r30, r20
    28c8:	f1 1d       	adc	r31, r1
    28ca:	80 83       	st	Z, r24
		return;
	}		
	
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
	
	for ( i = 0; i < font_current.width; i++ ) {
    28cc:	5f 5f       	subi	r21, 0xFF	; 255
    28ce:	45 2f       	mov	r20, r21
    28d0:	40 0f       	add	r20, r16
    28d2:	90 91 73 03 	lds	r25, 0x0373
    28d6:	59 17       	cp	r21, r25
    28d8:	c0 f2       	brcs	.-80     	; 0x288a <glcd_tiny_draw_char+0x9c>
#else
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		x++;
	}
}
    28da:	df 91       	pop	r29
    28dc:	cf 91       	pop	r28
    28de:	1f 91       	pop	r17
    28e0:	0f 91       	pop	r16
    28e2:	08 95       	ret

000028e4 <glcd_tiny_draw_string_P>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_draw_string_P(uint8_t x, uint8_t line, PGM_P str)
#else
void glcd_tiny_draw_string_P(uint8_t x, uint8_t line, const char *str)
#endif
{
    28e4:	0f 93       	push	r16
    28e6:	1f 93       	push	r17
    28e8:	cf 93       	push	r28
    28ea:	df 93       	push	r29
    28ec:	18 2f       	mov	r17, r24
    28ee:	06 2f       	mov	r16, r22
    28f0:	ea 01       	movw	r28, r20
	if (font_current.height >= 8) {
    28f2:	80 91 74 03 	lds	r24, 0x0374
    28f6:	88 30       	cpi	r24, 0x08	; 8
    28f8:	20 f5       	brcc	.+72     	; 0x2942 <glcd_tiny_draw_string_P+0x5e>
		return;
    28fa:	fe 01       	movw	r30, r28
	}
	while (1) {
#if defined(GLCD_DEVICE_AVR8)
		char c = pgm_read_byte(str++);
    28fc:	21 96       	adiw	r28, 0x01	; 1
    28fe:	44 91       	lpm	r20, Z+
#else
		char c = *(str++);
#endif
		if (!c)
    2900:	44 23       	and	r20, r20
    2902:	f9 f0       	breq	.+62     	; 0x2942 <glcd_tiny_draw_string_P+0x5e>
			return;	
				
		glcd_tiny_draw_char(x, line, c);
    2904:	81 2f       	mov	r24, r17
    2906:	60 2f       	mov	r22, r16
    2908:	0e 94 f7 13 	call	0x27ee	; 0x27ee <glcd_tiny_draw_char>
		
		x += (font_current.width + 1);
    290c:	80 91 73 03 	lds	r24, 0x0373
    2910:	8f 5f       	subi	r24, 0xFF	; 255
    2912:	18 0f       	add	r17, r24
    2914:	81 50       	subi	r24, 0x01	; 1
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	81 0f       	add	r24, r17
    291a:	91 1d       	adc	r25, r1
    291c:	84 35       	cpi	r24, 0x54	; 84
    291e:	91 05       	cpc	r25, r1
    2920:	14 f0       	brlt	.+4      	; 0x2926 <glcd_tiny_draw_string_P+0x42>
			x = 0; /* Ran out of this line */
			line++;
    2922:	0f 5f       	subi	r16, 0xFF	; 255
    2924:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
    2926:	20 2f       	mov	r18, r16
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	60 91 74 03 	lds	r22, 0x0374
    292e:	70 e0       	ldi	r23, 0x00	; 0
    2930:	6f 5f       	subi	r22, 0xFF	; 255
    2932:	7f 4f       	sbci	r23, 0xFF	; 255
    2934:	80 e3       	ldi	r24, 0x30	; 48
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divmodhi4>
    293c:	26 17       	cp	r18, r22
    293e:	37 07       	cpc	r19, r23
    2940:	e4 f2       	brlt	.-72     	; 0x28fa <glcd_tiny_draw_string_P+0x16>
			return; /* Ran out of space :( */
	}	
}
    2942:	df 91       	pop	r29
    2944:	cf 91       	pop	r28
    2946:	1f 91       	pop	r17
    2948:	0f 91       	pop	r16
    294a:	08 95       	ret

0000294c <glcd_tiny_draw_string>:
		x++;
	}
}

void glcd_tiny_draw_string(uint8_t x, uint8_t line, char *str)
{
    294c:	0f 93       	push	r16
    294e:	1f 93       	push	r17
    2950:	cf 93       	push	r28
    2952:	df 93       	push	r29
    2954:	18 2f       	mov	r17, r24
    2956:	06 2f       	mov	r16, r22
    2958:	ea 01       	movw	r28, r20
	if (font_current.height >= 8) {
    295a:	80 91 74 03 	lds	r24, 0x0374
    295e:	88 30       	cpi	r24, 0x08	; 8
    2960:	08 f1       	brcs	.+66     	; 0x29a4 <glcd_tiny_draw_string+0x58>
    2962:	23 c0       	rjmp	.+70     	; 0x29aa <glcd_tiny_draw_string+0x5e>
		return;
	}
	while (*str) {
		glcd_tiny_draw_char(x, line, *str++);
    2964:	81 2f       	mov	r24, r17
    2966:	60 2f       	mov	r22, r16
    2968:	0e 94 f7 13 	call	0x27ee	; 0x27ee <glcd_tiny_draw_char>
		x += (font_current.width + 1);
    296c:	80 91 73 03 	lds	r24, 0x0373
    2970:	8f 5f       	subi	r24, 0xFF	; 255
    2972:	18 0f       	add	r17, r24
    2974:	81 50       	subi	r24, 0x01	; 1
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	81 0f       	add	r24, r17
    297a:	91 1d       	adc	r25, r1
    297c:	84 35       	cpi	r24, 0x54	; 84
    297e:	91 05       	cpc	r25, r1
    2980:	14 f0       	brlt	.+4      	; 0x2986 <glcd_tiny_draw_string+0x3a>
			x = 0; /* Ran out of this line */
			line++;
    2982:	0f 5f       	subi	r16, 0xFF	; 255
    2984:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
    2986:	20 2f       	mov	r18, r16
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	60 91 74 03 	lds	r22, 0x0374
    298e:	70 e0       	ldi	r23, 0x00	; 0
    2990:	6f 5f       	subi	r22, 0xFF	; 255
    2992:	7f 4f       	sbci	r23, 0xFF	; 255
    2994:	80 e3       	ldi	r24, 0x30	; 48
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__divmodhi4>
    299c:	26 17       	cp	r18, r22
    299e:	37 07       	cpc	r19, r23
    29a0:	24 f4       	brge	.+8      	; 0x29aa <glcd_tiny_draw_string+0x5e>
{
	if (font_current.height >= 8) {
		return;
	}
	while (*str) {
		glcd_tiny_draw_char(x, line, *str++);
    29a2:	21 96       	adiw	r28, 0x01	; 1
void glcd_tiny_draw_string(uint8_t x, uint8_t line, char *str)
{
	if (font_current.height >= 8) {
		return;
	}
	while (*str) {
    29a4:	48 81       	ld	r20, Y
    29a6:	44 23       	and	r20, r20
    29a8:	e9 f6       	brne	.-70     	; 0x2964 <glcd_tiny_draw_string+0x18>
			line++;
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
			return; /* Ran out of space :( */
	}
}
    29aa:	df 91       	pop	r29
    29ac:	cf 91       	pop	r28
    29ae:	1f 91       	pop	r17
    29b0:	0f 91       	pop	r16
    29b2:	08 95       	ret

000029b4 <glcd_tiny_invert_line>:
	glcd_write();
}

void glcd_tiny_invert_line(uint8_t line)
{
	glcd_invert_area(0,line*8,GLCD_LCD_WIDTH-1,8);
    29b4:	68 2f       	mov	r22, r24
    29b6:	70 e0       	ldi	r23, 0x00	; 0
    29b8:	83 e0       	ldi	r24, 0x03	; 3
    29ba:	66 0f       	add	r22, r22
    29bc:	77 1f       	adc	r23, r23
    29be:	8a 95       	dec	r24
    29c0:	e1 f7       	brne	.-8      	; 0x29ba <glcd_tiny_invert_line+0x6>
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	43 e5       	ldi	r20, 0x53	; 83
    29c6:	28 e0       	ldi	r18, 0x08	; 8
    29c8:	0e 94 a5 0c 	call	0x194a	; 0x194a <glcd_invert_area>
}
    29cc:	08 95       	ret

000029ce <glcd_tiny_draw_string_ammend_P>:
	glcd_scroll_line();
	glcd_tiny_draw_string(0, (GLCD_LCD_HEIGHT/8-1), str);
	glcd_write();
}

void glcd_tiny_draw_string_ammend_P(const char *str) {
    29ce:	0f 93       	push	r16
    29d0:	1f 93       	push	r17
    29d2:	8c 01       	movw	r16, r24
	glcd_scroll_line();
    29d4:	0e 94 4c 07 	call	0xe98	; 0xe98 <glcd_scroll_line>
	glcd_tiny_draw_string_P(0, (GLCD_LCD_HEIGHT/8-1), str);
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	65 e0       	ldi	r22, 0x05	; 5
    29dc:	a8 01       	movw	r20, r16
    29de:	0e 94 72 14 	call	0x28e4	; 0x28e4 <glcd_tiny_draw_string_P>
	glcd_write();
    29e2:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_write>
}
    29e6:	1f 91       	pop	r17
    29e8:	0f 91       	pop	r16
    29ea:	08 95       	ret

000029ec <glcd_tiny_draw_string_ammend>:
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
			return; /* Ran out of space :( */
	}	
}

void glcd_tiny_draw_string_ammend(char *str) {
    29ec:	0f 93       	push	r16
    29ee:	1f 93       	push	r17
    29f0:	8c 01       	movw	r16, r24
	glcd_scroll_line();
    29f2:	0e 94 4c 07 	call	0xe98	; 0xe98 <glcd_scroll_line>
	glcd_tiny_draw_string(0, (GLCD_LCD_HEIGHT/8-1), str);
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	65 e0       	ldi	r22, 0x05	; 5
    29fa:	a8 01       	movw	r20, r16
    29fc:	0e 94 a6 14 	call	0x294c	; 0x294c <glcd_tiny_draw_string>
	glcd_write();
    2a00:	0e 94 e5 07 	call	0xfca	; 0xfca <glcd_write>
}
    2a04:	1f 91       	pop	r17
    2a06:	0f 91       	pop	r16
    2a08:	08 95       	ret

00002a0a <__cmpsf2>:
    2a0a:	6c d0       	rcall	.+216    	; 0x2ae4 <__fp_cmp>
    2a0c:	08 f4       	brcc	.+2      	; 0x2a10 <__cmpsf2+0x6>
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	08 95       	ret

00002a12 <__fixunssfsi>:
    2a12:	94 d0       	rcall	.+296    	; 0x2b3c <__fp_splitA>
    2a14:	88 f0       	brcs	.+34     	; 0x2a38 <__fixunssfsi+0x26>
    2a16:	9f 57       	subi	r25, 0x7F	; 127
    2a18:	90 f0       	brcs	.+36     	; 0x2a3e <__fixunssfsi+0x2c>
    2a1a:	b9 2f       	mov	r27, r25
    2a1c:	99 27       	eor	r25, r25
    2a1e:	b7 51       	subi	r27, 0x17	; 23
    2a20:	a0 f0       	brcs	.+40     	; 0x2a4a <__fixunssfsi+0x38>
    2a22:	d1 f0       	breq	.+52     	; 0x2a58 <__fixunssfsi+0x46>
    2a24:	66 0f       	add	r22, r22
    2a26:	77 1f       	adc	r23, r23
    2a28:	88 1f       	adc	r24, r24
    2a2a:	99 1f       	adc	r25, r25
    2a2c:	1a f0       	brmi	.+6      	; 0x2a34 <__fixunssfsi+0x22>
    2a2e:	ba 95       	dec	r27
    2a30:	c9 f7       	brne	.-14     	; 0x2a24 <__fixunssfsi+0x12>
    2a32:	12 c0       	rjmp	.+36     	; 0x2a58 <__fixunssfsi+0x46>
    2a34:	b1 30       	cpi	r27, 0x01	; 1
    2a36:	81 f0       	breq	.+32     	; 0x2a58 <__fixunssfsi+0x46>
    2a38:	9b d0       	rcall	.+310    	; 0x2b70 <__fp_zero>
    2a3a:	b1 e0       	ldi	r27, 0x01	; 1
    2a3c:	08 95       	ret
    2a3e:	98 c0       	rjmp	.+304    	; 0x2b70 <__fp_zero>
    2a40:	67 2f       	mov	r22, r23
    2a42:	78 2f       	mov	r23, r24
    2a44:	88 27       	eor	r24, r24
    2a46:	b8 5f       	subi	r27, 0xF8	; 248
    2a48:	39 f0       	breq	.+14     	; 0x2a58 <__fixunssfsi+0x46>
    2a4a:	b9 3f       	cpi	r27, 0xF9	; 249
    2a4c:	cc f3       	brlt	.-14     	; 0x2a40 <__fixunssfsi+0x2e>
    2a4e:	86 95       	lsr	r24
    2a50:	77 95       	ror	r23
    2a52:	67 95       	ror	r22
    2a54:	b3 95       	inc	r27
    2a56:	d9 f7       	brne	.-10     	; 0x2a4e <__fixunssfsi+0x3c>
    2a58:	3e f4       	brtc	.+14     	; 0x2a68 <__fixunssfsi+0x56>
    2a5a:	90 95       	com	r25
    2a5c:	80 95       	com	r24
    2a5e:	70 95       	com	r23
    2a60:	61 95       	neg	r22
    2a62:	7f 4f       	sbci	r23, 0xFF	; 255
    2a64:	8f 4f       	sbci	r24, 0xFF	; 255
    2a66:	9f 4f       	sbci	r25, 0xFF	; 255
    2a68:	08 95       	ret

00002a6a <__floatunsisf>:
    2a6a:	e8 94       	clt
    2a6c:	09 c0       	rjmp	.+18     	; 0x2a80 <__floatsisf+0x12>

00002a6e <__floatsisf>:
    2a6e:	97 fb       	bst	r25, 7
    2a70:	3e f4       	brtc	.+14     	; 0x2a80 <__floatsisf+0x12>
    2a72:	90 95       	com	r25
    2a74:	80 95       	com	r24
    2a76:	70 95       	com	r23
    2a78:	61 95       	neg	r22
    2a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a7c:	8f 4f       	sbci	r24, 0xFF	; 255
    2a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a80:	99 23       	and	r25, r25
    2a82:	a9 f0       	breq	.+42     	; 0x2aae <__floatsisf+0x40>
    2a84:	f9 2f       	mov	r31, r25
    2a86:	96 e9       	ldi	r25, 0x96	; 150
    2a88:	bb 27       	eor	r27, r27
    2a8a:	93 95       	inc	r25
    2a8c:	f6 95       	lsr	r31
    2a8e:	87 95       	ror	r24
    2a90:	77 95       	ror	r23
    2a92:	67 95       	ror	r22
    2a94:	b7 95       	ror	r27
    2a96:	f1 11       	cpse	r31, r1
    2a98:	f8 cf       	rjmp	.-16     	; 0x2a8a <__floatsisf+0x1c>
    2a9a:	fa f4       	brpl	.+62     	; 0x2ada <__floatsisf+0x6c>
    2a9c:	bb 0f       	add	r27, r27
    2a9e:	11 f4       	brne	.+4      	; 0x2aa4 <__floatsisf+0x36>
    2aa0:	60 ff       	sbrs	r22, 0
    2aa2:	1b c0       	rjmp	.+54     	; 0x2ada <__floatsisf+0x6c>
    2aa4:	6f 5f       	subi	r22, 0xFF	; 255
    2aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa8:	8f 4f       	sbci	r24, 0xFF	; 255
    2aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    2aac:	16 c0       	rjmp	.+44     	; 0x2ada <__floatsisf+0x6c>
    2aae:	88 23       	and	r24, r24
    2ab0:	11 f0       	breq	.+4      	; 0x2ab6 <__floatsisf+0x48>
    2ab2:	96 e9       	ldi	r25, 0x96	; 150
    2ab4:	11 c0       	rjmp	.+34     	; 0x2ad8 <__floatsisf+0x6a>
    2ab6:	77 23       	and	r23, r23
    2ab8:	21 f0       	breq	.+8      	; 0x2ac2 <__floatsisf+0x54>
    2aba:	9e e8       	ldi	r25, 0x8E	; 142
    2abc:	87 2f       	mov	r24, r23
    2abe:	76 2f       	mov	r23, r22
    2ac0:	05 c0       	rjmp	.+10     	; 0x2acc <__floatsisf+0x5e>
    2ac2:	66 23       	and	r22, r22
    2ac4:	71 f0       	breq	.+28     	; 0x2ae2 <__floatsisf+0x74>
    2ac6:	96 e8       	ldi	r25, 0x86	; 134
    2ac8:	86 2f       	mov	r24, r22
    2aca:	70 e0       	ldi	r23, 0x00	; 0
    2acc:	60 e0       	ldi	r22, 0x00	; 0
    2ace:	2a f0       	brmi	.+10     	; 0x2ada <__floatsisf+0x6c>
    2ad0:	9a 95       	dec	r25
    2ad2:	66 0f       	add	r22, r22
    2ad4:	77 1f       	adc	r23, r23
    2ad6:	88 1f       	adc	r24, r24
    2ad8:	da f7       	brpl	.-10     	; 0x2ad0 <__floatsisf+0x62>
    2ada:	88 0f       	add	r24, r24
    2adc:	96 95       	lsr	r25
    2ade:	87 95       	ror	r24
    2ae0:	97 f9       	bld	r25, 7
    2ae2:	08 95       	ret

00002ae4 <__fp_cmp>:
    2ae4:	99 0f       	add	r25, r25
    2ae6:	00 08       	sbc	r0, r0
    2ae8:	55 0f       	add	r21, r21
    2aea:	aa 0b       	sbc	r26, r26
    2aec:	e0 e8       	ldi	r30, 0x80	; 128
    2aee:	fe ef       	ldi	r31, 0xFE	; 254
    2af0:	16 16       	cp	r1, r22
    2af2:	17 06       	cpc	r1, r23
    2af4:	e8 07       	cpc	r30, r24
    2af6:	f9 07       	cpc	r31, r25
    2af8:	c0 f0       	brcs	.+48     	; 0x2b2a <__fp_cmp+0x46>
    2afa:	12 16       	cp	r1, r18
    2afc:	13 06       	cpc	r1, r19
    2afe:	e4 07       	cpc	r30, r20
    2b00:	f5 07       	cpc	r31, r21
    2b02:	98 f0       	brcs	.+38     	; 0x2b2a <__fp_cmp+0x46>
    2b04:	62 1b       	sub	r22, r18
    2b06:	73 0b       	sbc	r23, r19
    2b08:	84 0b       	sbc	r24, r20
    2b0a:	95 0b       	sbc	r25, r21
    2b0c:	39 f4       	brne	.+14     	; 0x2b1c <__fp_cmp+0x38>
    2b0e:	0a 26       	eor	r0, r26
    2b10:	61 f0       	breq	.+24     	; 0x2b2a <__fp_cmp+0x46>
    2b12:	23 2b       	or	r18, r19
    2b14:	24 2b       	or	r18, r20
    2b16:	25 2b       	or	r18, r21
    2b18:	21 f4       	brne	.+8      	; 0x2b22 <__fp_cmp+0x3e>
    2b1a:	08 95       	ret
    2b1c:	0a 26       	eor	r0, r26
    2b1e:	09 f4       	brne	.+2      	; 0x2b22 <__fp_cmp+0x3e>
    2b20:	a1 40       	sbci	r26, 0x01	; 1
    2b22:	a6 95       	lsr	r26
    2b24:	8f ef       	ldi	r24, 0xFF	; 255
    2b26:	81 1d       	adc	r24, r1
    2b28:	81 1d       	adc	r24, r1
    2b2a:	08 95       	ret

00002b2c <__fp_split3>:
    2b2c:	57 fd       	sbrc	r21, 7
    2b2e:	90 58       	subi	r25, 0x80	; 128
    2b30:	44 0f       	add	r20, r20
    2b32:	55 1f       	adc	r21, r21
    2b34:	59 f0       	breq	.+22     	; 0x2b4c <__fp_splitA+0x10>
    2b36:	5f 3f       	cpi	r21, 0xFF	; 255
    2b38:	71 f0       	breq	.+28     	; 0x2b56 <__fp_splitA+0x1a>
    2b3a:	47 95       	ror	r20

00002b3c <__fp_splitA>:
    2b3c:	88 0f       	add	r24, r24
    2b3e:	97 fb       	bst	r25, 7
    2b40:	99 1f       	adc	r25, r25
    2b42:	61 f0       	breq	.+24     	; 0x2b5c <__fp_splitA+0x20>
    2b44:	9f 3f       	cpi	r25, 0xFF	; 255
    2b46:	79 f0       	breq	.+30     	; 0x2b66 <__fp_splitA+0x2a>
    2b48:	87 95       	ror	r24
    2b4a:	08 95       	ret
    2b4c:	12 16       	cp	r1, r18
    2b4e:	13 06       	cpc	r1, r19
    2b50:	14 06       	cpc	r1, r20
    2b52:	55 1f       	adc	r21, r21
    2b54:	f2 cf       	rjmp	.-28     	; 0x2b3a <__fp_split3+0xe>
    2b56:	46 95       	lsr	r20
    2b58:	f1 df       	rcall	.-30     	; 0x2b3c <__fp_splitA>
    2b5a:	08 c0       	rjmp	.+16     	; 0x2b6c <__fp_splitA+0x30>
    2b5c:	16 16       	cp	r1, r22
    2b5e:	17 06       	cpc	r1, r23
    2b60:	18 06       	cpc	r1, r24
    2b62:	99 1f       	adc	r25, r25
    2b64:	f1 cf       	rjmp	.-30     	; 0x2b48 <__fp_splitA+0xc>
    2b66:	86 95       	lsr	r24
    2b68:	71 05       	cpc	r23, r1
    2b6a:	61 05       	cpc	r22, r1
    2b6c:	08 94       	sec
    2b6e:	08 95       	ret

00002b70 <__fp_zero>:
    2b70:	e8 94       	clt

00002b72 <__fp_szero>:
    2b72:	bb 27       	eor	r27, r27
    2b74:	66 27       	eor	r22, r22
    2b76:	77 27       	eor	r23, r23
    2b78:	cb 01       	movw	r24, r22
    2b7a:	97 f9       	bld	r25, 7
    2b7c:	08 95       	ret

00002b7e <__gesf2>:
    2b7e:	b2 df       	rcall	.-156    	; 0x2ae4 <__fp_cmp>
    2b80:	08 f4       	brcc	.+2      	; 0x2b84 <__gesf2+0x6>
    2b82:	8f ef       	ldi	r24, 0xFF	; 255
    2b84:	08 95       	ret

00002b86 <__mulsf3>:
    2b86:	0b d0       	rcall	.+22     	; 0x2b9e <__mulsf3x>
    2b88:	78 c0       	rjmp	.+240    	; 0x2c7a <__fp_round>
    2b8a:	69 d0       	rcall	.+210    	; 0x2c5e <__fp_pscA>
    2b8c:	28 f0       	brcs	.+10     	; 0x2b98 <__mulsf3+0x12>
    2b8e:	6e d0       	rcall	.+220    	; 0x2c6c <__fp_pscB>
    2b90:	18 f0       	brcs	.+6      	; 0x2b98 <__mulsf3+0x12>
    2b92:	95 23       	and	r25, r21
    2b94:	09 f0       	breq	.+2      	; 0x2b98 <__mulsf3+0x12>
    2b96:	5a c0       	rjmp	.+180    	; 0x2c4c <__fp_inf>
    2b98:	5f c0       	rjmp	.+190    	; 0x2c58 <__fp_nan>
    2b9a:	11 24       	eor	r1, r1
    2b9c:	ea cf       	rjmp	.-44     	; 0x2b72 <__fp_szero>

00002b9e <__mulsf3x>:
    2b9e:	c6 df       	rcall	.-116    	; 0x2b2c <__fp_split3>
    2ba0:	a0 f3       	brcs	.-24     	; 0x2b8a <__mulsf3+0x4>

00002ba2 <__mulsf3_pse>:
    2ba2:	95 9f       	mul	r25, r21
    2ba4:	d1 f3       	breq	.-12     	; 0x2b9a <__mulsf3+0x14>
    2ba6:	95 0f       	add	r25, r21
    2ba8:	50 e0       	ldi	r21, 0x00	; 0
    2baa:	55 1f       	adc	r21, r21
    2bac:	62 9f       	mul	r22, r18
    2bae:	f0 01       	movw	r30, r0
    2bb0:	72 9f       	mul	r23, r18
    2bb2:	bb 27       	eor	r27, r27
    2bb4:	f0 0d       	add	r31, r0
    2bb6:	b1 1d       	adc	r27, r1
    2bb8:	63 9f       	mul	r22, r19
    2bba:	aa 27       	eor	r26, r26
    2bbc:	f0 0d       	add	r31, r0
    2bbe:	b1 1d       	adc	r27, r1
    2bc0:	aa 1f       	adc	r26, r26
    2bc2:	64 9f       	mul	r22, r20
    2bc4:	66 27       	eor	r22, r22
    2bc6:	b0 0d       	add	r27, r0
    2bc8:	a1 1d       	adc	r26, r1
    2bca:	66 1f       	adc	r22, r22
    2bcc:	82 9f       	mul	r24, r18
    2bce:	22 27       	eor	r18, r18
    2bd0:	b0 0d       	add	r27, r0
    2bd2:	a1 1d       	adc	r26, r1
    2bd4:	62 1f       	adc	r22, r18
    2bd6:	73 9f       	mul	r23, r19
    2bd8:	b0 0d       	add	r27, r0
    2bda:	a1 1d       	adc	r26, r1
    2bdc:	62 1f       	adc	r22, r18
    2bde:	83 9f       	mul	r24, r19
    2be0:	a0 0d       	add	r26, r0
    2be2:	61 1d       	adc	r22, r1
    2be4:	22 1f       	adc	r18, r18
    2be6:	74 9f       	mul	r23, r20
    2be8:	33 27       	eor	r19, r19
    2bea:	a0 0d       	add	r26, r0
    2bec:	61 1d       	adc	r22, r1
    2bee:	23 1f       	adc	r18, r19
    2bf0:	84 9f       	mul	r24, r20
    2bf2:	60 0d       	add	r22, r0
    2bf4:	21 1d       	adc	r18, r1
    2bf6:	82 2f       	mov	r24, r18
    2bf8:	76 2f       	mov	r23, r22
    2bfa:	6a 2f       	mov	r22, r26
    2bfc:	11 24       	eor	r1, r1
    2bfe:	9f 57       	subi	r25, 0x7F	; 127
    2c00:	50 40       	sbci	r21, 0x00	; 0
    2c02:	8a f0       	brmi	.+34     	; 0x2c26 <__mulsf3_pse+0x84>
    2c04:	e1 f0       	breq	.+56     	; 0x2c3e <__mulsf3_pse+0x9c>
    2c06:	88 23       	and	r24, r24
    2c08:	4a f0       	brmi	.+18     	; 0x2c1c <__mulsf3_pse+0x7a>
    2c0a:	ee 0f       	add	r30, r30
    2c0c:	ff 1f       	adc	r31, r31
    2c0e:	bb 1f       	adc	r27, r27
    2c10:	66 1f       	adc	r22, r22
    2c12:	77 1f       	adc	r23, r23
    2c14:	88 1f       	adc	r24, r24
    2c16:	91 50       	subi	r25, 0x01	; 1
    2c18:	50 40       	sbci	r21, 0x00	; 0
    2c1a:	a9 f7       	brne	.-22     	; 0x2c06 <__mulsf3_pse+0x64>
    2c1c:	9e 3f       	cpi	r25, 0xFE	; 254
    2c1e:	51 05       	cpc	r21, r1
    2c20:	70 f0       	brcs	.+28     	; 0x2c3e <__mulsf3_pse+0x9c>
    2c22:	14 c0       	rjmp	.+40     	; 0x2c4c <__fp_inf>
    2c24:	a6 cf       	rjmp	.-180    	; 0x2b72 <__fp_szero>
    2c26:	5f 3f       	cpi	r21, 0xFF	; 255
    2c28:	ec f3       	brlt	.-6      	; 0x2c24 <__mulsf3_pse+0x82>
    2c2a:	98 3e       	cpi	r25, 0xE8	; 232
    2c2c:	dc f3       	brlt	.-10     	; 0x2c24 <__mulsf3_pse+0x82>
    2c2e:	86 95       	lsr	r24
    2c30:	77 95       	ror	r23
    2c32:	67 95       	ror	r22
    2c34:	b7 95       	ror	r27
    2c36:	f7 95       	ror	r31
    2c38:	e7 95       	ror	r30
    2c3a:	9f 5f       	subi	r25, 0xFF	; 255
    2c3c:	c1 f7       	brne	.-16     	; 0x2c2e <__mulsf3_pse+0x8c>
    2c3e:	fe 2b       	or	r31, r30
    2c40:	88 0f       	add	r24, r24
    2c42:	91 1d       	adc	r25, r1
    2c44:	96 95       	lsr	r25
    2c46:	87 95       	ror	r24
    2c48:	97 f9       	bld	r25, 7
    2c4a:	08 95       	ret

00002c4c <__fp_inf>:
    2c4c:	97 f9       	bld	r25, 7
    2c4e:	9f 67       	ori	r25, 0x7F	; 127
    2c50:	80 e8       	ldi	r24, 0x80	; 128
    2c52:	70 e0       	ldi	r23, 0x00	; 0
    2c54:	60 e0       	ldi	r22, 0x00	; 0
    2c56:	08 95       	ret

00002c58 <__fp_nan>:
    2c58:	9f ef       	ldi	r25, 0xFF	; 255
    2c5a:	80 ec       	ldi	r24, 0xC0	; 192
    2c5c:	08 95       	ret

00002c5e <__fp_pscA>:
    2c5e:	00 24       	eor	r0, r0
    2c60:	0a 94       	dec	r0
    2c62:	16 16       	cp	r1, r22
    2c64:	17 06       	cpc	r1, r23
    2c66:	18 06       	cpc	r1, r24
    2c68:	09 06       	cpc	r0, r25
    2c6a:	08 95       	ret

00002c6c <__fp_pscB>:
    2c6c:	00 24       	eor	r0, r0
    2c6e:	0a 94       	dec	r0
    2c70:	12 16       	cp	r1, r18
    2c72:	13 06       	cpc	r1, r19
    2c74:	14 06       	cpc	r1, r20
    2c76:	05 06       	cpc	r0, r21
    2c78:	08 95       	ret

00002c7a <__fp_round>:
    2c7a:	09 2e       	mov	r0, r25
    2c7c:	03 94       	inc	r0
    2c7e:	00 0c       	add	r0, r0
    2c80:	11 f4       	brne	.+4      	; 0x2c86 <__fp_round+0xc>
    2c82:	88 23       	and	r24, r24
    2c84:	52 f0       	brmi	.+20     	; 0x2c9a <__fp_round+0x20>
    2c86:	bb 0f       	add	r27, r27
    2c88:	40 f4       	brcc	.+16     	; 0x2c9a <__fp_round+0x20>
    2c8a:	bf 2b       	or	r27, r31
    2c8c:	11 f4       	brne	.+4      	; 0x2c92 <__fp_round+0x18>
    2c8e:	60 ff       	sbrs	r22, 0
    2c90:	04 c0       	rjmp	.+8      	; 0x2c9a <__fp_round+0x20>
    2c92:	6f 5f       	subi	r22, 0xFF	; 255
    2c94:	7f 4f       	sbci	r23, 0xFF	; 255
    2c96:	8f 4f       	sbci	r24, 0xFF	; 255
    2c98:	9f 4f       	sbci	r25, 0xFF	; 255
    2c9a:	08 95       	ret

00002c9c <__divmodhi4>:
    2c9c:	97 fb       	bst	r25, 7
    2c9e:	09 2e       	mov	r0, r25
    2ca0:	07 26       	eor	r0, r23
    2ca2:	0a d0       	rcall	.+20     	; 0x2cb8 <__divmodhi4_neg1>
    2ca4:	77 fd       	sbrc	r23, 7
    2ca6:	04 d0       	rcall	.+8      	; 0x2cb0 <__divmodhi4_neg2>
    2ca8:	0c d0       	rcall	.+24     	; 0x2cc2 <__udivmodhi4>
    2caa:	06 d0       	rcall	.+12     	; 0x2cb8 <__divmodhi4_neg1>
    2cac:	00 20       	and	r0, r0
    2cae:	1a f4       	brpl	.+6      	; 0x2cb6 <__divmodhi4_exit>

00002cb0 <__divmodhi4_neg2>:
    2cb0:	70 95       	com	r23
    2cb2:	61 95       	neg	r22
    2cb4:	7f 4f       	sbci	r23, 0xFF	; 255

00002cb6 <__divmodhi4_exit>:
    2cb6:	08 95       	ret

00002cb8 <__divmodhi4_neg1>:
    2cb8:	f6 f7       	brtc	.-4      	; 0x2cb6 <__divmodhi4_exit>
    2cba:	90 95       	com	r25
    2cbc:	81 95       	neg	r24
    2cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    2cc0:	08 95       	ret

00002cc2 <__udivmodhi4>:
    2cc2:	aa 1b       	sub	r26, r26
    2cc4:	bb 1b       	sub	r27, r27
    2cc6:	51 e1       	ldi	r21, 0x11	; 17
    2cc8:	07 c0       	rjmp	.+14     	; 0x2cd8 <__udivmodhi4_ep>

00002cca <__udivmodhi4_loop>:
    2cca:	aa 1f       	adc	r26, r26
    2ccc:	bb 1f       	adc	r27, r27
    2cce:	a6 17       	cp	r26, r22
    2cd0:	b7 07       	cpc	r27, r23
    2cd2:	10 f0       	brcs	.+4      	; 0x2cd8 <__udivmodhi4_ep>
    2cd4:	a6 1b       	sub	r26, r22
    2cd6:	b7 0b       	sbc	r27, r23

00002cd8 <__udivmodhi4_ep>:
    2cd8:	88 1f       	adc	r24, r24
    2cda:	99 1f       	adc	r25, r25
    2cdc:	5a 95       	dec	r21
    2cde:	a9 f7       	brne	.-22     	; 0x2cca <__udivmodhi4_loop>
    2ce0:	80 95       	com	r24
    2ce2:	90 95       	com	r25
    2ce4:	bc 01       	movw	r22, r24
    2ce6:	cd 01       	movw	r24, r26
    2ce8:	08 95       	ret

00002cea <do_rand>:
    2cea:	a0 e0       	ldi	r26, 0x00	; 0
    2cec:	b0 e0       	ldi	r27, 0x00	; 0
    2cee:	eb e7       	ldi	r30, 0x7B	; 123
    2cf0:	f6 e1       	ldi	r31, 0x16	; 22
    2cf2:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <__prologue_saves__+0x10>
    2cf6:	ec 01       	movw	r28, r24
    2cf8:	a8 80       	ld	r10, Y
    2cfa:	b9 80       	ldd	r11, Y+1	; 0x01
    2cfc:	ca 80       	ldd	r12, Y+2	; 0x02
    2cfe:	db 80       	ldd	r13, Y+3	; 0x03
    2d00:	a1 14       	cp	r10, r1
    2d02:	b1 04       	cpc	r11, r1
    2d04:	c1 04       	cpc	r12, r1
    2d06:	d1 04       	cpc	r13, r1
    2d08:	41 f4       	brne	.+16     	; 0x2d1a <do_rand+0x30>
    2d0a:	84 e2       	ldi	r24, 0x24	; 36
    2d0c:	a8 2e       	mov	r10, r24
    2d0e:	89 ed       	ldi	r24, 0xD9	; 217
    2d10:	b8 2e       	mov	r11, r24
    2d12:	8b e5       	ldi	r24, 0x5B	; 91
    2d14:	c8 2e       	mov	r12, r24
    2d16:	87 e0       	ldi	r24, 0x07	; 7
    2d18:	d8 2e       	mov	r13, r24
    2d1a:	c6 01       	movw	r24, r12
    2d1c:	b5 01       	movw	r22, r10
    2d1e:	2d e1       	ldi	r18, 0x1D	; 29
    2d20:	33 ef       	ldi	r19, 0xF3	; 243
    2d22:	41 e0       	ldi	r20, 0x01	; 1
    2d24:	50 e0       	ldi	r21, 0x00	; 0
    2d26:	0e 94 9f 19 	call	0x333e	; 0x333e <__divmodsi4>
    2d2a:	27 ea       	ldi	r18, 0xA7	; 167
    2d2c:	31 e4       	ldi	r19, 0x41	; 65
    2d2e:	40 e0       	ldi	r20, 0x00	; 0
    2d30:	50 e0       	ldi	r21, 0x00	; 0
    2d32:	0e 94 80 19 	call	0x3300	; 0x3300 <__mulsi3>
    2d36:	7b 01       	movw	r14, r22
    2d38:	8c 01       	movw	r16, r24
    2d3a:	c6 01       	movw	r24, r12
    2d3c:	b5 01       	movw	r22, r10
    2d3e:	2d e1       	ldi	r18, 0x1D	; 29
    2d40:	33 ef       	ldi	r19, 0xF3	; 243
    2d42:	41 e0       	ldi	r20, 0x01	; 1
    2d44:	50 e0       	ldi	r21, 0x00	; 0
    2d46:	0e 94 9f 19 	call	0x333e	; 0x333e <__divmodsi4>
    2d4a:	ca 01       	movw	r24, r20
    2d4c:	b9 01       	movw	r22, r18
    2d4e:	2c ee       	ldi	r18, 0xEC	; 236
    2d50:	34 ef       	ldi	r19, 0xF4	; 244
    2d52:	4f ef       	ldi	r20, 0xFF	; 255
    2d54:	5f ef       	ldi	r21, 0xFF	; 255
    2d56:	0e 94 80 19 	call	0x3300	; 0x3300 <__mulsi3>
    2d5a:	6e 0d       	add	r22, r14
    2d5c:	7f 1d       	adc	r23, r15
    2d5e:	80 1f       	adc	r24, r16
    2d60:	91 1f       	adc	r25, r17
    2d62:	97 ff       	sbrs	r25, 7
    2d64:	04 c0       	rjmp	.+8      	; 0x2d6e <do_rand+0x84>
    2d66:	61 50       	subi	r22, 0x01	; 1
    2d68:	70 40       	sbci	r23, 0x00	; 0
    2d6a:	80 40       	sbci	r24, 0x00	; 0
    2d6c:	90 48       	sbci	r25, 0x80	; 128
    2d6e:	68 83       	st	Y, r22
    2d70:	79 83       	std	Y+1, r23	; 0x01
    2d72:	8a 83       	std	Y+2, r24	; 0x02
    2d74:	9b 83       	std	Y+3, r25	; 0x03
    2d76:	9b 01       	movw	r18, r22
    2d78:	3f 77       	andi	r19, 0x7F	; 127
    2d7a:	c9 01       	movw	r24, r18
    2d7c:	cd b7       	in	r28, 0x3d	; 61
    2d7e:	de b7       	in	r29, 0x3e	; 62
    2d80:	ea e0       	ldi	r30, 0x0A	; 10
    2d82:	0c 94 de 19 	jmp	0x33bc	; 0x33bc <__epilogue_restores__+0x10>

00002d86 <rand_r>:
    2d86:	0e 94 75 16 	call	0x2cea	; 0x2cea <do_rand>
    2d8a:	08 95       	ret

00002d8c <rand>:
    2d8c:	84 e6       	ldi	r24, 0x64	; 100
    2d8e:	91 e0       	ldi	r25, 0x01	; 1
    2d90:	0e 94 75 16 	call	0x2cea	; 0x2cea <do_rand>
    2d94:	08 95       	ret

00002d96 <srand>:
    2d96:	a0 e0       	ldi	r26, 0x00	; 0
    2d98:	b0 e0       	ldi	r27, 0x00	; 0
    2d9a:	80 93 64 01 	sts	0x0164, r24
    2d9e:	90 93 65 01 	sts	0x0165, r25
    2da2:	a0 93 66 01 	sts	0x0166, r26
    2da6:	b0 93 67 01 	sts	0x0167, r27
    2daa:	08 95       	ret

00002dac <memcpy_P>:
    2dac:	fb 01       	movw	r30, r22
    2dae:	dc 01       	movw	r26, r24
    2db0:	02 c0       	rjmp	.+4      	; 0x2db6 <memcpy_P+0xa>
    2db2:	05 90       	lpm	r0, Z+
    2db4:	0d 92       	st	X+, r0
    2db6:	41 50       	subi	r20, 0x01	; 1
    2db8:	50 40       	sbci	r21, 0x00	; 0
    2dba:	d8 f7       	brcc	.-10     	; 0x2db2 <memcpy_P+0x6>
    2dbc:	08 95       	ret

00002dbe <sprintf>:
    2dbe:	ae e0       	ldi	r26, 0x0E	; 14
    2dc0:	b0 e0       	ldi	r27, 0x00	; 0
    2dc2:	e5 ee       	ldi	r30, 0xE5	; 229
    2dc4:	f6 e1       	ldi	r31, 0x16	; 22
    2dc6:	0c 94 c8 19 	jmp	0x3390	; 0x3390 <__prologue_saves__+0x1c>
    2dca:	0d 89       	ldd	r16, Y+21	; 0x15
    2dcc:	1e 89       	ldd	r17, Y+22	; 0x16
    2dce:	86 e0       	ldi	r24, 0x06	; 6
    2dd0:	8c 83       	std	Y+4, r24	; 0x04
    2dd2:	1a 83       	std	Y+2, r17	; 0x02
    2dd4:	09 83       	std	Y+1, r16	; 0x01
    2dd6:	8f ef       	ldi	r24, 0xFF	; 255
    2dd8:	9f e7       	ldi	r25, 0x7F	; 127
    2dda:	9e 83       	std	Y+6, r25	; 0x06
    2ddc:	8d 83       	std	Y+5, r24	; 0x05
    2dde:	9e 01       	movw	r18, r28
    2de0:	27 5e       	subi	r18, 0xE7	; 231
    2de2:	3f 4f       	sbci	r19, 0xFF	; 255
    2de4:	ce 01       	movw	r24, r28
    2de6:	01 96       	adiw	r24, 0x01	; 1
    2de8:	6f 89       	ldd	r22, Y+23	; 0x17
    2dea:	78 8d       	ldd	r23, Y+24	; 0x18
    2dec:	a9 01       	movw	r20, r18
    2dee:	0e 94 03 17 	call	0x2e06	; 0x2e06 <vfprintf>
    2df2:	2f 81       	ldd	r18, Y+7	; 0x07
    2df4:	38 85       	ldd	r19, Y+8	; 0x08
    2df6:	02 0f       	add	r16, r18
    2df8:	13 1f       	adc	r17, r19
    2dfa:	f8 01       	movw	r30, r16
    2dfc:	10 82       	st	Z, r1
    2dfe:	2e 96       	adiw	r28, 0x0e	; 14
    2e00:	e4 e0       	ldi	r30, 0x04	; 4
    2e02:	0c 94 e4 19 	jmp	0x33c8	; 0x33c8 <__epilogue_restores__+0x1c>

00002e06 <vfprintf>:
    2e06:	ab e0       	ldi	r26, 0x0B	; 11
    2e08:	b0 e0       	ldi	r27, 0x00	; 0
    2e0a:	e9 e0       	ldi	r30, 0x09	; 9
    2e0c:	f7 e1       	ldi	r31, 0x17	; 23
    2e0e:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <__prologue_saves__>
    2e12:	3c 01       	movw	r6, r24
    2e14:	2b 01       	movw	r4, r22
    2e16:	5a 01       	movw	r10, r20
    2e18:	fc 01       	movw	r30, r24
    2e1a:	17 82       	std	Z+7, r1	; 0x07
    2e1c:	16 82       	std	Z+6, r1	; 0x06
    2e1e:	83 81       	ldd	r24, Z+3	; 0x03
    2e20:	81 fd       	sbrc	r24, 1
    2e22:	03 c0       	rjmp	.+6      	; 0x2e2a <vfprintf+0x24>
    2e24:	6f ef       	ldi	r22, 0xFF	; 255
    2e26:	7f ef       	ldi	r23, 0xFF	; 255
    2e28:	c6 c1       	rjmp	.+908    	; 0x31b6 <vfprintf+0x3b0>
    2e2a:	9a e0       	ldi	r25, 0x0A	; 10
    2e2c:	89 2e       	mov	r8, r25
    2e2e:	1e 01       	movw	r2, r28
    2e30:	08 94       	sec
    2e32:	21 1c       	adc	r2, r1
    2e34:	31 1c       	adc	r3, r1
    2e36:	f3 01       	movw	r30, r6
    2e38:	23 81       	ldd	r18, Z+3	; 0x03
    2e3a:	f2 01       	movw	r30, r4
    2e3c:	23 fd       	sbrc	r18, 3
    2e3e:	85 91       	lpm	r24, Z+
    2e40:	23 ff       	sbrs	r18, 3
    2e42:	81 91       	ld	r24, Z+
    2e44:	2f 01       	movw	r4, r30
    2e46:	88 23       	and	r24, r24
    2e48:	09 f4       	brne	.+2      	; 0x2e4c <vfprintf+0x46>
    2e4a:	b2 c1       	rjmp	.+868    	; 0x31b0 <vfprintf+0x3aa>
    2e4c:	85 32       	cpi	r24, 0x25	; 37
    2e4e:	39 f4       	brne	.+14     	; 0x2e5e <vfprintf+0x58>
    2e50:	23 fd       	sbrc	r18, 3
    2e52:	85 91       	lpm	r24, Z+
    2e54:	23 ff       	sbrs	r18, 3
    2e56:	81 91       	ld	r24, Z+
    2e58:	2f 01       	movw	r4, r30
    2e5a:	85 32       	cpi	r24, 0x25	; 37
    2e5c:	29 f4       	brne	.+10     	; 0x2e68 <vfprintf+0x62>
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	b3 01       	movw	r22, r6
    2e62:	0e 94 f6 18 	call	0x31ec	; 0x31ec <fputc>
    2e66:	e7 cf       	rjmp	.-50     	; 0x2e36 <vfprintf+0x30>
    2e68:	98 2f       	mov	r25, r24
    2e6a:	ff 24       	eor	r15, r15
    2e6c:	ee 24       	eor	r14, r14
    2e6e:	99 24       	eor	r9, r9
    2e70:	ff e1       	ldi	r31, 0x1F	; 31
    2e72:	ff 15       	cp	r31, r15
    2e74:	d0 f0       	brcs	.+52     	; 0x2eaa <vfprintf+0xa4>
    2e76:	9b 32       	cpi	r25, 0x2B	; 43
    2e78:	69 f0       	breq	.+26     	; 0x2e94 <vfprintf+0x8e>
    2e7a:	9c 32       	cpi	r25, 0x2C	; 44
    2e7c:	28 f4       	brcc	.+10     	; 0x2e88 <vfprintf+0x82>
    2e7e:	90 32       	cpi	r25, 0x20	; 32
    2e80:	59 f0       	breq	.+22     	; 0x2e98 <vfprintf+0x92>
    2e82:	93 32       	cpi	r25, 0x23	; 35
    2e84:	91 f4       	brne	.+36     	; 0x2eaa <vfprintf+0xa4>
    2e86:	0e c0       	rjmp	.+28     	; 0x2ea4 <vfprintf+0x9e>
    2e88:	9d 32       	cpi	r25, 0x2D	; 45
    2e8a:	49 f0       	breq	.+18     	; 0x2e9e <vfprintf+0x98>
    2e8c:	90 33       	cpi	r25, 0x30	; 48
    2e8e:	69 f4       	brne	.+26     	; 0x2eaa <vfprintf+0xa4>
    2e90:	41 e0       	ldi	r20, 0x01	; 1
    2e92:	24 c0       	rjmp	.+72     	; 0x2edc <vfprintf+0xd6>
    2e94:	52 e0       	ldi	r21, 0x02	; 2
    2e96:	f5 2a       	or	r15, r21
    2e98:	84 e0       	ldi	r24, 0x04	; 4
    2e9a:	f8 2a       	or	r15, r24
    2e9c:	28 c0       	rjmp	.+80     	; 0x2eee <vfprintf+0xe8>
    2e9e:	98 e0       	ldi	r25, 0x08	; 8
    2ea0:	f9 2a       	or	r15, r25
    2ea2:	25 c0       	rjmp	.+74     	; 0x2eee <vfprintf+0xe8>
    2ea4:	e0 e1       	ldi	r30, 0x10	; 16
    2ea6:	fe 2a       	or	r15, r30
    2ea8:	22 c0       	rjmp	.+68     	; 0x2eee <vfprintf+0xe8>
    2eaa:	f7 fc       	sbrc	r15, 7
    2eac:	29 c0       	rjmp	.+82     	; 0x2f00 <vfprintf+0xfa>
    2eae:	89 2f       	mov	r24, r25
    2eb0:	80 53       	subi	r24, 0x30	; 48
    2eb2:	8a 30       	cpi	r24, 0x0A	; 10
    2eb4:	70 f4       	brcc	.+28     	; 0x2ed2 <vfprintf+0xcc>
    2eb6:	f6 fe       	sbrs	r15, 6
    2eb8:	05 c0       	rjmp	.+10     	; 0x2ec4 <vfprintf+0xbe>
    2eba:	98 9c       	mul	r9, r8
    2ebc:	90 2c       	mov	r9, r0
    2ebe:	11 24       	eor	r1, r1
    2ec0:	98 0e       	add	r9, r24
    2ec2:	15 c0       	rjmp	.+42     	; 0x2eee <vfprintf+0xe8>
    2ec4:	e8 9c       	mul	r14, r8
    2ec6:	e0 2c       	mov	r14, r0
    2ec8:	11 24       	eor	r1, r1
    2eca:	e8 0e       	add	r14, r24
    2ecc:	f0 e2       	ldi	r31, 0x20	; 32
    2ece:	ff 2a       	or	r15, r31
    2ed0:	0e c0       	rjmp	.+28     	; 0x2eee <vfprintf+0xe8>
    2ed2:	9e 32       	cpi	r25, 0x2E	; 46
    2ed4:	29 f4       	brne	.+10     	; 0x2ee0 <vfprintf+0xda>
    2ed6:	f6 fc       	sbrc	r15, 6
    2ed8:	6b c1       	rjmp	.+726    	; 0x31b0 <vfprintf+0x3aa>
    2eda:	40 e4       	ldi	r20, 0x40	; 64
    2edc:	f4 2a       	or	r15, r20
    2ede:	07 c0       	rjmp	.+14     	; 0x2eee <vfprintf+0xe8>
    2ee0:	9c 36       	cpi	r25, 0x6C	; 108
    2ee2:	19 f4       	brne	.+6      	; 0x2eea <vfprintf+0xe4>
    2ee4:	50 e8       	ldi	r21, 0x80	; 128
    2ee6:	f5 2a       	or	r15, r21
    2ee8:	02 c0       	rjmp	.+4      	; 0x2eee <vfprintf+0xe8>
    2eea:	98 36       	cpi	r25, 0x68	; 104
    2eec:	49 f4       	brne	.+18     	; 0x2f00 <vfprintf+0xfa>
    2eee:	f2 01       	movw	r30, r4
    2ef0:	23 fd       	sbrc	r18, 3
    2ef2:	95 91       	lpm	r25, Z+
    2ef4:	23 ff       	sbrs	r18, 3
    2ef6:	91 91       	ld	r25, Z+
    2ef8:	2f 01       	movw	r4, r30
    2efa:	99 23       	and	r25, r25
    2efc:	09 f0       	breq	.+2      	; 0x2f00 <vfprintf+0xfa>
    2efe:	b8 cf       	rjmp	.-144    	; 0x2e70 <vfprintf+0x6a>
    2f00:	89 2f       	mov	r24, r25
    2f02:	85 54       	subi	r24, 0x45	; 69
    2f04:	83 30       	cpi	r24, 0x03	; 3
    2f06:	18 f0       	brcs	.+6      	; 0x2f0e <vfprintf+0x108>
    2f08:	80 52       	subi	r24, 0x20	; 32
    2f0a:	83 30       	cpi	r24, 0x03	; 3
    2f0c:	38 f4       	brcc	.+14     	; 0x2f1c <vfprintf+0x116>
    2f0e:	44 e0       	ldi	r20, 0x04	; 4
    2f10:	50 e0       	ldi	r21, 0x00	; 0
    2f12:	a4 0e       	add	r10, r20
    2f14:	b5 1e       	adc	r11, r21
    2f16:	5f e3       	ldi	r21, 0x3F	; 63
    2f18:	59 83       	std	Y+1, r21	; 0x01
    2f1a:	0f c0       	rjmp	.+30     	; 0x2f3a <vfprintf+0x134>
    2f1c:	93 36       	cpi	r25, 0x63	; 99
    2f1e:	31 f0       	breq	.+12     	; 0x2f2c <vfprintf+0x126>
    2f20:	93 37       	cpi	r25, 0x73	; 115
    2f22:	79 f0       	breq	.+30     	; 0x2f42 <vfprintf+0x13c>
    2f24:	93 35       	cpi	r25, 0x53	; 83
    2f26:	09 f0       	breq	.+2      	; 0x2f2a <vfprintf+0x124>
    2f28:	56 c0       	rjmp	.+172    	; 0x2fd6 <vfprintf+0x1d0>
    2f2a:	20 c0       	rjmp	.+64     	; 0x2f6c <vfprintf+0x166>
    2f2c:	f5 01       	movw	r30, r10
    2f2e:	80 81       	ld	r24, Z
    2f30:	89 83       	std	Y+1, r24	; 0x01
    2f32:	42 e0       	ldi	r20, 0x02	; 2
    2f34:	50 e0       	ldi	r21, 0x00	; 0
    2f36:	a4 0e       	add	r10, r20
    2f38:	b5 1e       	adc	r11, r21
    2f3a:	61 01       	movw	r12, r2
    2f3c:	01 e0       	ldi	r16, 0x01	; 1
    2f3e:	10 e0       	ldi	r17, 0x00	; 0
    2f40:	12 c0       	rjmp	.+36     	; 0x2f66 <vfprintf+0x160>
    2f42:	f5 01       	movw	r30, r10
    2f44:	c0 80       	ld	r12, Z
    2f46:	d1 80       	ldd	r13, Z+1	; 0x01
    2f48:	f6 fc       	sbrc	r15, 6
    2f4a:	03 c0       	rjmp	.+6      	; 0x2f52 <vfprintf+0x14c>
    2f4c:	6f ef       	ldi	r22, 0xFF	; 255
    2f4e:	7f ef       	ldi	r23, 0xFF	; 255
    2f50:	02 c0       	rjmp	.+4      	; 0x2f56 <vfprintf+0x150>
    2f52:	69 2d       	mov	r22, r9
    2f54:	70 e0       	ldi	r23, 0x00	; 0
    2f56:	42 e0       	ldi	r20, 0x02	; 2
    2f58:	50 e0       	ldi	r21, 0x00	; 0
    2f5a:	a4 0e       	add	r10, r20
    2f5c:	b5 1e       	adc	r11, r21
    2f5e:	c6 01       	movw	r24, r12
    2f60:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <strnlen>
    2f64:	8c 01       	movw	r16, r24
    2f66:	5f e7       	ldi	r21, 0x7F	; 127
    2f68:	f5 22       	and	r15, r21
    2f6a:	14 c0       	rjmp	.+40     	; 0x2f94 <vfprintf+0x18e>
    2f6c:	f5 01       	movw	r30, r10
    2f6e:	c0 80       	ld	r12, Z
    2f70:	d1 80       	ldd	r13, Z+1	; 0x01
    2f72:	f6 fc       	sbrc	r15, 6
    2f74:	03 c0       	rjmp	.+6      	; 0x2f7c <vfprintf+0x176>
    2f76:	6f ef       	ldi	r22, 0xFF	; 255
    2f78:	7f ef       	ldi	r23, 0xFF	; 255
    2f7a:	02 c0       	rjmp	.+4      	; 0x2f80 <vfprintf+0x17a>
    2f7c:	69 2d       	mov	r22, r9
    2f7e:	70 e0       	ldi	r23, 0x00	; 0
    2f80:	42 e0       	ldi	r20, 0x02	; 2
    2f82:	50 e0       	ldi	r21, 0x00	; 0
    2f84:	a4 0e       	add	r10, r20
    2f86:	b5 1e       	adc	r11, r21
    2f88:	c6 01       	movw	r24, r12
    2f8a:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <strnlen_P>
    2f8e:	8c 01       	movw	r16, r24
    2f90:	50 e8       	ldi	r21, 0x80	; 128
    2f92:	f5 2a       	or	r15, r21
    2f94:	f3 fe       	sbrs	r15, 3
    2f96:	07 c0       	rjmp	.+14     	; 0x2fa6 <vfprintf+0x1a0>
    2f98:	1a c0       	rjmp	.+52     	; 0x2fce <vfprintf+0x1c8>
    2f9a:	80 e2       	ldi	r24, 0x20	; 32
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	b3 01       	movw	r22, r6
    2fa0:	0e 94 f6 18 	call	0x31ec	; 0x31ec <fputc>
    2fa4:	ea 94       	dec	r14
    2fa6:	8e 2d       	mov	r24, r14
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	08 17       	cp	r16, r24
    2fac:	19 07       	cpc	r17, r25
    2fae:	a8 f3       	brcs	.-22     	; 0x2f9a <vfprintf+0x194>
    2fb0:	0e c0       	rjmp	.+28     	; 0x2fce <vfprintf+0x1c8>
    2fb2:	f6 01       	movw	r30, r12
    2fb4:	f7 fc       	sbrc	r15, 7
    2fb6:	85 91       	lpm	r24, Z+
    2fb8:	f7 fe       	sbrs	r15, 7
    2fba:	81 91       	ld	r24, Z+
    2fbc:	6f 01       	movw	r12, r30
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	b3 01       	movw	r22, r6
    2fc2:	0e 94 f6 18 	call	0x31ec	; 0x31ec <fputc>
    2fc6:	e1 10       	cpse	r14, r1
    2fc8:	ea 94       	dec	r14
    2fca:	01 50       	subi	r16, 0x01	; 1
    2fcc:	10 40       	sbci	r17, 0x00	; 0
    2fce:	01 15       	cp	r16, r1
    2fd0:	11 05       	cpc	r17, r1
    2fd2:	79 f7       	brne	.-34     	; 0x2fb2 <vfprintf+0x1ac>
    2fd4:	ea c0       	rjmp	.+468    	; 0x31aa <vfprintf+0x3a4>
    2fd6:	94 36       	cpi	r25, 0x64	; 100
    2fd8:	11 f0       	breq	.+4      	; 0x2fde <vfprintf+0x1d8>
    2fda:	99 36       	cpi	r25, 0x69	; 105
    2fdc:	69 f5       	brne	.+90     	; 0x3038 <vfprintf+0x232>
    2fde:	f7 fe       	sbrs	r15, 7
    2fe0:	08 c0       	rjmp	.+16     	; 0x2ff2 <vfprintf+0x1ec>
    2fe2:	f5 01       	movw	r30, r10
    2fe4:	20 81       	ld	r18, Z
    2fe6:	31 81       	ldd	r19, Z+1	; 0x01
    2fe8:	42 81       	ldd	r20, Z+2	; 0x02
    2fea:	53 81       	ldd	r21, Z+3	; 0x03
    2fec:	84 e0       	ldi	r24, 0x04	; 4
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	0a c0       	rjmp	.+20     	; 0x3006 <vfprintf+0x200>
    2ff2:	f5 01       	movw	r30, r10
    2ff4:	80 81       	ld	r24, Z
    2ff6:	91 81       	ldd	r25, Z+1	; 0x01
    2ff8:	9c 01       	movw	r18, r24
    2ffa:	44 27       	eor	r20, r20
    2ffc:	37 fd       	sbrc	r19, 7
    2ffe:	40 95       	com	r20
    3000:	54 2f       	mov	r21, r20
    3002:	82 e0       	ldi	r24, 0x02	; 2
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	a8 0e       	add	r10, r24
    3008:	b9 1e       	adc	r11, r25
    300a:	9f e6       	ldi	r25, 0x6F	; 111
    300c:	f9 22       	and	r15, r25
    300e:	57 ff       	sbrs	r21, 7
    3010:	09 c0       	rjmp	.+18     	; 0x3024 <vfprintf+0x21e>
    3012:	50 95       	com	r21
    3014:	40 95       	com	r20
    3016:	30 95       	com	r19
    3018:	21 95       	neg	r18
    301a:	3f 4f       	sbci	r19, 0xFF	; 255
    301c:	4f 4f       	sbci	r20, 0xFF	; 255
    301e:	5f 4f       	sbci	r21, 0xFF	; 255
    3020:	e0 e8       	ldi	r30, 0x80	; 128
    3022:	fe 2a       	or	r15, r30
    3024:	ca 01       	movw	r24, r20
    3026:	b9 01       	movw	r22, r18
    3028:	a1 01       	movw	r20, r2
    302a:	2a e0       	ldi	r18, 0x0A	; 10
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	0e 94 22 19 	call	0x3244	; 0x3244 <__ultoa_invert>
    3032:	d8 2e       	mov	r13, r24
    3034:	d2 18       	sub	r13, r2
    3036:	40 c0       	rjmp	.+128    	; 0x30b8 <vfprintf+0x2b2>
    3038:	95 37       	cpi	r25, 0x75	; 117
    303a:	29 f4       	brne	.+10     	; 0x3046 <vfprintf+0x240>
    303c:	1f 2d       	mov	r17, r15
    303e:	1f 7e       	andi	r17, 0xEF	; 239
    3040:	2a e0       	ldi	r18, 0x0A	; 10
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	1d c0       	rjmp	.+58     	; 0x3080 <vfprintf+0x27a>
    3046:	1f 2d       	mov	r17, r15
    3048:	19 7f       	andi	r17, 0xF9	; 249
    304a:	9f 36       	cpi	r25, 0x6F	; 111
    304c:	61 f0       	breq	.+24     	; 0x3066 <vfprintf+0x260>
    304e:	90 37       	cpi	r25, 0x70	; 112
    3050:	20 f4       	brcc	.+8      	; 0x305a <vfprintf+0x254>
    3052:	98 35       	cpi	r25, 0x58	; 88
    3054:	09 f0       	breq	.+2      	; 0x3058 <vfprintf+0x252>
    3056:	ac c0       	rjmp	.+344    	; 0x31b0 <vfprintf+0x3aa>
    3058:	0f c0       	rjmp	.+30     	; 0x3078 <vfprintf+0x272>
    305a:	90 37       	cpi	r25, 0x70	; 112
    305c:	39 f0       	breq	.+14     	; 0x306c <vfprintf+0x266>
    305e:	98 37       	cpi	r25, 0x78	; 120
    3060:	09 f0       	breq	.+2      	; 0x3064 <vfprintf+0x25e>
    3062:	a6 c0       	rjmp	.+332    	; 0x31b0 <vfprintf+0x3aa>
    3064:	04 c0       	rjmp	.+8      	; 0x306e <vfprintf+0x268>
    3066:	28 e0       	ldi	r18, 0x08	; 8
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	0a c0       	rjmp	.+20     	; 0x3080 <vfprintf+0x27a>
    306c:	10 61       	ori	r17, 0x10	; 16
    306e:	14 fd       	sbrc	r17, 4
    3070:	14 60       	ori	r17, 0x04	; 4
    3072:	20 e1       	ldi	r18, 0x10	; 16
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	04 c0       	rjmp	.+8      	; 0x3080 <vfprintf+0x27a>
    3078:	14 fd       	sbrc	r17, 4
    307a:	16 60       	ori	r17, 0x06	; 6
    307c:	20 e1       	ldi	r18, 0x10	; 16
    307e:	32 e0       	ldi	r19, 0x02	; 2
    3080:	17 ff       	sbrs	r17, 7
    3082:	08 c0       	rjmp	.+16     	; 0x3094 <vfprintf+0x28e>
    3084:	f5 01       	movw	r30, r10
    3086:	60 81       	ld	r22, Z
    3088:	71 81       	ldd	r23, Z+1	; 0x01
    308a:	82 81       	ldd	r24, Z+2	; 0x02
    308c:	93 81       	ldd	r25, Z+3	; 0x03
    308e:	44 e0       	ldi	r20, 0x04	; 4
    3090:	50 e0       	ldi	r21, 0x00	; 0
    3092:	08 c0       	rjmp	.+16     	; 0x30a4 <vfprintf+0x29e>
    3094:	f5 01       	movw	r30, r10
    3096:	80 81       	ld	r24, Z
    3098:	91 81       	ldd	r25, Z+1	; 0x01
    309a:	bc 01       	movw	r22, r24
    309c:	80 e0       	ldi	r24, 0x00	; 0
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	42 e0       	ldi	r20, 0x02	; 2
    30a2:	50 e0       	ldi	r21, 0x00	; 0
    30a4:	a4 0e       	add	r10, r20
    30a6:	b5 1e       	adc	r11, r21
    30a8:	a1 01       	movw	r20, r2
    30aa:	0e 94 22 19 	call	0x3244	; 0x3244 <__ultoa_invert>
    30ae:	d8 2e       	mov	r13, r24
    30b0:	d2 18       	sub	r13, r2
    30b2:	8f e7       	ldi	r24, 0x7F	; 127
    30b4:	f8 2e       	mov	r15, r24
    30b6:	f1 22       	and	r15, r17
    30b8:	f6 fe       	sbrs	r15, 6
    30ba:	0b c0       	rjmp	.+22     	; 0x30d2 <vfprintf+0x2cc>
    30bc:	5e ef       	ldi	r21, 0xFE	; 254
    30be:	f5 22       	and	r15, r21
    30c0:	d9 14       	cp	r13, r9
    30c2:	38 f4       	brcc	.+14     	; 0x30d2 <vfprintf+0x2cc>
    30c4:	f4 fe       	sbrs	r15, 4
    30c6:	07 c0       	rjmp	.+14     	; 0x30d6 <vfprintf+0x2d0>
    30c8:	f2 fc       	sbrc	r15, 2
    30ca:	05 c0       	rjmp	.+10     	; 0x30d6 <vfprintf+0x2d0>
    30cc:	8f ee       	ldi	r24, 0xEF	; 239
    30ce:	f8 22       	and	r15, r24
    30d0:	02 c0       	rjmp	.+4      	; 0x30d6 <vfprintf+0x2d0>
    30d2:	1d 2d       	mov	r17, r13
    30d4:	01 c0       	rjmp	.+2      	; 0x30d8 <vfprintf+0x2d2>
    30d6:	19 2d       	mov	r17, r9
    30d8:	f4 fe       	sbrs	r15, 4
    30da:	0d c0       	rjmp	.+26     	; 0x30f6 <vfprintf+0x2f0>
    30dc:	fe 01       	movw	r30, r28
    30de:	ed 0d       	add	r30, r13
    30e0:	f1 1d       	adc	r31, r1
    30e2:	80 81       	ld	r24, Z
    30e4:	80 33       	cpi	r24, 0x30	; 48
    30e6:	19 f4       	brne	.+6      	; 0x30ee <vfprintf+0x2e8>
    30e8:	99 ee       	ldi	r25, 0xE9	; 233
    30ea:	f9 22       	and	r15, r25
    30ec:	08 c0       	rjmp	.+16     	; 0x30fe <vfprintf+0x2f8>
    30ee:	1f 5f       	subi	r17, 0xFF	; 255
    30f0:	f2 fe       	sbrs	r15, 2
    30f2:	05 c0       	rjmp	.+10     	; 0x30fe <vfprintf+0x2f8>
    30f4:	03 c0       	rjmp	.+6      	; 0x30fc <vfprintf+0x2f6>
    30f6:	8f 2d       	mov	r24, r15
    30f8:	86 78       	andi	r24, 0x86	; 134
    30fa:	09 f0       	breq	.+2      	; 0x30fe <vfprintf+0x2f8>
    30fc:	1f 5f       	subi	r17, 0xFF	; 255
    30fe:	0f 2d       	mov	r16, r15
    3100:	f3 fc       	sbrc	r15, 3
    3102:	14 c0       	rjmp	.+40     	; 0x312c <vfprintf+0x326>
    3104:	f0 fe       	sbrs	r15, 0
    3106:	0f c0       	rjmp	.+30     	; 0x3126 <vfprintf+0x320>
    3108:	1e 15       	cp	r17, r14
    310a:	10 f0       	brcs	.+4      	; 0x3110 <vfprintf+0x30a>
    310c:	9d 2c       	mov	r9, r13
    310e:	0b c0       	rjmp	.+22     	; 0x3126 <vfprintf+0x320>
    3110:	9d 2c       	mov	r9, r13
    3112:	9e 0c       	add	r9, r14
    3114:	91 1a       	sub	r9, r17
    3116:	1e 2d       	mov	r17, r14
    3118:	06 c0       	rjmp	.+12     	; 0x3126 <vfprintf+0x320>
    311a:	80 e2       	ldi	r24, 0x20	; 32
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	b3 01       	movw	r22, r6
    3120:	0e 94 f6 18 	call	0x31ec	; 0x31ec <fputc>
    3124:	1f 5f       	subi	r17, 0xFF	; 255
    3126:	1e 15       	cp	r17, r14
    3128:	c0 f3       	brcs	.-16     	; 0x311a <vfprintf+0x314>
    312a:	04 c0       	rjmp	.+8      	; 0x3134 <vfprintf+0x32e>
    312c:	1e 15       	cp	r17, r14
    312e:	10 f4       	brcc	.+4      	; 0x3134 <vfprintf+0x32e>
    3130:	e1 1a       	sub	r14, r17
    3132:	01 c0       	rjmp	.+2      	; 0x3136 <vfprintf+0x330>
    3134:	ee 24       	eor	r14, r14
    3136:	04 ff       	sbrs	r16, 4
    3138:	0f c0       	rjmp	.+30     	; 0x3158 <vfprintf+0x352>
    313a:	80 e3       	ldi	r24, 0x30	; 48
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	b3 01       	movw	r22, r6
    3140:	0e 94 f6 18 	call	0x31ec	; 0x31ec <fputc>
    3144:	02 ff       	sbrs	r16, 2
    3146:	1d c0       	rjmp	.+58     	; 0x3182 <vfprintf+0x37c>
    3148:	01 fd       	sbrc	r16, 1
    314a:	03 c0       	rjmp	.+6      	; 0x3152 <vfprintf+0x34c>
    314c:	88 e7       	ldi	r24, 0x78	; 120
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	0e c0       	rjmp	.+28     	; 0x316e <vfprintf+0x368>
    3152:	88 e5       	ldi	r24, 0x58	; 88
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	0b c0       	rjmp	.+22     	; 0x316e <vfprintf+0x368>
    3158:	80 2f       	mov	r24, r16
    315a:	86 78       	andi	r24, 0x86	; 134
    315c:	91 f0       	breq	.+36     	; 0x3182 <vfprintf+0x37c>
    315e:	01 ff       	sbrs	r16, 1
    3160:	02 c0       	rjmp	.+4      	; 0x3166 <vfprintf+0x360>
    3162:	8b e2       	ldi	r24, 0x2B	; 43
    3164:	01 c0       	rjmp	.+2      	; 0x3168 <vfprintf+0x362>
    3166:	80 e2       	ldi	r24, 0x20	; 32
    3168:	f7 fc       	sbrc	r15, 7
    316a:	8d e2       	ldi	r24, 0x2D	; 45
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	b3 01       	movw	r22, r6
    3170:	0e 94 f6 18 	call	0x31ec	; 0x31ec <fputc>
    3174:	06 c0       	rjmp	.+12     	; 0x3182 <vfprintf+0x37c>
    3176:	80 e3       	ldi	r24, 0x30	; 48
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	b3 01       	movw	r22, r6
    317c:	0e 94 f6 18 	call	0x31ec	; 0x31ec <fputc>
    3180:	9a 94       	dec	r9
    3182:	d9 14       	cp	r13, r9
    3184:	c0 f3       	brcs	.-16     	; 0x3176 <vfprintf+0x370>
    3186:	da 94       	dec	r13
    3188:	f1 01       	movw	r30, r2
    318a:	ed 0d       	add	r30, r13
    318c:	f1 1d       	adc	r31, r1
    318e:	80 81       	ld	r24, Z
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	b3 01       	movw	r22, r6
    3194:	0e 94 f6 18 	call	0x31ec	; 0x31ec <fputc>
    3198:	dd 20       	and	r13, r13
    319a:	a9 f7       	brne	.-22     	; 0x3186 <vfprintf+0x380>
    319c:	06 c0       	rjmp	.+12     	; 0x31aa <vfprintf+0x3a4>
    319e:	80 e2       	ldi	r24, 0x20	; 32
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	b3 01       	movw	r22, r6
    31a4:	0e 94 f6 18 	call	0x31ec	; 0x31ec <fputc>
    31a8:	ea 94       	dec	r14
    31aa:	ee 20       	and	r14, r14
    31ac:	c1 f7       	brne	.-16     	; 0x319e <vfprintf+0x398>
    31ae:	43 ce       	rjmp	.-890    	; 0x2e36 <vfprintf+0x30>
    31b0:	f3 01       	movw	r30, r6
    31b2:	66 81       	ldd	r22, Z+6	; 0x06
    31b4:	77 81       	ldd	r23, Z+7	; 0x07
    31b6:	cb 01       	movw	r24, r22
    31b8:	2b 96       	adiw	r28, 0x0b	; 11
    31ba:	e2 e1       	ldi	r30, 0x12	; 18
    31bc:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__epilogue_restores__>

000031c0 <strnlen_P>:
    31c0:	fc 01       	movw	r30, r24
    31c2:	05 90       	lpm	r0, Z+
    31c4:	61 50       	subi	r22, 0x01	; 1
    31c6:	70 40       	sbci	r23, 0x00	; 0
    31c8:	01 10       	cpse	r0, r1
    31ca:	d8 f7       	brcc	.-10     	; 0x31c2 <strnlen_P+0x2>
    31cc:	80 95       	com	r24
    31ce:	90 95       	com	r25
    31d0:	8e 0f       	add	r24, r30
    31d2:	9f 1f       	adc	r25, r31
    31d4:	08 95       	ret

000031d6 <strnlen>:
    31d6:	fc 01       	movw	r30, r24
    31d8:	61 50       	subi	r22, 0x01	; 1
    31da:	70 40       	sbci	r23, 0x00	; 0
    31dc:	01 90       	ld	r0, Z+
    31de:	01 10       	cpse	r0, r1
    31e0:	d8 f7       	brcc	.-10     	; 0x31d8 <strnlen+0x2>
    31e2:	80 95       	com	r24
    31e4:	90 95       	com	r25
    31e6:	8e 0f       	add	r24, r30
    31e8:	9f 1f       	adc	r25, r31
    31ea:	08 95       	ret

000031ec <fputc>:
    31ec:	0f 93       	push	r16
    31ee:	1f 93       	push	r17
    31f0:	cf 93       	push	r28
    31f2:	df 93       	push	r29
    31f4:	8c 01       	movw	r16, r24
    31f6:	eb 01       	movw	r28, r22
    31f8:	8b 81       	ldd	r24, Y+3	; 0x03
    31fa:	81 ff       	sbrs	r24, 1
    31fc:	1b c0       	rjmp	.+54     	; 0x3234 <fputc+0x48>
    31fe:	82 ff       	sbrs	r24, 2
    3200:	0d c0       	rjmp	.+26     	; 0x321c <fputc+0x30>
    3202:	2e 81       	ldd	r18, Y+6	; 0x06
    3204:	3f 81       	ldd	r19, Y+7	; 0x07
    3206:	8c 81       	ldd	r24, Y+4	; 0x04
    3208:	9d 81       	ldd	r25, Y+5	; 0x05
    320a:	28 17       	cp	r18, r24
    320c:	39 07       	cpc	r19, r25
    320e:	64 f4       	brge	.+24     	; 0x3228 <fputc+0x3c>
    3210:	e8 81       	ld	r30, Y
    3212:	f9 81       	ldd	r31, Y+1	; 0x01
    3214:	01 93       	st	Z+, r16
    3216:	f9 83       	std	Y+1, r31	; 0x01
    3218:	e8 83       	st	Y, r30
    321a:	06 c0       	rjmp	.+12     	; 0x3228 <fputc+0x3c>
    321c:	e8 85       	ldd	r30, Y+8	; 0x08
    321e:	f9 85       	ldd	r31, Y+9	; 0x09
    3220:	80 2f       	mov	r24, r16
    3222:	09 95       	icall
    3224:	89 2b       	or	r24, r25
    3226:	31 f4       	brne	.+12     	; 0x3234 <fputc+0x48>
    3228:	8e 81       	ldd	r24, Y+6	; 0x06
    322a:	9f 81       	ldd	r25, Y+7	; 0x07
    322c:	01 96       	adiw	r24, 0x01	; 1
    322e:	9f 83       	std	Y+7, r25	; 0x07
    3230:	8e 83       	std	Y+6, r24	; 0x06
    3232:	02 c0       	rjmp	.+4      	; 0x3238 <fputc+0x4c>
    3234:	0f ef       	ldi	r16, 0xFF	; 255
    3236:	1f ef       	ldi	r17, 0xFF	; 255
    3238:	c8 01       	movw	r24, r16
    323a:	df 91       	pop	r29
    323c:	cf 91       	pop	r28
    323e:	1f 91       	pop	r17
    3240:	0f 91       	pop	r16
    3242:	08 95       	ret

00003244 <__ultoa_invert>:
    3244:	fa 01       	movw	r30, r20
    3246:	aa 27       	eor	r26, r26
    3248:	28 30       	cpi	r18, 0x08	; 8
    324a:	51 f1       	breq	.+84     	; 0x32a0 <__ultoa_invert+0x5c>
    324c:	20 31       	cpi	r18, 0x10	; 16
    324e:	81 f1       	breq	.+96     	; 0x32b0 <__ultoa_invert+0x6c>
    3250:	e8 94       	clt
    3252:	6f 93       	push	r22
    3254:	6e 7f       	andi	r22, 0xFE	; 254
    3256:	6e 5f       	subi	r22, 0xFE	; 254
    3258:	7f 4f       	sbci	r23, 0xFF	; 255
    325a:	8f 4f       	sbci	r24, 0xFF	; 255
    325c:	9f 4f       	sbci	r25, 0xFF	; 255
    325e:	af 4f       	sbci	r26, 0xFF	; 255
    3260:	b1 e0       	ldi	r27, 0x01	; 1
    3262:	3e d0       	rcall	.+124    	; 0x32e0 <__ultoa_invert+0x9c>
    3264:	b4 e0       	ldi	r27, 0x04	; 4
    3266:	3c d0       	rcall	.+120    	; 0x32e0 <__ultoa_invert+0x9c>
    3268:	67 0f       	add	r22, r23
    326a:	78 1f       	adc	r23, r24
    326c:	89 1f       	adc	r24, r25
    326e:	9a 1f       	adc	r25, r26
    3270:	a1 1d       	adc	r26, r1
    3272:	68 0f       	add	r22, r24
    3274:	79 1f       	adc	r23, r25
    3276:	8a 1f       	adc	r24, r26
    3278:	91 1d       	adc	r25, r1
    327a:	a1 1d       	adc	r26, r1
    327c:	6a 0f       	add	r22, r26
    327e:	71 1d       	adc	r23, r1
    3280:	81 1d       	adc	r24, r1
    3282:	91 1d       	adc	r25, r1
    3284:	a1 1d       	adc	r26, r1
    3286:	20 d0       	rcall	.+64     	; 0x32c8 <__ultoa_invert+0x84>
    3288:	09 f4       	brne	.+2      	; 0x328c <__ultoa_invert+0x48>
    328a:	68 94       	set
    328c:	3f 91       	pop	r19
    328e:	2a e0       	ldi	r18, 0x0A	; 10
    3290:	26 9f       	mul	r18, r22
    3292:	11 24       	eor	r1, r1
    3294:	30 19       	sub	r19, r0
    3296:	30 5d       	subi	r19, 0xD0	; 208
    3298:	31 93       	st	Z+, r19
    329a:	de f6       	brtc	.-74     	; 0x3252 <__ultoa_invert+0xe>
    329c:	cf 01       	movw	r24, r30
    329e:	08 95       	ret
    32a0:	46 2f       	mov	r20, r22
    32a2:	47 70       	andi	r20, 0x07	; 7
    32a4:	40 5d       	subi	r20, 0xD0	; 208
    32a6:	41 93       	st	Z+, r20
    32a8:	b3 e0       	ldi	r27, 0x03	; 3
    32aa:	0f d0       	rcall	.+30     	; 0x32ca <__ultoa_invert+0x86>
    32ac:	c9 f7       	brne	.-14     	; 0x32a0 <__ultoa_invert+0x5c>
    32ae:	f6 cf       	rjmp	.-20     	; 0x329c <__ultoa_invert+0x58>
    32b0:	46 2f       	mov	r20, r22
    32b2:	4f 70       	andi	r20, 0x0F	; 15
    32b4:	40 5d       	subi	r20, 0xD0	; 208
    32b6:	4a 33       	cpi	r20, 0x3A	; 58
    32b8:	18 f0       	brcs	.+6      	; 0x32c0 <__ultoa_invert+0x7c>
    32ba:	49 5d       	subi	r20, 0xD9	; 217
    32bc:	31 fd       	sbrc	r19, 1
    32be:	40 52       	subi	r20, 0x20	; 32
    32c0:	41 93       	st	Z+, r20
    32c2:	02 d0       	rcall	.+4      	; 0x32c8 <__ultoa_invert+0x84>
    32c4:	a9 f7       	brne	.-22     	; 0x32b0 <__ultoa_invert+0x6c>
    32c6:	ea cf       	rjmp	.-44     	; 0x329c <__ultoa_invert+0x58>
    32c8:	b4 e0       	ldi	r27, 0x04	; 4
    32ca:	a6 95       	lsr	r26
    32cc:	97 95       	ror	r25
    32ce:	87 95       	ror	r24
    32d0:	77 95       	ror	r23
    32d2:	67 95       	ror	r22
    32d4:	ba 95       	dec	r27
    32d6:	c9 f7       	brne	.-14     	; 0x32ca <__ultoa_invert+0x86>
    32d8:	00 97       	sbiw	r24, 0x00	; 0
    32da:	61 05       	cpc	r22, r1
    32dc:	71 05       	cpc	r23, r1
    32de:	08 95       	ret
    32e0:	9b 01       	movw	r18, r22
    32e2:	ac 01       	movw	r20, r24
    32e4:	0a 2e       	mov	r0, r26
    32e6:	06 94       	lsr	r0
    32e8:	57 95       	ror	r21
    32ea:	47 95       	ror	r20
    32ec:	37 95       	ror	r19
    32ee:	27 95       	ror	r18
    32f0:	ba 95       	dec	r27
    32f2:	c9 f7       	brne	.-14     	; 0x32e6 <__ultoa_invert+0xa2>
    32f4:	62 0f       	add	r22, r18
    32f6:	73 1f       	adc	r23, r19
    32f8:	84 1f       	adc	r24, r20
    32fa:	95 1f       	adc	r25, r21
    32fc:	a0 1d       	adc	r26, r0
    32fe:	08 95       	ret

00003300 <__mulsi3>:
    3300:	62 9f       	mul	r22, r18
    3302:	d0 01       	movw	r26, r0
    3304:	73 9f       	mul	r23, r19
    3306:	f0 01       	movw	r30, r0
    3308:	82 9f       	mul	r24, r18
    330a:	e0 0d       	add	r30, r0
    330c:	f1 1d       	adc	r31, r1
    330e:	64 9f       	mul	r22, r20
    3310:	e0 0d       	add	r30, r0
    3312:	f1 1d       	adc	r31, r1
    3314:	92 9f       	mul	r25, r18
    3316:	f0 0d       	add	r31, r0
    3318:	83 9f       	mul	r24, r19
    331a:	f0 0d       	add	r31, r0
    331c:	74 9f       	mul	r23, r20
    331e:	f0 0d       	add	r31, r0
    3320:	65 9f       	mul	r22, r21
    3322:	f0 0d       	add	r31, r0
    3324:	99 27       	eor	r25, r25
    3326:	72 9f       	mul	r23, r18
    3328:	b0 0d       	add	r27, r0
    332a:	e1 1d       	adc	r30, r1
    332c:	f9 1f       	adc	r31, r25
    332e:	63 9f       	mul	r22, r19
    3330:	b0 0d       	add	r27, r0
    3332:	e1 1d       	adc	r30, r1
    3334:	f9 1f       	adc	r31, r25
    3336:	bd 01       	movw	r22, r26
    3338:	cf 01       	movw	r24, r30
    333a:	11 24       	eor	r1, r1
    333c:	08 95       	ret

0000333e <__divmodsi4>:
    333e:	97 fb       	bst	r25, 7
    3340:	09 2e       	mov	r0, r25
    3342:	05 26       	eor	r0, r21
    3344:	0e d0       	rcall	.+28     	; 0x3362 <__divmodsi4_neg1>
    3346:	57 fd       	sbrc	r21, 7
    3348:	04 d0       	rcall	.+8      	; 0x3352 <__divmodsi4_neg2>
    334a:	4b d0       	rcall	.+150    	; 0x33e2 <__udivmodsi4>
    334c:	0a d0       	rcall	.+20     	; 0x3362 <__divmodsi4_neg1>
    334e:	00 1c       	adc	r0, r0
    3350:	38 f4       	brcc	.+14     	; 0x3360 <__divmodsi4_exit>

00003352 <__divmodsi4_neg2>:
    3352:	50 95       	com	r21
    3354:	40 95       	com	r20
    3356:	30 95       	com	r19
    3358:	21 95       	neg	r18
    335a:	3f 4f       	sbci	r19, 0xFF	; 255
    335c:	4f 4f       	sbci	r20, 0xFF	; 255
    335e:	5f 4f       	sbci	r21, 0xFF	; 255

00003360 <__divmodsi4_exit>:
    3360:	08 95       	ret

00003362 <__divmodsi4_neg1>:
    3362:	f6 f7       	brtc	.-4      	; 0x3360 <__divmodsi4_exit>
    3364:	90 95       	com	r25
    3366:	80 95       	com	r24
    3368:	70 95       	com	r23
    336a:	61 95       	neg	r22
    336c:	7f 4f       	sbci	r23, 0xFF	; 255
    336e:	8f 4f       	sbci	r24, 0xFF	; 255
    3370:	9f 4f       	sbci	r25, 0xFF	; 255
    3372:	08 95       	ret

00003374 <__prologue_saves__>:
    3374:	2f 92       	push	r2
    3376:	3f 92       	push	r3
    3378:	4f 92       	push	r4
    337a:	5f 92       	push	r5
    337c:	6f 92       	push	r6
    337e:	7f 92       	push	r7
    3380:	8f 92       	push	r8
    3382:	9f 92       	push	r9
    3384:	af 92       	push	r10
    3386:	bf 92       	push	r11
    3388:	cf 92       	push	r12
    338a:	df 92       	push	r13
    338c:	ef 92       	push	r14
    338e:	ff 92       	push	r15
    3390:	0f 93       	push	r16
    3392:	1f 93       	push	r17
    3394:	cf 93       	push	r28
    3396:	df 93       	push	r29
    3398:	cd b7       	in	r28, 0x3d	; 61
    339a:	de b7       	in	r29, 0x3e	; 62
    339c:	ca 1b       	sub	r28, r26
    339e:	db 0b       	sbc	r29, r27
    33a0:	0f b6       	in	r0, 0x3f	; 63
    33a2:	f8 94       	cli
    33a4:	de bf       	out	0x3e, r29	; 62
    33a6:	0f be       	out	0x3f, r0	; 63
    33a8:	cd bf       	out	0x3d, r28	; 61
    33aa:	09 94       	ijmp

000033ac <__epilogue_restores__>:
    33ac:	2a 88       	ldd	r2, Y+18	; 0x12
    33ae:	39 88       	ldd	r3, Y+17	; 0x11
    33b0:	48 88       	ldd	r4, Y+16	; 0x10
    33b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    33b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    33b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    33b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    33ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    33bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    33be:	b9 84       	ldd	r11, Y+9	; 0x09
    33c0:	c8 84       	ldd	r12, Y+8	; 0x08
    33c2:	df 80       	ldd	r13, Y+7	; 0x07
    33c4:	ee 80       	ldd	r14, Y+6	; 0x06
    33c6:	fd 80       	ldd	r15, Y+5	; 0x05
    33c8:	0c 81       	ldd	r16, Y+4	; 0x04
    33ca:	1b 81       	ldd	r17, Y+3	; 0x03
    33cc:	aa 81       	ldd	r26, Y+2	; 0x02
    33ce:	b9 81       	ldd	r27, Y+1	; 0x01
    33d0:	ce 0f       	add	r28, r30
    33d2:	d1 1d       	adc	r29, r1
    33d4:	0f b6       	in	r0, 0x3f	; 63
    33d6:	f8 94       	cli
    33d8:	de bf       	out	0x3e, r29	; 62
    33da:	0f be       	out	0x3f, r0	; 63
    33dc:	cd bf       	out	0x3d, r28	; 61
    33de:	ed 01       	movw	r28, r26
    33e0:	08 95       	ret

000033e2 <__udivmodsi4>:
    33e2:	a1 e2       	ldi	r26, 0x21	; 33
    33e4:	1a 2e       	mov	r1, r26
    33e6:	aa 1b       	sub	r26, r26
    33e8:	bb 1b       	sub	r27, r27
    33ea:	fd 01       	movw	r30, r26
    33ec:	0d c0       	rjmp	.+26     	; 0x3408 <__udivmodsi4_ep>

000033ee <__udivmodsi4_loop>:
    33ee:	aa 1f       	adc	r26, r26
    33f0:	bb 1f       	adc	r27, r27
    33f2:	ee 1f       	adc	r30, r30
    33f4:	ff 1f       	adc	r31, r31
    33f6:	a2 17       	cp	r26, r18
    33f8:	b3 07       	cpc	r27, r19
    33fa:	e4 07       	cpc	r30, r20
    33fc:	f5 07       	cpc	r31, r21
    33fe:	20 f0       	brcs	.+8      	; 0x3408 <__udivmodsi4_ep>
    3400:	a2 1b       	sub	r26, r18
    3402:	b3 0b       	sbc	r27, r19
    3404:	e4 0b       	sbc	r30, r20
    3406:	f5 0b       	sbc	r31, r21

00003408 <__udivmodsi4_ep>:
    3408:	66 1f       	adc	r22, r22
    340a:	77 1f       	adc	r23, r23
    340c:	88 1f       	adc	r24, r24
    340e:	99 1f       	adc	r25, r25
    3410:	1a 94       	dec	r1
    3412:	69 f7       	brne	.-38     	; 0x33ee <__udivmodsi4_loop>
    3414:	60 95       	com	r22
    3416:	70 95       	com	r23
    3418:	80 95       	com	r24
    341a:	90 95       	com	r25
    341c:	9b 01       	movw	r18, r22
    341e:	ac 01       	movw	r20, r24
    3420:	bd 01       	movw	r22, r26
    3422:	cf 01       	movw	r24, r30
    3424:	08 95       	ret

00003426 <_exit>:
    3426:	f8 94       	cli

00003428 <__stop_program>:
    3428:	ff cf       	rjmp	.-2      	; 0x3428 <__stop_program>
