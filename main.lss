
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  000032d2  00003366  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000032d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000208  00800166  00800166  000033cc  2**0
                  ALLOC
  3 .debug_aranges 00000120  00000000  00000000  000033cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006da  00000000  00000000  000034ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000021a3  00000000  00000000  00003bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b36  00000000  00000000  00005d69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001cbd  00000000  00000000  0000689f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000480  00000000  00000000  0000855c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007ef  00000000  00000000  000089dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000021a4  00000000  00000000  000091cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000230  00000000  00000000  0000b36f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__ctors_end>
       4:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
       8:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
       c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      10:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      14:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      18:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      1c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      20:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      24:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      28:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      2c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      30:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      34:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      38:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      3c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      40:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      44:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      48:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      4c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      50:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      54:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      58:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      5c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      60:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>
      64:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__bad_interrupt>

00000068 <Font5x7>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
      f8:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     188:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     198:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     1d8:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..

00000248 <bmp_oslogo>:
	...
     278:	00 00 00 80 80 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0     ................
     288:	e0 e0 e0 e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00     ................
	...
     2f0:	00 80 c0 e0 f0 f8 fc fc fe ff ff ff ff ff ff ff     ................
     300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     310:	ff ff ff ff ff fe fc fc f8 f0 e0 c0 80 00 00 00     ................
	...
     36c:	00 80 f0 fc fe ff ff ff ff ff ff ff ff ff ff ff     ................
     37c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     38c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     39c:	ff fe fc f0 c0 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     3ec:	fc ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3fc:	ff ff ff 1f 07 03 01 01 00 00 00 00 00 00 00 01     ................
     40c:	03 07 1f ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     41c:	ff ff ff ff ff fc 00 00 00 00 00 00 00 00 00 00     ................
	...
     46c:	1f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     47c:	ff ff ff fc f0 e0 c0 80 80 00 00 00 00 00 80 c0     ................
     48c:	c0 f0 fc ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     49c:	ff ff ff ff ff 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
	...
     4ec:	00 01 07 1f 7f ff ff ff ff ff ff ff ff ff ff ff     ................
     4fc:	ff ff ff ff ff ff 7f 0f 03 00 00 00 00 01 0f 3f     ...............?
     50c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     51c:	ff 7f 1f 07 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     570:	00 00 01 03 07 0f 1f 3f 3f 7f ff ff ff ff ff 7f     .......??.......
     580:	0f 03 00 00 00 00 00 00 00 00 00 00 01 0f 3f ff     ..............?.
     590:	ff ff ff ff 7f 7f 3f 1f 0f 07 03 01 00 00 00 00     ......?.........
	...
     5fc:	00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     60c:	00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...

00000648 <font_Earthbound_12x19_48to57>:
     648:	00 e0 f0 38 0c 0c 0c 0c 38 f8 c0 00 00 1f 7f e0     ...8....8.......
     658:	80 80 80 80 e0 ff 1f 00 00 00 00 01 01 01 01 01     ................
     668:	00 00 00 00 00 10 18 18 fc fc 00 00 00 00 00 00     ................
     678:	00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00     ................
     688:	01 01 00 00 00 00 00 00 00 08 1c 0c 0c 0c 0c 8c     ................
     698:	f8 f0 00 00 00 f0 f8 9c 8c 86 86 83 83 80 00 00     ................
     6a8:	00 01 01 01 01 01 01 01 01 01 00 00 00 08 1c 0c     ................
     6b8:	0c 0c 0c 8c f8 f0 00 00 00 80 c0 80 81 83 83 c7     ................
     6c8:	ff 7c 00 00 00 00 01 01 01 01 01 01 00 00 00 00     .|..............
     6d8:	00 00 00 80 c0 70 38 fc fc 00 00 00 00 1c 1e 1b     .....p8.........
     6e8:	11 18 10 ff ff 10 18 00 00 00 00 00 00 00 00 01     ................
     6f8:	01 00 00 00 00 00 f4 fc 1c 0c 0c 0c 0c 00 00 00     ................
     708:	00 80 c3 83 83 83 83 c7 fe 78 00 00 00 00 00 01     .........x......
     718:	01 01 01 01 00 00 00 00 00 c0 f0 78 1c 0c 0c 0c     ...........x....
     728:	08 00 00 00 00 3f ff c3 83 83 83 c3 fe 7c 00 00     .....?.......|..
     738:	00 00 00 01 01 01 01 01 00 00 00 00 00 0c 0c 0c     ................
     748:	0c 8c cc 7c 3c 0c 00 00 00 00 80 f0 7c 0f 03 00     ...|<.......|...
     758:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
     768:	00 f0 f8 1c 0c 0c 0c 0c f8 f0 00 00 00 f8 ff 8f     ................
     778:	07 06 06 8f ff f8 00 00 00 00 01 03 03 03 03 01     ................
     788:	01 00 00 00 00 f0 f8 1c 0c 0c 0c 1c f8 e0 00 00     ................
     798:	00 01 87 8e 8c 8c 8c ee 7f 1f 00 00 00 00 01 01     ................
     7a8:	01 01 01 00 00 00 00 00                             ........

000007b0 <Font5x7>:
     7b0:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     7c0:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     7d0:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     7e0:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     7f0:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     800:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     810:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     820:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     830:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     840:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     850:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     860:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     870:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     880:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     890:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     8a0:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     8b0:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     8c0:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     8d0:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     8e0:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     8f0:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     900:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     910:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     920:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     930:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     940:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     950:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     960:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     970:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     980:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..

00000990 <Liberation_Sans15x21_Numbers>:
     990:	06 00 00 00 00 00 00 00 00 0f 00 00 0f 00 00 0f     ................
     9a0:	00 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     9bc:	00 00 07 00 00 1e 00 e0 1f 00 ff 1f f8 ff 03 ff     ................
     9cc:	1f 00 ff 01 00 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
     9ec:	0e 00 00 00 c0 7f 00 f8 ff 01 fc ff 07 fc ff 07     ................
     9fc:	3e 80 0f 0e 00 0e 0e 00 0e 0e 00 0e 1e 80 0f fc     >...............
     a0c:	ff 07 fc ff 07 f8 ff 01 c0 7f 00 00 00 00 0e 00     ................
     a1c:	00 00 70 00 0e 38 00 0e 38 00 0e 1c 00 0e 0e 00     ..p..8..8.......
     a2c:	0e fe ff 0f fe ff 0f fe ff 0f fe ff 0f 00 00 0e     ................
     a3c:	00 00 0e 00 00 0e 00 00 0e 00 00 00 0e 00 00 00     ................
     a4c:	60 00 0f 78 80 0f 7c c0 0f 7c e0 0f 1e f0 0f 0e     `..x..|..|......
     a5c:	f8 0e 0e 7c 0e 0e 3e 0e 1e 1f 0e fe 0f 0e fc 07     ...|..>.........
     a6c:	0e f8 03 0e f0 01 0e 00 00 00 0e 00 00 00 30 80     ..............0.
     a7c:	01 38 80 03 3c 80 07 3c 80 0f 1e 00 0f 0e 0e 0e     .8..<..<........
     a8c:	0e 0e 0e 0e 0e 0e 1e 1f 0f fe ff 0f fc fb 07 fc     ................
     a9c:	f9 03 f0 e0 01 00 00 00 0f 00 00 00 00 f0 00 00     ................
     aac:	f8 00 00 fe 00 80 ef 00 c0 e7 00 f0 e1 00 7c e0     ..............|.
     abc:	00 3e e0 00 fe ff 0f fe ff 0f fe ff 0f fe ff 0f     .>..............
     acc:	00 e0 00 00 e0 00 0e 00 00 00 00 80 01 f8 87 03     ................
     adc:	fe 87 07 fe 87 0f fe 07 0f 0e 03 0e 8e 03 0e 8e     ................
     aec:	03 0e 8e 07 0f 8e ff 07 0e ff 07 0e fe 03 00 fc     ................
     afc:	00 00 00 00 0e 00 00 00 c0 7f 00 f0 ff 01 f8 ff     ................
     b0c:	07 fc ff 07 3e 0e 0f 0e 07 0e 0e 07 0e 0e 07 0e     ....>...........
     b1c:	1e 0f 0f 3e ff 0f 3c fe 07 38 fe 03 30 f8 01 00     ...>..<..8..0...
     b2c:	00 00 0e 00 00 00 0e 00 00 0e 00 00 0e 00 00 0e     ................
     b3c:	00 0f 0e e0 0f 0e f8 0f 0e fe 0f 8e ff 00 ce 0f     ................
     b4c:	00 fe 03 00 fe 00 00 3e 00 00 1e 00 00 00 00 00     .......>........
     b5c:	0e 00 00 00 f0 e0 01 f8 fb 03 fc fb 07 fe ff 0f     ................
     b6c:	1e 1f 0f 0e 0e 0e 0e 0e 0e 0e 0e 0e 1e 1f 0f fe     ................
     b7c:	ff 0f fc fb 07 fc fb 03 f0 e0 01 00 00 00 0e 00     ................
     b8c:	00 00 f0 83 01 f8 87 03 fc 8f 07 fe 9f 0f 1e 1e     ................
     b9c:	0f 0e 1c 0e 0e 1c 0e 0e 1c 0e 1e 8e 0f fc ff 07     ................
     bac:	fc ff 03 f8 ff 01 c0 7f 00 00 00 00                 ............

00000bb8 <__ctors_end>:
     bb8:	11 24       	eor	r1, r1
     bba:	1f be       	out	0x3f, r1	; 63
     bbc:	cf ef       	ldi	r28, 0xFF	; 255
     bbe:	d8 e0       	ldi	r29, 0x08	; 8
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	cd bf       	out	0x3d, r28	; 61

00000bc4 <__do_copy_data>:
     bc4:	11 e0       	ldi	r17, 0x01	; 1
     bc6:	a0 e0       	ldi	r26, 0x00	; 0
     bc8:	b1 e0       	ldi	r27, 0x01	; 1
     bca:	e2 ed       	ldi	r30, 0xD2	; 210
     bcc:	f2 e3       	ldi	r31, 0x32	; 50
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <.do_copy_data_start>

00000bd0 <.do_copy_data_loop>:
     bd0:	05 90       	lpm	r0, Z+
     bd2:	0d 92       	st	X+, r0

00000bd4 <.do_copy_data_start>:
     bd4:	a6 36       	cpi	r26, 0x66	; 102
     bd6:	b1 07       	cpc	r27, r17
     bd8:	d9 f7       	brne	.-10     	; 0xbd0 <.do_copy_data_loop>

00000bda <__do_clear_bss>:
     bda:	13 e0       	ldi	r17, 0x03	; 3
     bdc:	a6 e6       	ldi	r26, 0x66	; 102
     bde:	b1 e0       	ldi	r27, 0x01	; 1
     be0:	01 c0       	rjmp	.+2      	; 0xbe4 <.do_clear_bss_start>

00000be2 <.do_clear_bss_loop>:
     be2:	1d 92       	st	X+, r1

00000be4 <.do_clear_bss_start>:
     be4:	ae 36       	cpi	r26, 0x6E	; 110
     be6:	b1 07       	cpc	r27, r17
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <.do_clear_bss_loop>
     bea:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <main>
     bee:	0c 94 67 19 	jmp	0x32ce	; 0x32ce <_exit>

00000bf2 <__bad_interrupt>:
     bf2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000bf6 <main>:
#include <avr/pgmspace.h>
#define F_CPU 16000000UL  // 1 MHz
#define	LINKS	!(PIND &(1<<PD6))
#define RECHTS	!(PIND &(1<<PD5))
int main(void)
{
     bf6:	0f 93       	push	r16
     bf8:	1f 93       	push	r17
	char Richtung;
	char hoehe;
	
	DDRB|=(1<<PB2);
     bfa:	22 9a       	sbi	0x04, 2	; 4
	DDRC|=(1<<PC3);
     bfc:	3b 9a       	sbi	0x07, 3	; 7
	PORTC&=~(1<<PC3);
     bfe:	43 98       	cbi	0x08, 3	; 8

	
	DDRD&=~((1<<PD5)|(1<<PD6)|(1<<PD2));
     c00:	8a b1       	in	r24, 0x0a	; 10
     c02:	8b 79       	andi	r24, 0x9B	; 155
     c04:	8a b9       	out	0x0a, r24	; 10
	PORTD|=((1<<PD5)|(1<<PD6)|(1<<PD2));
     c06:	8b b1       	in	r24, 0x0b	; 11
     c08:	84 66       	ori	r24, 0x64	; 100
     c0a:	8b b9       	out	0x0b, r24	; 11
	Richtung=35;
	hoehe=0;
	
	sei();
     c0c:	78 94       	sei

	glcd_init();
     c0e:	0e 94 09 07 	call	0xe12	; 0xe12 <glcd_init>
	glcd_clear();
     c12:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <glcd_clear>
	glcd_write();
     c16:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
	glcd_tiny_set_font(Font5x7 ,5,7,32,127);
     c1a:	88 e6       	ldi	r24, 0x68	; 104
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	65 e0       	ldi	r22, 0x05	; 5
     c20:	47 e0       	ldi	r20, 0x07	; 7
     c22:	20 e2       	ldi	r18, 0x20	; 32
     c24:	0f e7       	ldi	r16, 0x7F	; 127
     c26:	0e 94 c4 12 	call	0x2588	; 0x2588 <glcd_tiny_set_font>
	glcd_clear_buffer();
     c2a:	0e 94 d1 06 	call	0xda2	; 0xda2 <glcd_clear_buffer>

	glcd_draw_rect(00,00,84,47,1);
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	44 e5       	ldi	r20, 0x54	; 84
     c34:	2f e2       	ldi	r18, 0x2F	; 47
     c36:	01 e0       	ldi	r16, 0x01	; 1
     c38:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <glcd_draw_rect>
	glcd_draw_rect(48,42,15,3,1);
     c3c:	80 e3       	ldi	r24, 0x30	; 48
     c3e:	6a e2       	ldi	r22, 0x2A	; 42
     c40:	4f e0       	ldi	r20, 0x0F	; 15
     c42:	23 e0       	ldi	r18, 0x03	; 3
     c44:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <glcd_draw_rect>
	
	glcd_write();	
     c48:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
     c4c:	13 e2       	ldi	r17, 0x23	; 35
		
		
		while(1)
		{
			if(LINKS)
     c4e:	4e 99       	sbic	0x09, 6	; 9
     c50:	0f c0       	rjmp	.+30     	; 0xc70 <main+0x7a>
			{
				glcd_clear();
     c52:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <glcd_clear>
				
				Richtung--;
     c56:	11 50       	subi	r17, 0x01	; 1
				glcd_draw_rect(Richtung,42,15,3,1);
     c58:	81 2f       	mov	r24, r17
     c5a:	6a e2       	ldi	r22, 0x2A	; 42
     c5c:	4f e0       	ldi	r20, 0x0F	; 15
     c5e:	23 e0       	ldi	r18, 0x03	; 3
     c60:	01 e0       	ldi	r16, 0x01	; 1
     c62:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <glcd_draw_rect>
				glcd_write();
     c66:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
				
				if(Richtung <= 1)
     c6a:	12 30       	cpi	r17, 0x02	; 2
     c6c:	08 f4       	brcc	.+2      	; 0xc70 <main+0x7a>
     c6e:	12 e0       	ldi	r17, 0x02	; 2
				{
					Richtung = 2;
				}
			}
			if(RECHTS)
     c70:	4d 99       	sbic	0x09, 5	; 9
     c72:	0f c0       	rjmp	.+30     	; 0xc92 <main+0x9c>
			{
				glcd_clear();
     c74:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <glcd_clear>
				Richtung++;
     c78:	1f 5f       	subi	r17, 0xFF	; 255
				glcd_draw_rect(Richtung,42,15,3,1);
     c7a:	81 2f       	mov	r24, r17
     c7c:	6a e2       	ldi	r22, 0x2A	; 42
     c7e:	4f e0       	ldi	r20, 0x0F	; 15
     c80:	23 e0       	ldi	r18, 0x03	; 3
     c82:	01 e0       	ldi	r16, 0x01	; 1
     c84:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <glcd_draw_rect>
				glcd_write();
     c88:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
     c8c:	14 34       	cpi	r17, 0x44	; 68
     c8e:	08 f0       	brcs	.+2      	; 0xc92 <main+0x9c>
     c90:	13 e4       	ldi	r17, 0x43	; 67
				
			}*/
				
			
				
			glcd_draw_rect(00,00,84,47,1);
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	44 e5       	ldi	r20, 0x54	; 84
     c98:	2f e2       	ldi	r18, 0x2F	; 47
     c9a:	01 e0       	ldi	r16, 0x01	; 1
     c9c:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <glcd_draw_rect>
			glcd_write();
     ca0:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
     ca4:	d4 cf       	rjmp	.-88     	; 0xc4e <main+0x58>

00000ca6 <glcd_update_bbox>:
glcd_BoundingBox_t *glcd_bbox_selected;

/** @} */

void glcd_update_bbox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
     ca6:	98 2f       	mov	r25, r24
     ca8:	84 35       	cpi	r24, 0x54	; 84
     caa:	08 f0       	brcs	.+2      	; 0xcae <glcd_update_bbox+0x8>
     cac:	93 e5       	ldi	r25, 0x53	; 83
     cae:	44 35       	cpi	r20, 0x54	; 84
     cb0:	08 f0       	brcs	.+2      	; 0xcb4 <glcd_update_bbox+0xe>
     cb2:	43 e5       	ldi	r20, 0x53	; 83
     cb4:	60 33       	cpi	r22, 0x30	; 48
     cb6:	08 f0       	brcs	.+2      	; 0xcba <glcd_update_bbox+0x14>
     cb8:	6f e2       	ldi	r22, 0x2F	; 47
     cba:	20 33       	cpi	r18, 0x30	; 48
     cbc:	08 f0       	brcs	.+2      	; 0xcc0 <glcd_update_bbox+0x1a>
     cbe:	2f e2       	ldi	r18, 0x2F	; 47
	if (ymax > (GLCD_LCD_HEIGHT-1)) {
		ymax = GLCD_LCD_HEIGHT-1;
	}

	/* Update the bounding box size */
	if (xmin < glcd_bbox_selected->x_min) {
     cc0:	e0 91 65 03 	lds	r30, 0x0365
     cc4:	f0 91 66 03 	lds	r31, 0x0366
     cc8:	80 81       	ld	r24, Z
     cca:	98 17       	cp	r25, r24
     ccc:	08 f4       	brcc	.+2      	; 0xcd0 <glcd_update_bbox+0x2a>
		glcd_bbox_selected->x_min = xmin;
     cce:	90 83       	st	Z, r25
	}		
	if (xmax > glcd_bbox_selected->x_max) {
     cd0:	82 81       	ldd	r24, Z+2	; 0x02
     cd2:	84 17       	cp	r24, r20
     cd4:	08 f4       	brcc	.+2      	; 0xcd8 <glcd_update_bbox+0x32>
		glcd_bbox_selected->x_max = xmax;
     cd6:	42 83       	std	Z+2, r20	; 0x02
	}
	if (ymin < glcd_bbox_selected->y_min) {
     cd8:	81 81       	ldd	r24, Z+1	; 0x01
     cda:	68 17       	cp	r22, r24
     cdc:	08 f4       	brcc	.+2      	; 0xce0 <glcd_update_bbox+0x3a>
		glcd_bbox_selected->y_min = ymin;
     cde:	61 83       	std	Z+1, r22	; 0x01
	}		
	if (ymax > glcd_bbox_selected->y_max) {
     ce0:	83 81       	ldd	r24, Z+3	; 0x03
     ce2:	82 17       	cp	r24, r18
     ce4:	08 f4       	brcc	.+2      	; 0xce8 <glcd_update_bbox+0x42>
		glcd_bbox_selected->y_max = ymax;
     ce6:	23 83       	std	Z+3, r18	; 0x03
     ce8:	08 95       	ret

00000cea <glcd_reset_bbox>:
}

void glcd_reset_bbox()
{
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
     cea:	e0 91 65 03 	lds	r30, 0x0365
     cee:	f0 91 66 03 	lds	r31, 0x0366
     cf2:	83 e5       	ldi	r24, 0x53	; 83
     cf4:	80 83       	st	Z, r24
	glcd_bbox_selected->x_max = 0;
     cf6:	12 82       	std	Z+2, r1	; 0x02
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
     cf8:	8f e2       	ldi	r24, 0x2F	; 47
     cfa:	81 83       	std	Z+1, r24	; 0x01
	glcd_bbox_selected->y_max = 0;	
     cfc:	13 82       	std	Z+3, r1	; 0x03
}
     cfe:	08 95       	ret

00000d00 <glcd_bbox_reset>:
}

void glcd_reset_bbox()
{
	/* Used after physically writing to the LCD */
	glcd_bbox_selected->x_min = GLCD_LCD_WIDTH - 1;
     d00:	e0 91 65 03 	lds	r30, 0x0365
     d04:	f0 91 66 03 	lds	r31, 0x0366
     d08:	83 e5       	ldi	r24, 0x53	; 83
     d0a:	80 83       	st	Z, r24
	glcd_bbox_selected->x_max = 0;
     d0c:	12 82       	std	Z+2, r1	; 0x02
	glcd_bbox_selected->y_min = GLCD_LCD_HEIGHT -1;
     d0e:	8f e2       	ldi	r24, 0x2F	; 47
     d10:	81 83       	std	Z+1, r24	; 0x01
	glcd_bbox_selected->y_max = 0;	
     d12:	13 82       	std	Z+3, r1	; 0x03
}

void glcd_bbox_reset() {
	glcd_reset_bbox();
}
     d14:	08 95       	ret

00000d16 <glcd_bbox_refresh>:

void glcd_bbox_refresh() {
	/* Marks bounding box as entire screen, so on next glcd_write(), it writes the entire buffer to the LCD */
	glcd_bbox_selected->x_min = 0;
     d16:	e0 91 65 03 	lds	r30, 0x0365
     d1a:	f0 91 66 03 	lds	r31, 0x0366
     d1e:	10 82       	st	Z, r1
	glcd_bbox_selected->x_max = GLCD_LCD_WIDTH - 1;
     d20:	83 e5       	ldi	r24, 0x53	; 83
     d22:	82 83       	std	Z+2, r24	; 0x02
	glcd_bbox_selected->y_min = 0;
     d24:	11 82       	std	Z+1, r1	; 0x01
	glcd_bbox_selected->y_max = GLCD_LCD_HEIGHT -1;		
     d26:	8f e2       	ldi	r24, 0x2F	; 47
     d28:	83 83       	std	Z+3, r24	; 0x03
}
     d2a:	08 95       	ret

00000d2c <glcd_select_screen>:
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
}

void glcd_select_screen(uint8_t *buffer, glcd_BoundingBox_t *bbox)
{
	glcd_buffer_selected = buffer;
     d2c:	90 93 64 03 	sts	0x0364, r25
     d30:	80 93 63 03 	sts	0x0363, r24
	glcd_bbox_selected = bbox;
     d34:	70 93 66 03 	sts	0x0366, r23
     d38:	60 93 65 03 	sts	0x0365, r22
}
     d3c:	08 95       	ret

00000d3e <glcd_scroll>:
		uint8_t x;
		for (x=0; x<GLCD_LCD_WIDTH; x++) {
			
		}
	}
}
     d3e:	08 95       	ret

00000d40 <glcd_scroll_line>:

void glcd_scroll_line(void)
{
     d40:	40 e0       	ldi	r20, 0x00	; 0
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
		if (y < (number_of_rows - 1)) {
			/* All lines except the last */
			memcpy(glcd_buffer_selected + y*GLCD_LCD_WIDTH, glcd_buffer_selected + y*GLCD_LCD_WIDTH + GLCD_LCD_WIDTH, GLCD_LCD_WIDTH);
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
     d48:	64 e5       	ldi	r22, 0x54	; 84
     d4a:	80 91 63 03 	lds	r24, 0x0363
     d4e:	90 91 64 03 	lds	r25, 0x0364
void glcd_scroll_line(void)
{
	uint8_t y;
	uint8_t number_of_rows = GLCD_LCD_HEIGHT / 8;
	for (y=0; y<number_of_rows; y++) {
		if (y < (number_of_rows - 1)) {
     d52:	45 30       	cpi	r20, 0x05	; 5
     d54:	51 05       	cpc	r21, r1
     d56:	81 f0       	breq	.+32     	; 0xd78 <glcd_scroll_line+0x38>
			/* All lines except the last */
			memcpy(glcd_buffer_selected + y*GLCD_LCD_WIDTH, glcd_buffer_selected + y*GLCD_LCD_WIDTH + GLCD_LCD_WIDTH, GLCD_LCD_WIDTH);
     d58:	dc 01       	movw	r26, r24
     d5a:	a2 0f       	add	r26, r18
     d5c:	b3 1f       	adc	r27, r19
     d5e:	2c 5a       	subi	r18, 0xAC	; 172
     d60:	3f 4f       	sbci	r19, 0xFF	; 255
     d62:	fc 01       	movw	r30, r24
     d64:	e2 0f       	add	r30, r18
     d66:	f3 1f       	adc	r31, r19
     d68:	24 55       	subi	r18, 0x54	; 84
     d6a:	30 40       	sbci	r19, 0x00	; 0
     d6c:	84 e5       	ldi	r24, 0x54	; 84
     d6e:	01 90       	ld	r0, Z+
     d70:	0d 92       	st	X+, r0
     d72:	81 50       	subi	r24, 0x01	; 1
     d74:	e1 f7       	brne	.-8      	; 0xd6e <glcd_scroll_line+0x2e>
     d76:	07 c0       	rjmp	.+14     	; 0xd86 <glcd_scroll_line+0x46>
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
     d78:	8c 55       	subi	r24, 0x5C	; 92
     d7a:	9e 4f       	sbci	r25, 0xFE	; 254
     d7c:	dc 01       	movw	r26, r24
     d7e:	86 2f       	mov	r24, r22
     d80:	1d 92       	st	X+, r1
     d82:	8a 95       	dec	r24
     d84:	e9 f7       	brne	.-6      	; 0xd80 <glcd_scroll_line+0x40>
     d86:	4f 5f       	subi	r20, 0xFF	; 255
     d88:	5f 4f       	sbci	r21, 0xFF	; 255
     d8a:	2c 5a       	subi	r18, 0xAC	; 172
     d8c:	3f 4f       	sbci	r19, 0xFF	; 255

void glcd_scroll_line(void)
{
	uint8_t y;
	uint8_t number_of_rows = GLCD_LCD_HEIGHT / 8;
	for (y=0; y<number_of_rows; y++) {
     d8e:	46 30       	cpi	r20, 0x06	; 6
     d90:	51 05       	cpc	r21, r1
     d92:	d9 f6       	brne	.-74     	; 0xd4a <glcd_scroll_line+0xa>
		} else {
			/* Last line, clear it */
			memset(glcd_buffer_selected + (number_of_rows - 1)*GLCD_LCD_WIDTH, 0x00, GLCD_LCD_WIDTH);
		}
	}
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	43 e5       	ldi	r20, 0x53	; 83
     d9a:	2f e2       	ldi	r18, 0x2F	; 47
     d9c:	0e 94 53 06 	call	0xca6	; 0xca6 <glcd_update_bbox>
}
     da0:	08 95       	ret

00000da2 <glcd_clear_buffer>:
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
	glcd_write();
}

void glcd_clear_buffer(void) {
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
     da2:	e0 91 63 03 	lds	r30, 0x0363
     da6:	f0 91 64 03 	lds	r31, 0x0364
     daa:	88 ef       	ldi	r24, 0xF8	; 248
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	df 01       	movw	r26, r30
     db0:	9c 01       	movw	r18, r24
     db2:	1d 92       	st	X+, r1
     db4:	21 50       	subi	r18, 0x01	; 1
     db6:	30 40       	sbci	r19, 0x00	; 0
     db8:	e1 f7       	brne	.-8      	; 0xdb2 <glcd_clear_buffer+0x10>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	43 e5       	ldi	r20, 0x53	; 83
     dc0:	2f e2       	ldi	r18, 0x2F	; 47
     dc2:	0e 94 53 06 	call	0xca6	; 0xca6 <glcd_update_bbox>
}
     dc6:	08 95       	ret

00000dc8 <glcd_clear>:
	glcd_bbox_selected->y_min = 0;
	glcd_bbox_selected->y_max = GLCD_LCD_HEIGHT -1;		
}

void glcd_clear(void) {
	memset(glcd_buffer_selected, 0x00, GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8);
     dc8:	e0 91 63 03 	lds	r30, 0x0363
     dcc:	f0 91 64 03 	lds	r31, 0x0364
     dd0:	88 ef       	ldi	r24, 0xF8	; 248
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	df 01       	movw	r26, r30
     dd6:	9c 01       	movw	r18, r24
     dd8:	1d 92       	st	X+, r1
     dda:	21 50       	subi	r18, 0x01	; 1
     ddc:	30 40       	sbci	r19, 0x00	; 0
     dde:	e1 f7       	brne	.-8      	; 0xdd8 <glcd_clear+0x10>
	glcd_update_bbox(0,0,GLCD_LCD_WIDTH - 1,GLCD_LCD_HEIGHT - 1);
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	43 e5       	ldi	r20, 0x53	; 83
     de6:	2f e2       	ldi	r18, 0x2F	; 47
     de8:	0e 94 53 06 	call	0xca6	; 0xca6 <glcd_update_bbox>
	glcd_write();
     dec:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
}
     df0:	08 95       	ret

00000df2 <glcd_spi_write>:
	
}

void glcd_spi_write(uint8_t c)
{
	GLCD_SELECT();
     df2:	28 98       	cbi	0x05, 0	; 5
	SPDR = c;
     df4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); /* wait until transmission is complete */
     df6:	0d b4       	in	r0, 0x2d	; 45
     df8:	07 fe       	sbrs	r0, 7
     dfa:	fd cf       	rjmp	.-6      	; 0xdf6 <glcd_spi_write+0x4>
	GLCD_DESELECT();	
     dfc:	28 9a       	sbi	0x05, 0	; 5
}
     dfe:	08 95       	ret

00000e00 <glcd_reset>:

void glcd_reset(void)
{
	/* Toggle RST low to reset. Minimum pulse 100ns on datasheet. */
	GLCD_SELECT();
     e00:	28 98       	cbi	0x05, 0	; 5
	GLCD_RESET_LOW();
     e02:	5f 98       	cbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e04:	80 ea       	ldi	r24, 0xA0	; 160
     e06:	9f e0       	ldi	r25, 0x0F	; 15
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <glcd_reset+0x8>
	delay_ms(GLCD_RESET_TIME);
	GLCD_RESET_HIGH();
     e0c:	5f 9a       	sbi	0x0b, 7	; 11
	GLCD_DESELECT();	
     e0e:	28 9a       	sbi	0x05, 0	; 5
}
     e10:	08 95       	ret

00000e12 <glcd_init>:
	/*
	 * Set up SPI for AVR8
	 * Note: AVR's SS pin must be set to output, regardless of whether we
	 * actually use it. This is a requirement of SPI mster mode.
	 */
	sbi(DDR(AVR_SS_PORT),AVR_SS_PIN);
     e12:	20 9a       	sbi	0x04, 0	; 4
	
	/*
	 *  Set MOSI, Master SS, SCK to output (otherwise SPI won't work)
	 *  Must be done even if native SS pin not used
	 */
	sbi(DDR(CONTROLLER_MOSI_PORT),CONTROLLER_MOSI_PIN);
     e14:	23 9a       	sbi	0x04, 3	; 4
	sbi(DDR(CONTROLLER_SS_PORT),CONTROLLER_SS_PIN);
     e16:	20 9a       	sbi	0x04, 0	; 4
	sbi(DDR(CONTROLLER_SCK_PORT),CONTROLLER_SCK_PIN);
     e18:	25 9a       	sbi	0x04, 5	; 4
		
	/* Set SS, DC and RST pins to output */
	sbi( DDR(CONTROLLER_SS_PORT), CONTROLLER_SS_PIN );
     e1a:	20 9a       	sbi	0x04, 0	; 4
	sbi( DDR(CONTROLLER_DC_PORT), CONTROLLER_DC_PIN );
     e1c:	21 9a       	sbi	0x04, 1	; 4
	sbi( DDR(CONTROLLER_RST_PORT), CONTROLLER_RST_PIN );
     e1e:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Deselect LCD */
	GLCD_DESELECT();
     e20:	28 9a       	sbi	0x05, 0	; 5

	/*
	 * Max allowed SPI clock is 4 MHz from datasheet.
	 * Enable SPI, set master mode and clock rate to /4 (4MHz with F_CPU=8MHz)
	 */
	SPCR = (1<<SPE)|(1<<MSTR);
     e22:	80 e5       	ldi	r24, 0x50	; 80
     e24:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0;
     e26:	1d bc       	out	0x2d, r1	; 45
	
	glcd_PCD8544_init();
     e28:	0e 94 27 07 	call	0xe4e	; 0xe4e <glcd_PCD8544_init>

	/* Select screen buffer */
	glcd_select_screen(glcd_buffer,&glcd_bbox);
     e2c:	8b e6       	ldi	r24, 0x6B	; 107
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	67 e6       	ldi	r22, 0x67	; 103
     e32:	71 e0       	ldi	r23, 0x01	; 1
     e34:	0e 94 96 06 	call	0xd2c	; 0xd2c <glcd_select_screen>
	
	/* Clear screen, we are now ready to go */
	glcd_clear();
     e38:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <glcd_clear>
	
#else
	#error "Controller not supported"
#endif /* GLCD_CONTROLLER_* */
	
}
     e3c:	08 95       	ret

00000e3e <glcd_data>:
	glcd_spi_write(c);
}

void glcd_data(uint8_t c)
{
	GLCD_DC_HIGH();
     e3e:	29 9a       	sbi	0x05, 1	; 5
	glcd_spi_write(c);
     e40:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <glcd_spi_write>
}
     e44:	08 95       	ret

00000e46 <glcd_command>:

#include "../glcd.h"

void glcd_command(uint8_t c)
{
	GLCD_DC_LOW();
     e46:	29 98       	cbi	0x05, 1	; 5
	glcd_spi_write(c);
     e48:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <glcd_spi_write>
}
     e4c:	08 95       	ret

00000e4e <glcd_PCD8544_init>:

}

void glcd_PCD8544_init(void) {

	glcd_reset();
     e4e:	0e 94 00 07 	call	0xe00	; 0xe00 <glcd_reset>
	
	/* Get into the EXTENDED mode! */
	glcd_command(PCD8544_FUNCTION_SET | PCD8544_EXTENDED_INSTRUCTION);
     e52:	81 e2       	ldi	r24, 0x21	; 33
     e54:	0e 94 23 07 	call	0xe46	; 0xe46 <glcd_command>

	/* LCD bias select (4 is optimal?) */
	glcd_command(PCD8544_SET_BIAS | 0x2);
     e58:	82 e1       	ldi	r24, 0x12	; 18
     e5a:	0e 94 23 07 	call	0xe46	; 0xe46 <glcd_command>

	/* Set VOP (affects contrast) */
	glcd_command(PCD8544_SET_VOP | 60); /* Experimentally determined, play with this figure until contrast looks nice */
     e5e:	8c eb       	ldi	r24, 0xBC	; 188
     e60:	0e 94 23 07 	call	0xe46	; 0xe46 <glcd_command>

	/* Back to standard instructions */
	glcd_command(PCD8544_FUNCTION_SET);
     e64:	80 e2       	ldi	r24, 0x20	; 32
     e66:	0e 94 23 07 	call	0xe46	; 0xe46 <glcd_command>

	/* Normal mode */
	glcd_command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_NORMAL);
     e6a:	8c e0       	ldi	r24, 0x0C	; 12
     e6c:	0e 94 23 07 	call	0xe46	; 0xe46 <glcd_command>
}
     e70:	08 95       	ret

00000e72 <glcd_write>:
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
}

void glcd_write()
{
     e72:	ef 92       	push	r14
     e74:	ff 92       	push	r15
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	00 e0       	ldi	r16, 0x00	; 0
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	c0 e0       	ldi	r28, 0x00	; 0
     e86:	d0 e0       	ldi	r29, 0x00	; 0

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
		/* Each bank is a single row 8 bits tall */
		uint8_t column;

		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
     e88:	e0 91 65 03 	lds	r30, 0x0365
     e8c:	f0 91 66 03 	lds	r31, 0x0366
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
}

void glcd_write()
{
     e90:	88 e0       	ldi	r24, 0x08	; 8
     e92:	e8 2e       	mov	r14, r24
     e94:	f1 2c       	mov	r15, r1
     e96:	e2 0e       	add	r14, r18
     e98:	f3 1e       	adc	r15, r19

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
		/* Each bank is a single row 8 bits tall */
		uint8_t column;

		if (glcd_bbox_selected->y_min >= (bank+1)*8) {
     e9a:	81 81       	ldd	r24, Z+1	; 0x01
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	8e 15       	cp	r24, r14
     ea0:	9f 05       	cpc	r25, r15
     ea2:	54 f5       	brge	.+84     	; 0xef8 <glcd_write+0x86>
			continue; /* Skip the entire bank */
		}

		if (glcd_bbox_selected->y_max < bank*8) {
     ea4:	83 81       	ldd	r24, Z+3	; 0x03
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	82 17       	cp	r24, r18
     eaa:	93 07       	cpc	r25, r19
     eac:	64 f1       	brlt	.+88     	; 0xf06 <glcd_write+0x94>
			break;    /* No more banks need updating */
		}

		glcd_command(PCD8544_SET_Y_ADDRESS | bank);
     eae:	80 2f       	mov	r24, r16
     eb0:	80 64       	ori	r24, 0x40	; 64
     eb2:	0e 94 23 07 	call	0xe46	; 0xe46 <glcd_command>
		glcd_command(PCD8544_SET_X_ADDRESS | glcd_bbox_selected->x_min);
     eb6:	e0 91 65 03 	lds	r30, 0x0365
     eba:	f0 91 66 03 	lds	r31, 0x0366
     ebe:	80 81       	ld	r24, Z
     ec0:	80 68       	ori	r24, 0x80	; 128
     ec2:	0e 94 23 07 	call	0xe46	; 0xe46 <glcd_command>

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
     ec6:	e0 91 65 03 	lds	r30, 0x0365
     eca:	f0 91 66 03 	lds	r31, 0x0366
     ece:	10 81       	ld	r17, Z
     ed0:	0c c0       	rjmp	.+24     	; 0xeea <glcd_write+0x78>
		{
			glcd_data( glcd_buffer_selected[PCD8544_MAX_COLS * bank + column] );
     ed2:	e0 91 63 03 	lds	r30, 0x0363
     ed6:	f0 91 64 03 	lds	r31, 0x0364
     eda:	ec 0f       	add	r30, r28
     edc:	fd 1f       	adc	r31, r29
     ede:	e1 0f       	add	r30, r17
     ee0:	f1 1d       	adc	r31, r1
     ee2:	80 81       	ld	r24, Z
     ee4:	0e 94 1f 07 	call	0xe3e	; 0xe3e <glcd_data>
		}

		glcd_command(PCD8544_SET_Y_ADDRESS | bank);
		glcd_command(PCD8544_SET_X_ADDRESS | glcd_bbox_selected->x_min);

		for (column = glcd_bbox_selected->x_min; column <= glcd_bbox_selected->x_max; column++)
     ee8:	1f 5f       	subi	r17, 0xFF	; 255
     eea:	e0 91 65 03 	lds	r30, 0x0365
     eee:	f0 91 66 03 	lds	r31, 0x0366
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	81 17       	cp	r24, r17
     ef6:	68 f7       	brcc	.-38     	; 0xed2 <glcd_write+0x60>

void glcd_write()
{
	uint8_t bank;

	for (bank = 0; bank < PCD8544_MAX_BANKS; bank++) {
     ef8:	0f 5f       	subi	r16, 0xFF	; 255
     efa:	cc 5a       	subi	r28, 0xAC	; 172
     efc:	df 4f       	sbci	r29, 0xFF	; 255
     efe:	06 30       	cpi	r16, 0x06	; 6
     f00:	11 f0       	breq	.+4      	; 0xf06 <glcd_write+0x94>
     f02:	97 01       	movw	r18, r14
     f04:	c1 cf       	rjmp	.-126    	; 0xe88 <glcd_write+0x16>
		{
			glcd_data( glcd_buffer_selected[PCD8544_MAX_COLS * bank + column] );
		}
	}

	glcd_reset_bbox();
     f06:	0e 94 75 06 	call	0xcea	; 0xcea <glcd_reset_bbox>

}
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	ff 90       	pop	r15
     f14:	ef 90       	pop	r14
     f16:	08 95       	ret

00000f18 <glcd_set_x_address>:
	glcd_command(PCD8544_SET_Y_ADDRESS|(y > 5 ? 5 : y));
}

void glcd_set_x_address(uint8_t x)
{
	glcd_command(PCD8544_SET_X_ADDRESS|(x & 0x7f));
     f18:	80 68       	ori	r24, 0x80	; 128
     f1a:	0e 94 23 07 	call	0xe46	; 0xe46 <glcd_command>
}
     f1e:	08 95       	ret

00000f20 <glcd_set_y_address>:
	glcd_command(PCD8544_FUNCTION_SET);
}

void glcd_set_y_address(uint8_t y)
{
	glcd_command(PCD8544_SET_Y_ADDRESS|(y > 5 ? 5 : y));
     f20:	86 30       	cpi	r24, 0x06	; 6
     f22:	10 f0       	brcs	.+4      	; 0xf28 <glcd_set_y_address+0x8>
     f24:	85 e4       	ldi	r24, 0x45	; 69
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <glcd_set_y_address+0xa>
     f28:	80 64       	ori	r24, 0x40	; 64
     f2a:	0e 94 23 07 	call	0xe46	; 0xe46 <glcd_command>
}
     f2e:	08 95       	ret

00000f30 <glcd_power_up>:
	glcd_command(PCD8544_FUNCTION_SET|PCD8544_POWER_DOWN);
}

void glcd_power_up(void)
{
	glcd_command(PCD8544_FUNCTION_SET);
     f30:	80 e2       	ldi	r24, 0x20	; 32
     f32:	0e 94 23 07 	call	0xe46	; 0xe46 <glcd_command>
}
     f36:	08 95       	ret

00000f38 <glcd_power_down>:
}

void glcd_power_down(void)
{
	/* First, fill RAM with zeroes to ensure minimum specified current consumption */
	glcd_clear();
     f38:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <glcd_clear>

	/* Power down */
	glcd_command(PCD8544_FUNCTION_SET|PCD8544_POWER_DOWN);
     f3c:	84 e2       	ldi	r24, 0x24	; 36
     f3e:	0e 94 23 07 	call	0xe46	; 0xe46 <glcd_command>
}
     f42:	08 95       	ret

00000f44 <glcd_set_contrast>:
{
	GLCD_DC_HIGH();
	glcd_spi_write(c);
}

void glcd_set_contrast(uint8_t val) {
     f44:	1f 93       	push	r17
     f46:	18 2f       	mov	r17, r24
	glcd_command(PCD8544_FUNCTION_SET | PCD8544_EXTENDED_INSTRUCTION);
     f48:	81 e2       	ldi	r24, 0x21	; 33
     f4a:	0e 94 23 07 	call	0xe46	; 0xe46 <glcd_command>
	glcd_command(PCD8544_SET_VOP | (val&0x7f));
     f4e:	81 2f       	mov	r24, r17
     f50:	80 68       	ori	r24, 0x80	; 128
     f52:	0e 94 23 07 	call	0xe46	; 0xe46 <glcd_command>
	glcd_command(PCD8544_FUNCTION_SET);
     f56:	80 e2       	ldi	r24, 0x20	; 32
     f58:	0e 94 23 07 	call	0xe46	; 0xe46 <glcd_command>
	glcd_command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_NORMAL);
     f5c:	8c e0       	ldi	r24, 0x0C	; 12
     f5e:	0e 94 23 07 	call	0xe46	; 0xe46 <glcd_command>
}
     f62:	1f 91       	pop	r17
     f64:	08 95       	ret

00000f66 <glcd_map>:
		delay_ms(delay);
	}
}

static uint8_t glcd_map(uint8_t x1, uint8_t x2, uint8_t x)
{
     f66:	28 2f       	mov	r18, r24
     f68:	50 e0       	ldi	r21, 0x00	; 0
     f6a:	70 e0       	ldi	r23, 0x00	; 0
     f6c:	68 1b       	sub	r22, r24
     f6e:	71 09       	sbc	r23, r1
     f70:	46 9f       	mul	r20, r22
     f72:	c0 01       	movw	r24, r0
     f74:	47 9f       	mul	r20, r23
     f76:	90 0d       	add	r25, r0
     f78:	56 9f       	mul	r21, r22
     f7a:	90 0d       	add	r25, r0
     f7c:	11 24       	eor	r1, r1
     f7e:	6f ef       	ldi	r22, 0xFF	; 255
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__divmodhi4>
	return x1+(x2-x1)*x/255;	
}
     f86:	82 2f       	mov	r24, r18
     f88:	86 0f       	add	r24, r22
     f8a:	08 95       	ret

00000f8c <glcd_scrolling_bar_graph>:
{
	glcd_fill_rect(x, y+glcd_map(0,height-2,255-val), width, height-2-glcd_map(0,height-2,255-val), BLACK);
}

void glcd_scrolling_bar_graph(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
     f8c:	2f 92       	push	r2
     f8e:	3f 92       	push	r3
     f90:	5f 92       	push	r5
     f92:	6f 92       	push	r6
     f94:	7f 92       	push	r7
     f96:	8f 92       	push	r8
     f98:	9f 92       	push	r9
     f9a:	af 92       	push	r10
     f9c:	bf 92       	push	r11
     f9e:	cf 92       	push	r12
     fa0:	df 92       	push	r13
     fa2:	ef 92       	push	r14
     fa4:	ff 92       	push	r15
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	0f 92       	push	r0
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	88 2e       	mov	r8, r24
     fb6:	b6 2e       	mov	r11, r22
     fb8:	94 2e       	mov	r9, r20
     fba:	c2 2e       	mov	r12, r18
     fbc:	50 2e       	mov	r5, r16
	uint8_t nx, ny;
	uint8_t color;
	
	/* Draw border of graph */
	glcd_draw_rect(x,y,width,height,BLACK);
     fbe:	01 e0       	ldi	r16, 0x01	; 1
     fc0:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <glcd_draw_rect>
     fc4:	dd 24       	eor	r13, r13
     fc6:	d3 94       	inc	r13
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
     fc8:	0c 2d       	mov	r16, r12
     fca:	10 e0       	ldi	r17, 0x00	; 0
     fcc:	38 01       	movw	r6, r16
     fce:	08 94       	sec
     fd0:	61 08       	sbc	r6, r1
     fd2:	71 08       	sbc	r7, r1
		/* Redraw each horizontal line */
		for (nx = 1; nx <= (width-2); nx += 1) {
     fd4:	29 2c       	mov	r2, r9
     fd6:	33 24       	eor	r3, r3
     fd8:	08 94       	sec
     fda:	21 08       	sbc	r2, r1
     fdc:	31 08       	sbc	r3, r1
     fde:	12 c0       	rjmp	.+36     	; 0x1004 <glcd_scrolling_bar_graph+0x78>
			color = glcd_get_pixel(x+nx+1,y+ny);
     fe0:	8f 2d       	mov	r24, r15
     fe2:	8f 5f       	subi	r24, 0xFF	; 255
     fe4:	6a 2d       	mov	r22, r10
     fe6:	0e 94 a4 0b 	call	0x1748	; 0x1748 <glcd_get_pixel>
     fea:	48 2f       	mov	r20, r24
			glcd_set_pixel(x+nx,y+ny,color);
     fec:	8f 2d       	mov	r24, r15
     fee:	6a 2d       	mov	r22, r10
     ff0:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
	glcd_draw_rect(x,y,width,height,BLACK);
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
		/* Redraw each horizontal line */
		for (nx = 1; nx <= (width-2); nx += 1) {
     ff4:	e3 94       	inc	r14
     ff6:	f3 94       	inc	r15
     ff8:	8e 2d       	mov	r24, r14
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	82 15       	cp	r24, r2
     ffe:	93 05       	cpc	r25, r3
    1000:	7c f3       	brlt	.-34     	; 0xfe0 <glcd_scrolling_bar_graph+0x54>
	
	/* Draw border of graph */
	glcd_draw_rect(x,y,width,height,BLACK);
	
	/* Scroll inner contents left by one pixel width */
	for (ny = 1; ny <= (height-2); ny++) {
    1002:	d3 94       	inc	r13
    1004:	8d 2d       	mov	r24, r13
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	86 15       	cp	r24, r6
    100a:	97 05       	cpc	r25, r7
    100c:	34 f4       	brge	.+12     	; 0x101a <glcd_scrolling_bar_graph+0x8e>
    100e:	f8 2c       	mov	r15, r8
    1010:	ee 24       	eor	r14, r14
    1012:	e3 94       	inc	r14
    1014:	ad 2c       	mov	r10, r13
    1016:	ab 0c       	add	r10, r11
    1018:	ee cf       	rjmp	.-36     	; 0xff6 <glcd_scrolling_bar_graph+0x6a>
			color = glcd_get_pixel(x+nx+1,y+ny);
			glcd_set_pixel(x+nx,y+ny,color);
		}
	}
	
	val = val * (height-3) / 255;
    101a:	03 50       	subi	r16, 0x03	; 3
    101c:	10 40       	sbci	r17, 0x00	; 0
    101e:	85 2d       	mov	r24, r5
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	9c 01       	movw	r18, r24
    1024:	02 9f       	mul	r16, r18
    1026:	c0 01       	movw	r24, r0
    1028:	03 9f       	mul	r16, r19
    102a:	90 0d       	add	r25, r0
    102c:	12 9f       	mul	r17, r18
    102e:	90 0d       	add	r25, r0
    1030:	11 24       	eor	r1, r1
    1032:	6f ef       	ldi	r22, 0xFF	; 255
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__divmodhi4>
    103a:	26 2f       	mov	r18, r22
	
	/* Make sure we're not exceeding the size of box interior */
	if (val > (height-3)) {
    103c:	0f 5f       	subi	r16, 0xFF	; 255
    103e:	1f 4f       	sbci	r17, 0xFF	; 255
    1040:	86 2f       	mov	r24, r22
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	80 17       	cp	r24, r16
    1046:	91 07       	cpc	r25, r17
    1048:	14 f0       	brlt	.+4      	; 0x104e <glcd_scrolling_bar_graph+0xc2>
		val = height - 3;
    104a:	2c 2d       	mov	r18, r12
    104c:	23 50       	subi	r18, 0x03	; 3
	}
	
	/* Draw new bar - both black and white portions*/
	glcd_draw_line(x+width-2,y+height-2,x+width-2,y+height-2-val,BLACK);
    104e:	6c 2d       	mov	r22, r12
    1050:	6b 0d       	add	r22, r11
    1052:	98 2d       	mov	r25, r8
    1054:	92 50       	subi	r25, 0x02	; 2
    1056:	99 0d       	add	r25, r9
    1058:	16 2f       	mov	r17, r22
    105a:	12 1b       	sub	r17, r18
    105c:	62 50       	subi	r22, 0x02	; 2
    105e:	12 50       	subi	r17, 0x02	; 2
    1060:	89 2f       	mov	r24, r25
    1062:	49 2f       	mov	r20, r25
    1064:	21 2f       	mov	r18, r17
    1066:	01 e0       	ldi	r16, 0x01	; 1
    1068:	99 83       	std	Y+1, r25	; 0x01
    106a:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <glcd_draw_line>
	glcd_draw_line(x+width-2,y+height-3-val,x+width-2,y+1,WHITE);
    106e:	11 50       	subi	r17, 0x01	; 1
    1070:	b3 94       	inc	r11
    1072:	99 81       	ldd	r25, Y+1	; 0x01
    1074:	89 2f       	mov	r24, r25
    1076:	61 2f       	mov	r22, r17
    1078:	49 2f       	mov	r20, r25
    107a:	2b 2d       	mov	r18, r11
    107c:	00 e0       	ldi	r16, 0x00	; 0
    107e:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <glcd_draw_line>
	
	/* Write to display */
	glcd_write();
    1082:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
}
    1086:	0f 90       	pop	r0
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	ff 90       	pop	r15
    1092:	ef 90       	pop	r14
    1094:	df 90       	pop	r13
    1096:	cf 90       	pop	r12
    1098:	bf 90       	pop	r11
    109a:	af 90       	pop	r10
    109c:	9f 90       	pop	r9
    109e:	8f 90       	pop	r8
    10a0:	7f 90       	pop	r7
    10a2:	6f 90       	pop	r6
    10a4:	5f 90       	pop	r5
    10a6:	3f 90       	pop	r3
    10a8:	2f 90       	pop	r2
    10aa:	08 95       	ret

000010ac <glcd_scrolling_bar_graph_timing>:

void glcd_scrolling_bar_graph_timing(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val, uint8_t line_width, uint16_t delay)
{
    10ac:	7f 92       	push	r7
    10ae:	8f 92       	push	r8
    10b0:	9f 92       	push	r9
    10b2:	af 92       	push	r10
    10b4:	bf 92       	push	r11
    10b6:	cf 92       	push	r12
    10b8:	df 92       	push	r13
    10ba:	ef 92       	push	r14
    10bc:	ff 92       	push	r15
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	78 2e       	mov	r7, r24
    10c4:	86 2e       	mov	r8, r22
    10c6:	94 2e       	mov	r9, r20
    10c8:	a2 2e       	mov	r10, r18
    10ca:	b0 2e       	mov	r11, r16
    10cc:	fe 2c       	mov	r15, r14
	uint8_t n;
	if (line_width == 0) {
    10ce:	ee 20       	and	r14, r14
    10d0:	11 f4       	brne	.+4      	; 0x10d6 <glcd_scrolling_bar_graph_timing+0x2a>
    10d2:	ff 24       	eor	r15, r15
    10d4:	f3 94       	inc	r15
    10d6:	10 e0       	ldi	r17, 0x00	; 0
    10d8:	08 c0       	rjmp	.+16     	; 0x10ea <glcd_scrolling_bar_graph_timing+0x3e>
	}
	
	/* Adjust graph line's width by just running glcd_scrolling_bar_graph() x number of times */
	/* \todo This should be done differently! */
	for (n=0; n<line_width; n++) {
		glcd_scrolling_bar_graph(x,y,width,height,val);
    10da:	87 2d       	mov	r24, r7
    10dc:	68 2d       	mov	r22, r8
    10de:	49 2d       	mov	r20, r9
    10e0:	2a 2d       	mov	r18, r10
    10e2:	0b 2d       	mov	r16, r11
    10e4:	0e 94 c6 07 	call	0xf8c	; 0xf8c <glcd_scrolling_bar_graph>
		line_width = 1;
	}
	
	/* Adjust graph line's width by just running glcd_scrolling_bar_graph() x number of times */
	/* \todo This should be done differently! */
	for (n=0; n<line_width; n++) {
    10e8:	1f 5f       	subi	r17, 0xFF	; 255
    10ea:	1f 15       	cp	r17, r15
    10ec:	b0 f3       	brcs	.-20     	; 0x10da <glcd_scrolling_bar_graph_timing+0x2e>
		glcd_scrolling_bar_graph(x,y,width,height,val);
	}
	
	if (delay) {
    10ee:	c1 14       	cp	r12, r1
    10f0:	d1 04       	cpc	r13, r1
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <glcd_scrolling_bar_graph_timing+0x4a>
    10f4:	41 c0       	rjmp	.+130    	; 0x1178 <glcd_scrolling_bar_graph_timing+0xcc>
		delay_ms(delay);
    10f6:	b6 01       	movw	r22, r12
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 94 89 14 	call	0x2912	; 0x2912 <__floatunsisf>
    1100:	5b 01       	movw	r10, r22
    1102:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	4a e7       	ldi	r20, 0x7A	; 122
    110a:	55 e4       	ldi	r21, 0x45	; 69
    110c:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__mulsf3>
    1110:	7b 01       	movw	r14, r22
    1112:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e8       	ldi	r20, 0x80	; 128
    111a:	5f e3       	ldi	r21, 0x3F	; 63
    111c:	0e 94 59 14 	call	0x28b2	; 0x28b2 <__cmpsf2>
    1120:	88 23       	and	r24, r24
    1122:	1c f4       	brge	.+6      	; 0x112a <glcd_scrolling_bar_graph_timing+0x7e>
    1124:	61 e0       	ldi	r22, 0x01	; 1
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	24 c0       	rjmp	.+72     	; 0x1172 <glcd_scrolling_bar_graph_timing+0xc6>
		__ticks = 1;
	else if (__tmp > 65535)
    112a:	c8 01       	movw	r24, r16
    112c:	b7 01       	movw	r22, r14
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	3f ef       	ldi	r19, 0xFF	; 255
    1132:	4f e7       	ldi	r20, 0x7F	; 127
    1134:	57 e4       	ldi	r21, 0x47	; 71
    1136:	0e 94 13 15 	call	0x2a26	; 0x2a26 <__gesf2>
    113a:	18 16       	cp	r1, r24
    113c:	b4 f4       	brge	.+44     	; 0x116a <glcd_scrolling_bar_graph_timing+0xbe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    113e:	c6 01       	movw	r24, r12
    1140:	b5 01       	movw	r22, r10
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	40 e2       	ldi	r20, 0x20	; 32
    1148:	51 e4       	ldi	r21, 0x41	; 65
    114a:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__mulsf3>
    114e:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__fixunssfsi>
    1152:	80 e9       	ldi	r24, 0x90	; 144
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	05 c0       	rjmp	.+10     	; 0x1162 <glcd_scrolling_bar_graph_timing+0xb6>
    1158:	fc 01       	movw	r30, r24
    115a:	31 97       	sbiw	r30, 0x01	; 1
    115c:	f1 f7       	brne	.-4      	; 0x115a <glcd_scrolling_bar_graph_timing+0xae>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115e:	61 50       	subi	r22, 0x01	; 1
    1160:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1162:	61 15       	cp	r22, r1
    1164:	71 05       	cpc	r23, r1
    1166:	c1 f7       	brne	.-16     	; 0x1158 <glcd_scrolling_bar_graph_timing+0xac>
    1168:	07 c0       	rjmp	.+14     	; 0x1178 <glcd_scrolling_bar_graph_timing+0xcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    116a:	c8 01       	movw	r24, r16
    116c:	b7 01       	movw	r22, r14
    116e:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__fixunssfsi>
    1172:	cb 01       	movw	r24, r22
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	f1 f7       	brne	.-4      	; 0x1174 <glcd_scrolling_bar_graph_timing+0xc8>
	}
}
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	ff 90       	pop	r15
    117e:	ef 90       	pop	r14
    1180:	df 90       	pop	r13
    1182:	cf 90       	pop	r12
    1184:	bf 90       	pop	r11
    1186:	af 90       	pop	r10
    1188:	9f 90       	pop	r9
    118a:	8f 90       	pop	r8
    118c:	7f 90       	pop	r7
    118e:	08 95       	ret

00001190 <glcd_bar_graph_vertical_no_border>:
	glcd_draw_rect(x, y, width, height, BLACK);
	glcd_fill_rect(x+1, y+1+glcd_map(0,height-2,255-val), width-2, height-2-glcd_map(0,height-2,255-val), BLACK);
}

void glcd_bar_graph_vertical_no_border(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    1190:	df 92       	push	r13
    1192:	ef 92       	push	r14
    1194:	ff 92       	push	r15
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
    119a:	e8 2e       	mov	r14, r24
    119c:	f6 2e       	mov	r15, r22
    119e:	d4 2e       	mov	r13, r20
    11a0:	12 2f       	mov	r17, r18
    11a2:	40 2f       	mov	r20, r16
	glcd_fill_rect(x, y+glcd_map(0,height-2,255-val), width, height-2-glcd_map(0,height-2,255-val), BLACK);
    11a4:	62 2f       	mov	r22, r18
    11a6:	62 50       	subi	r22, 0x02	; 2
    11a8:	40 95       	com	r20
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	0e 94 b3 07 	call	0xf66	; 0xf66 <glcd_map>
    11b0:	f8 0e       	add	r15, r24
    11b2:	18 1b       	sub	r17, r24
    11b4:	12 50       	subi	r17, 0x02	; 2
    11b6:	8e 2d       	mov	r24, r14
    11b8:	6f 2d       	mov	r22, r15
    11ba:	4d 2d       	mov	r20, r13
    11bc:	21 2f       	mov	r18, r17
    11be:	01 e0       	ldi	r16, 0x01	; 1
    11c0:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <glcd_fill_rect>
}
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	ff 90       	pop	r15
    11ca:	ef 90       	pop	r14
    11cc:	df 90       	pop	r13
    11ce:	08 95       	ret

000011d0 <glcd_bar_graph_vertical>:
	}	
	glcd_fill_rect(x, y, glcd_map(0,width,val), height , BLACK);
}

void glcd_bar_graph_vertical(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    11d0:	cf 92       	push	r12
    11d2:	df 92       	push	r13
    11d4:	ef 92       	push	r14
    11d6:	ff 92       	push	r15
    11d8:	0f 93       	push	r16
    11da:	1f 93       	push	r17
    11dc:	c8 2e       	mov	r12, r24
    11de:	d6 2e       	mov	r13, r22
    11e0:	e4 2e       	mov	r14, r20
    11e2:	12 2f       	mov	r17, r18
    11e4:	f0 2e       	mov	r15, r16
	glcd_draw_rect(x, y, width, height, BLACK);
    11e6:	01 e0       	ldi	r16, 0x01	; 1
    11e8:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <glcd_draw_rect>
	glcd_fill_rect(x+1, y+1+glcd_map(0,height-2,255-val), width-2, height-2-glcd_map(0,height-2,255-val), BLACK);
    11ec:	61 2f       	mov	r22, r17
    11ee:	62 50       	subi	r22, 0x02	; 2
    11f0:	f0 94       	com	r15
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	4f 2d       	mov	r20, r15
    11f6:	0e 94 b3 07 	call	0xf66	; 0xf66 <glcd_map>
    11fa:	68 2f       	mov	r22, r24
    11fc:	6f 5f       	subi	r22, 0xFF	; 255
    11fe:	6d 0d       	add	r22, r13
    1200:	9e ef       	ldi	r25, 0xFE	; 254
    1202:	e9 0e       	add	r14, r25
    1204:	18 1b       	sub	r17, r24
    1206:	12 50       	subi	r17, 0x02	; 2
    1208:	8c 2d       	mov	r24, r12
    120a:	8f 5f       	subi	r24, 0xFF	; 255
    120c:	4e 2d       	mov	r20, r14
    120e:	21 2f       	mov	r18, r17
    1210:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <glcd_fill_rect>
}
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	ff 90       	pop	r15
    121a:	ef 90       	pop	r14
    121c:	df 90       	pop	r13
    121e:	cf 90       	pop	r12
    1220:	08 95       	ret

00001222 <glcd_bar_graph_horizontal_no_border>:
	glcd_draw_rect(x, y, width, height, BLACK);
	glcd_fill_rect(x+1, y+1, glcd_map(0,width-2,val), height-2 , BLACK);
}

void glcd_bar_graph_horizontal_no_border(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    1222:	ef 92       	push	r14
    1224:	ff 92       	push	r15
    1226:	0f 93       	push	r16
    1228:	1f 93       	push	r17
    122a:	f8 2e       	mov	r15, r24
    122c:	e6 2e       	mov	r14, r22
    122e:	12 2f       	mov	r17, r18
	if (height < 3) {
    1230:	23 30       	cpi	r18, 0x03	; 3
    1232:	60 f0       	brcs	.+24     	; 0x124c <glcd_bar_graph_horizontal_no_border+0x2a>
		return;
	}	
	glcd_fill_rect(x, y, glcd_map(0,width,val), height , BLACK);
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	64 2f       	mov	r22, r20
    1238:	40 2f       	mov	r20, r16
    123a:	0e 94 b3 07 	call	0xf66	; 0xf66 <glcd_map>
    123e:	48 2f       	mov	r20, r24
    1240:	8f 2d       	mov	r24, r15
    1242:	6e 2d       	mov	r22, r14
    1244:	21 2f       	mov	r18, r17
    1246:	01 e0       	ldi	r16, 0x01	; 1
    1248:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <glcd_fill_rect>
}
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	ff 90       	pop	r15
    1252:	ef 90       	pop	r14
    1254:	08 95       	ret

00001256 <glcd_bar_graph_horizontal>:
#include "glcd.h"

static uint8_t glcd_map(uint8_t x1, uint8_t x2, uint8_t x);

void glcd_bar_graph_horizontal(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t val)
{
    1256:	cf 92       	push	r12
    1258:	df 92       	push	r13
    125a:	ef 92       	push	r14
    125c:	ff 92       	push	r15
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	c8 2e       	mov	r12, r24
    1264:	e6 2e       	mov	r14, r22
    1266:	14 2f       	mov	r17, r20
    1268:	f2 2e       	mov	r15, r18
    126a:	d0 2e       	mov	r13, r16
	if (height < 3) {
    126c:	82 e0       	ldi	r24, 0x02	; 2
    126e:	82 17       	cp	r24, r18
    1270:	a0 f4       	brcc	.+40     	; 0x129a <glcd_bar_graph_horizontal+0x44>
		return;
	}
	glcd_draw_rect(x, y, width, height, BLACK);
    1272:	8c 2d       	mov	r24, r12
    1274:	01 e0       	ldi	r16, 0x01	; 1
    1276:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <glcd_draw_rect>
	glcd_fill_rect(x+1, y+1, glcd_map(0,width-2,val), height-2 , BLACK);
    127a:	12 50       	subi	r17, 0x02	; 2
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	61 2f       	mov	r22, r17
    1280:	4d 2d       	mov	r20, r13
    1282:	0e 94 b3 07 	call	0xf66	; 0xf66 <glcd_map>
    1286:	48 2f       	mov	r20, r24
    1288:	e3 94       	inc	r14
    128a:	8e ef       	ldi	r24, 0xFE	; 254
    128c:	f8 0e       	add	r15, r24
    128e:	8c 2d       	mov	r24, r12
    1290:	8f 5f       	subi	r24, 0xFF	; 255
    1292:	6e 2d       	mov	r22, r14
    1294:	2f 2d       	mov	r18, r15
    1296:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <glcd_fill_rect>
}
    129a:	1f 91       	pop	r17
    129c:	0f 91       	pop	r16
    129e:	ff 90       	pop	r15
    12a0:	ef 90       	pop	r14
    12a2:	df 90       	pop	r13
    12a4:	cf 90       	pop	r12
    12a6:	08 95       	ret

000012a8 <glcd_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
    12a8:	0f 93       	push	r16
	/* Supports variable width fonts */
	font_current.font_table = font_table;
    12aa:	90 93 68 03 	sts	0x0368, r25
    12ae:	80 93 67 03 	sts	0x0367, r24
	font_current.width = width;
    12b2:	60 93 69 03 	sts	0x0369, r22
	font_current.height = height;
    12b6:	40 93 6a 03 	sts	0x036A, r20
	font_current.start_char = start_char;
    12ba:	20 93 6b 03 	sts	0x036B, r18
	font_current.end_char = end_char;
    12be:	00 93 6c 03 	sts	0x036C, r16
	font_current.table_type = MIKRO; /* Only supports MikroElektronika generated format at the moment */
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	80 93 6d 03 	sts	0x036D, r24
}
    12c8:	0f 91       	pop	r16
    12ca:	08 95       	ret

000012cc <glcd_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char, font_table_type_t type)
#else
void glcd_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char, font_table_type_t type)
#endif
{
    12cc:	ef 92       	push	r14
    12ce:	0f 93       	push	r16
	/* Supports variable width fonts */
	font_current.font_table = font_table;
    12d0:	90 93 68 03 	sts	0x0368, r25
    12d4:	80 93 67 03 	sts	0x0367, r24
	font_current.width = width;
    12d8:	60 93 69 03 	sts	0x0369, r22
	font_current.height = height;
    12dc:	40 93 6a 03 	sts	0x036A, r20
	font_current.start_char = start_char;
    12e0:	20 93 6b 03 	sts	0x036B, r18
	font_current.end_char = end_char;
    12e4:	00 93 6c 03 	sts	0x036C, r16
	font_current.table_type = type; /* Only supports MikroElektronika generated format at the moment */
    12e8:	e0 92 6d 03 	sts	0x036D, r14
}
    12ec:	0f 91       	pop	r16
    12ee:	ef 90       	pop	r14
    12f0:	08 95       	ret

000012f2 <glcd_draw_char_xy>:

uint8_t glcd_draw_char_xy(uint8_t x, uint8_t y, char c)
{
    12f2:	2f 92       	push	r2
    12f4:	3f 92       	push	r3
    12f6:	4f 92       	push	r4
    12f8:	5f 92       	push	r5
    12fa:	6f 92       	push	r6
    12fc:	7f 92       	push	r7
    12fe:	8f 92       	push	r8
    1300:	9f 92       	push	r9
    1302:	af 92       	push	r10
    1304:	bf 92       	push	r11
    1306:	cf 92       	push	r12
    1308:	df 92       	push	r13
    130a:	ef 92       	push	r14
    130c:	ff 92       	push	r15
    130e:	0f 93       	push	r16
    1310:	1f 93       	push	r17
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	63 97       	sbiw	r28, 0x13	; 19
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	de bf       	out	0x3e, r29	; 62
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	cd bf       	out	0x3d, r28	; 61
    1326:	48 2e       	mov	r4, r24
    1328:	e6 2e       	mov	r14, r22
    132a:	34 2f       	mov	r19, r20
	if (c < font_current.start_char || c > font_current.end_char) {
    132c:	50 91 6b 03 	lds	r21, 0x036B
    1330:	45 17       	cp	r20, r21
    1332:	20 f0       	brcs	.+8      	; 0x133c <glcd_draw_char_xy+0x4a>
    1334:	80 91 6c 03 	lds	r24, 0x036C
    1338:	84 17       	cp	r24, r20
    133a:	08 f4       	brcc	.+2      	; 0x133e <glcd_draw_char_xy+0x4c>
    133c:	3e e2       	ldi	r19, 0x2E	; 46
		c = '.';
	}
	
	if (font_current.table_type == STANG) {
    133e:	80 91 6d 03 	lds	r24, 0x036D
    1342:	88 23       	and	r24, r24
    1344:	09 f0       	breq	.+2      	; 0x1348 <glcd_draw_char_xy+0x56>
    1346:	58 c0       	rjmp	.+176    	; 0x13f8 <glcd_draw_char_xy+0x106>
    1348:	04 2d       	mov	r16, r4
    134a:	ff 24       	eor	r15, r15
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    134c:	43 2e       	mov	r4, r19
    134e:	55 24       	eor	r5, r5
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    1350:	60 2e       	mov	r6, r16
    1352:	77 24       	eor	r7, r7
    1354:	8e 2c       	mov	r8, r14
    1356:	99 24       	eor	r9, r9
    1358:	49 c0       	rjmp	.+146    	; 0x13ec <glcd_draw_char_xy+0xfa>
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    135a:	4f 2d       	mov	r20, r15
    135c:	50 e0       	ldi	r21, 0x00	; 0
    135e:	80 91 6b 03 	lds	r24, 0x036B
    1362:	92 01       	movw	r18, r4
    1364:	28 1b       	sub	r18, r24
    1366:	31 09       	sbc	r19, r1
    1368:	89 2f       	mov	r24, r25
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	bc 01       	movw	r22, r24
    136e:	26 9f       	mul	r18, r22
    1370:	c0 01       	movw	r24, r0
    1372:	27 9f       	mul	r18, r23
    1374:	90 0d       	add	r25, r0
    1376:	36 9f       	mul	r19, r22
    1378:	90 0d       	add	r25, r0
    137a:	11 24       	eor	r1, r1
    137c:	84 0f       	add	r24, r20
    137e:	95 1f       	adc	r25, r21
    1380:	e0 91 67 03 	lds	r30, 0x0367
    1384:	f0 91 68 03 	lds	r31, 0x0368
    1388:	e8 0f       	add	r30, r24
    138a:	f9 1f       	adc	r31, r25
    138c:	e4 91       	lpm	r30, Z+
    138e:	1e 2d       	mov	r17, r14
    1390:	22 24       	eor	r2, r2
    1392:	33 24       	eor	r3, r3
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    1394:	5a 01       	movw	r10, r20
    1396:	a6 0c       	add	r10, r6
    1398:	b7 1c       	adc	r11, r7
					/* Don't try and write past the dimensions of the LCD */
					return 0;
				}
				if (dat & (1<<j)) {
    139a:	ce 2e       	mov	r12, r30
    139c:	dd 24       	eor	r13, r13
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
				/* Set pixel color for each bit of the column (8-bits) */
				if (x+i >= GLCD_LCD_WIDTH || y+j >= GLCD_LCD_HEIGHT) {
    139e:	74 e5       	ldi	r23, 0x54	; 84
    13a0:	a7 16       	cp	r10, r23
    13a2:	b1 04       	cpc	r11, r1
    13a4:	0c f0       	brlt	.+2      	; 0x13a8 <glcd_draw_char_xy+0xb6>
    13a6:	70 c1       	rjmp	.+736    	; 0x1688 <glcd_draw_char_xy+0x396>
    13a8:	c1 01       	movw	r24, r2
    13aa:	88 0d       	add	r24, r8
    13ac:	99 1d       	adc	r25, r9
    13ae:	c0 97       	sbiw	r24, 0x30	; 48
    13b0:	0c f0       	brlt	.+2      	; 0x13b4 <glcd_draw_char_xy+0xc2>
    13b2:	6a c1       	rjmp	.+724    	; 0x1688 <glcd_draw_char_xy+0x396>
					/* Don't try and write past the dimensions of the LCD */
					return 0;
				}
				if (dat & (1<<j)) {
    13b4:	c6 01       	movw	r24, r12
    13b6:	02 2c       	mov	r0, r2
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <glcd_draw_char_xy+0xcc>
    13ba:	95 95       	asr	r25
    13bc:	87 95       	ror	r24
    13be:	0a 94       	dec	r0
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <glcd_draw_char_xy+0xc8>
    13c2:	80 ff       	sbrs	r24, 0
    13c4:	04 c0       	rjmp	.+8      	; 0x13ce <glcd_draw_char_xy+0xdc>
					glcd_set_pixel(x+i,y+j,BLACK);
    13c6:	80 2f       	mov	r24, r16
    13c8:	61 2f       	mov	r22, r17
    13ca:	41 e0       	ldi	r20, 0x01	; 1
    13cc:	03 c0       	rjmp	.+6      	; 0x13d4 <glcd_draw_char_xy+0xe2>
				} else {
					glcd_set_pixel(x+i,y+j,WHITE);
    13ce:	80 2f       	mov	r24, r16
    13d0:	61 2f       	mov	r22, r17
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
    13d8:	08 94       	sec
    13da:	21 1c       	adc	r2, r1
    13dc:	31 1c       	adc	r3, r1
    13de:	1f 5f       	subi	r17, 0xFF	; 255
			uint8_t dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
			uint8_t dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
			uint8_t j;
			for (j = 0; j < 8; j++) {
    13e0:	88 e0       	ldi	r24, 0x08	; 8
    13e2:	28 16       	cp	r2, r24
    13e4:	31 04       	cpc	r3, r1
    13e6:	d9 f6       	brne	.-74     	; 0x139e <glcd_draw_char_xy+0xac>
	if (font_current.table_type == STANG) {
		/* Font table in Pascal Stang format (single byte height with with no width specifier) */
		/* Maximum height of 8 bits only */
			
		uint8_t i;
		for ( i = 0; i < font_current.width; i++ ) {
    13e8:	f3 94       	inc	r15
    13ea:	0f 5f       	subi	r16, 0xFF	; 255
    13ec:	90 91 69 03 	lds	r25, 0x0369
    13f0:	f9 16       	cp	r15, r25
    13f2:	08 f4       	brcc	.+2      	; 0x13f6 <glcd_draw_char_xy+0x104>
    13f4:	b2 cf       	rjmp	.-156    	; 0x135a <glcd_draw_char_xy+0x68>
    13f6:	49 c1       	rjmp	.+658    	; 0x168a <glcd_draw_char_xy+0x398>
		
		/* always return how many pixels of width were written */
		/* here for "stang" format fonts, it is always fixed */
		return font_current.width;
		
	} else if (font_current.table_type == MIKRO) {
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	09 f0       	breq	.+2      	; 0x13fe <glcd_draw_char_xy+0x10c>
    13fc:	9c c0       	rjmp	.+312    	; 0x1536 <glcd_draw_char_xy+0x244>
		
		uint8_t i;
		uint8_t var_width;
		uint8_t bytes_high;
		
		if ((font_current.height % 8) > 0){
    13fe:	20 91 6a 03 	lds	r18, 0x036A
    1402:	82 2f       	mov	r24, r18
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	87 70       	andi	r24, 0x07	; 7
    1408:	90 70       	andi	r25, 0x00	; 0
    140a:	26 95       	lsr	r18
    140c:	26 95       	lsr	r18
    140e:	26 95       	lsr	r18
    1410:	89 2b       	or	r24, r25
    1412:	09 f0       	breq	.+2      	; 0x1416 <glcd_draw_char_xy+0x124>
			bytes_high = (font_current.height / 8) + 1;
    1414:	2f 5f       	subi	r18, 0xFF	; 255
		}
		else{
			bytes_high = (font_current.height / 8);
    1416:	2c 83       	std	Y+4, r18	; 0x04
		}
		uint8_t bytes_per_char = font_current.width * bytes_high + 1; /* The +1 is the width byte at the start */
		
		const char *p;
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
    1418:	80 91 69 03 	lds	r24, 0x0369
    141c:	9c 81       	ldd	r25, Y+4	; 0x04
    141e:	98 9f       	mul	r25, r24
    1420:	80 2d       	mov	r24, r0
    1422:	11 24       	eor	r1, r1
    1424:	8f 5f       	subi	r24, 0xFF	; 255
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	23 2f       	mov	r18, r19
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	25 1b       	sub	r18, r21
    142e:	31 09       	sbc	r19, r1
    1430:	dc 01       	movw	r26, r24
    1432:	a2 9f       	mul	r26, r18
    1434:	c0 01       	movw	r24, r0
    1436:	a3 9f       	mul	r26, r19
    1438:	90 0d       	add	r25, r0
    143a:	b2 9f       	mul	r27, r18
    143c:	90 0d       	add	r25, r0
    143e:	11 24       	eor	r1, r1
    1440:	e0 91 67 03 	lds	r30, 0x0367
    1444:	f0 91 68 03 	lds	r31, 0x0368
    1448:	e8 0f       	add	r30, r24
    144a:	f9 1f       	adc	r31, r25

		/* The first byte per character is always the width of the character */
#if defined(GLCD_DEVICE_AVR8)		
		var_width = pgm_read_byte(p);
    144c:	b4 91       	lpm	r27, Z+
    144e:	bb 83       	std	Y+3, r27	; 0x03
    1450:	3c 81       	ldd	r19, Y+4	; 0x04
    1452:	23 2f       	mov	r18, r19
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	3a 83       	std	Y+2, r19	; 0x02
    1458:	29 83       	std	Y+1, r18	; 0x01
    145a:	3f 01       	movw	r6, r30
    145c:	08 94       	sec
    145e:	61 1c       	adc	r6, r1
    1460:	71 1c       	adc	r7, r1
    1462:	54 2c       	mov	r5, r4
    1464:	88 24       	eor	r8, r8
    1466:	99 24       	eor	r9, r9
		if (x+var_width >= GLCD_LCD_WIDTH || y+font_current.height >= GLCD_LCD_HEIGHT) {
			return;
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
    1468:	e9 8a       	std	Y+17, r14	; 0x11
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    146a:	44 2d       	mov	r20, r4
    146c:	50 e0       	ldi	r21, 0x00	; 0
    146e:	5c 87       	std	Y+12, r21	; 0x0c
    1470:	4b 87       	std	Y+11, r20	; 0x0b
    1472:	4f c0       	rjmp	.+158    	; 0x1512 <glcd_draw_char_xy+0x220>
		
		for ( i = 0; i < var_width; i++ ) {
			uint8_t j;
			for ( j = 0; j < bytes_high; j++ ) {
#if defined(GLCD_DEVICE_AVR8)				
				uint8_t dat = pgm_read_byte( p + i*bytes_high + j );
    1474:	f5 01       	movw	r30, r10
    1476:	84 91       	lpm	r24, Z+
    1478:	e8 86       	std	Y+8, r14	; 0x08
    147a:	86 01       	movw	r16, r12
    147c:	1b 8a       	std	Y+19, r1	; 0x13
    147e:	1a 8a       	std	Y+18, r1	; 0x12
					if ((j*8 + bit) >= font_current.height) {
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    1480:	28 2e       	mov	r2, r24
    1482:	33 24       	eor	r3, r3
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    1484:	29 85       	ldd	r18, Y+9	; 0x09
    1486:	3a 85       	ldd	r19, Y+10	; 0x0a
    1488:	24 35       	cpi	r18, 0x54	; 84
    148a:	31 05       	cpc	r19, r1
    148c:	0c f0       	brlt	.+2      	; 0x1490 <glcd_draw_char_xy+0x19e>
    148e:	fc c0       	rjmp	.+504    	; 0x1688 <glcd_draw_char_xy+0x396>
    1490:	2a 89       	ldd	r18, Y+18	; 0x12
    1492:	8a 89       	ldd	r24, Y+18	; 0x12
    1494:	9b 89       	ldd	r25, Y+19	; 0x13
    1496:	8e 0d       	add	r24, r14
    1498:	9f 1d       	adc	r25, r15
    149a:	c0 97       	sbiw	r24, 0x30	; 48
    149c:	0c f0       	brlt	.+2      	; 0x14a0 <glcd_draw_char_xy+0x1ae>
    149e:	f4 c0       	rjmp	.+488    	; 0x1688 <glcd_draw_char_xy+0x396>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
    14a0:	80 91 6a 03 	lds	r24, 0x036A
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	08 17       	cp	r16, r24
    14a8:	19 07       	cpc	r17, r25
    14aa:	94 f4       	brge	.+36     	; 0x14d0 <glcd_draw_char_xy+0x1de>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    14ac:	c1 01       	movw	r24, r2
    14ae:	02 2e       	mov	r0, r18
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <glcd_draw_char_xy+0x1c4>
    14b2:	95 95       	asr	r25
    14b4:	87 95       	ror	r24
    14b6:	0a 94       	dec	r0
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <glcd_draw_char_xy+0x1c0>
    14ba:	68 85       	ldd	r22, Y+8	; 0x08
    14bc:	62 0f       	add	r22, r18
    14be:	80 ff       	sbrs	r24, 0
    14c0:	03 c0       	rjmp	.+6      	; 0x14c8 <glcd_draw_char_xy+0x1d6>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
    14c2:	85 2d       	mov	r24, r5
    14c4:	41 e0       	ldi	r20, 0x01	; 1
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <glcd_draw_char_xy+0x1da>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
    14c8:	85 2d       	mov	r24, r5
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
    14d0:	4a 89       	ldd	r20, Y+18	; 0x12
    14d2:	5b 89       	ldd	r21, Y+19	; 0x13
    14d4:	4f 5f       	subi	r20, 0xFF	; 255
    14d6:	5f 4f       	sbci	r21, 0xFF	; 255
    14d8:	5b 8b       	std	Y+19, r21	; 0x13
    14da:	4a 8b       	std	Y+18, r20	; 0x12
    14dc:	0f 5f       	subi	r16, 0xFF	; 255
    14de:	1f 4f       	sbci	r17, 0xFF	; 255
				uint8_t dat = pgm_read_byte( p + i*bytes_high + j );
#else
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
    14e0:	48 30       	cpi	r20, 0x08	; 8
    14e2:	51 05       	cpc	r21, r1
    14e4:	79 f6       	brne	.-98     	; 0x1484 <glcd_draw_char_xy+0x192>
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
			uint8_t j;
			for ( j = 0; j < bytes_high; j++ ) {
    14e6:	43 94       	inc	r4
    14e8:	68 e0       	ldi	r22, 0x08	; 8
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	e6 0e       	add	r14, r22
    14ee:	f7 1e       	adc	r15, r23
    14f0:	c6 0e       	add	r12, r22
    14f2:	d7 1e       	adc	r13, r23
    14f4:	08 94       	sec
    14f6:	a1 1c       	adc	r10, r1
    14f8:	b1 1c       	adc	r11, r1
    14fa:	7c 81       	ldd	r23, Y+4	; 0x04
    14fc:	47 16       	cp	r4, r23
    14fe:	08 f4       	brcc	.+2      	; 0x1502 <glcd_draw_char_xy+0x210>
    1500:	b9 cf       	rjmp	.-142    	; 0x1474 <glcd_draw_char_xy+0x182>
    1502:	08 94       	sec
    1504:	81 1c       	adc	r8, r1
    1506:	91 1c       	adc	r9, r1
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	9a 81       	ldd	r25, Y+2	; 0x02
    150c:	68 0e       	add	r6, r24
    150e:	79 1e       	adc	r7, r25
    1510:	53 94       	inc	r5
		if (x+var_width >= GLCD_LCD_WIDTH || y+font_current.height >= GLCD_LCD_HEIGHT) {
			return;
		}
		*/
		
		for ( i = 0; i < var_width; i++ ) {
    1512:	9b 81       	ldd	r25, Y+3	; 0x03
    1514:	89 16       	cp	r8, r25
    1516:	08 f0       	brcs	.+2      	; 0x151a <glcd_draw_char_xy+0x228>
    1518:	b8 c0       	rjmp	.+368    	; 0x168a <glcd_draw_char_xy+0x398>
    151a:	89 89       	ldd	r24, Y+17	; 0x11
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	7c 01       	movw	r14, r24
    1520:	53 01       	movw	r10, r6
    1522:	44 24       	eor	r4, r4
    1524:	cc 24       	eor	r12, r12
    1526:	dd 24       	eor	r13, r13
				uint8_t dat = *( p + i*bytes_high + j );
#endif
				uint8_t bit;
				for (bit = 0; bit < 8; bit++) {
					
					if (x+i >= GLCD_LCD_WIDTH || y+j*8+bit >= GLCD_LCD_HEIGHT) {
    1528:	ab 85       	ldd	r26, Y+11	; 0x0b
    152a:	bc 85       	ldd	r27, Y+12	; 0x0c
    152c:	a8 0d       	add	r26, r8
    152e:	b9 1d       	adc	r27, r9
    1530:	ba 87       	std	Y+10, r27	; 0x0a
    1532:	a9 87       	std	Y+9, r26	; 0x09
    1534:	e2 cf       	rjmp	.-60     	; 0x14fa <glcd_draw_char_xy+0x208>
				}									
			}				
		}
		return var_width;	
	
	} else if (font_current.table_type == GLCD_UTILS) {
    1536:	82 30       	cpi	r24, 0x02	; 2
    1538:	09 f0       	breq	.+2      	; 0x153c <glcd_draw_char_xy+0x24a>
    153a:	a6 c0       	rjmp	.+332    	; 0x1688 <glcd_draw_char_xy+0x396>
		
		uint8_t var_width, n;
		uint8_t bytes_high, bytes_per_char;
		const char *p;

		bytes_high = font_current.height / 8 + 1;
    153c:	b0 90 6a 03 	lds	r11, 0x036A
    1540:	b6 94       	lsr	r11
    1542:	b6 94       	lsr	r11
    1544:	b6 94       	lsr	r11
    1546:	b3 94       	inc	r11
		bytes_per_char = font_current.width * bytes_high;
    1548:	40 91 69 03 	lds	r20, 0x0369
		
		/* Point to chars first byte */
		p = font_current.font_table + (c - font_current.start_char) * bytes_per_char;
    154c:	23 2f       	mov	r18, r19
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	25 1b       	sub	r18, r21
    1552:	31 09       	sbc	r19, r1
    1554:	b4 9e       	mul	r11, r20
    1556:	80 2d       	mov	r24, r0
    1558:	11 24       	eor	r1, r1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	fc 01       	movw	r30, r24
    155e:	2e 9f       	mul	r18, r30
    1560:	c0 01       	movw	r24, r0
    1562:	2f 9f       	mul	r18, r31
    1564:	90 0d       	add	r25, r0
    1566:	3e 9f       	mul	r19, r30
    1568:	90 0d       	add	r25, r0
    156a:	11 24       	eor	r1, r1
    156c:	80 90 67 03 	lds	r8, 0x0367
    1570:	90 90 68 03 	lds	r9, 0x0368
    1574:	88 0e       	add	r8, r24
    1576:	99 1e       	adc	r9, r25
    1578:	54 2e       	mov	r5, r20
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	50 e0       	ldi	r21, 0x00	; 0
    157e:	41 50       	subi	r20, 0x01	; 1
    1580:	50 40       	sbci	r21, 0x00	; 0
    1582:	64 2f       	mov	r22, r20
    1584:	63 1b       	sub	r22, r19
    1586:	e0 e0       	ldi	r30, 0x00	; 0
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	07 c0       	rjmp	.+14     	; 0x159c <glcd_draw_char_xy+0x2aa>
			uint8_t row = 0;
			
			for (row = 0; row < bytes_high; row++) {
				uint8_t offset;
				offset = (font_current.width - 1 - n) * row;
				max_byte = *(p + offset);
    158e:	89 2f       	mov	r24, r25
    1590:	86 1b       	sub	r24, r22
    1592:	f4 01       	movw	r30, r8
    1594:	e8 0f       	add	r30, r24
    1596:	f1 1d       	adc	r31, r1
    1598:	e0 81       	ld	r30, Z
		
		while (1) {
			uint8_t max_byte = 0;
			uint8_t row = 0;
			
			for (row = 0; row < bytes_high; row++) {
    159a:	2f 5f       	subi	r18, 0xFF	; 255
    159c:	96 0f       	add	r25, r22
    159e:	2b 15       	cp	r18, r11
    15a0:	b0 f3       	brcs	.-20     	; 0x158e <glcd_draw_char_xy+0x29c>
				uint8_t offset;
				offset = (font_current.width - 1 - n) * row;
				max_byte = *(p + offset);
			}
			if (max_byte == 0) {
    15a2:	ee 23       	and	r30, r30
    15a4:	21 f4       	brne	.+8      	; 0x15ae <glcd_draw_char_xy+0x2bc>
				/* column is empty for all rows, go left and test again */
				/* reduce variable width by 1 */
				var_width--;
    15a6:	5a 94       	dec	r5
				if (var_width == 0) {
    15a8:	11 f0       	breq	.+4      	; 0x15ae <glcd_draw_char_xy+0x2bc>
					break;
				}
			} else {
				break; /* Part of a character was found */
			}
			n++;
    15aa:	3f 5f       	subi	r19, 0xFF	; 255
    15ac:	ea cf       	rjmp	.-44     	; 0x1582 <glcd_draw_char_xy+0x290>
		}
    15ae:	ff 24       	eor	r15, r15
    15b0:	66 24       	eor	r6, r6
    15b2:	cc 24       	eor	r12, r12
    15b4:	dd 24       	eor	r13, r13
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    15b6:	24 2d       	mov	r18, r4
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	38 8b       	std	Y+16, r19	; 0x10
    15bc:	2f 87       	std	Y+15, r18	; 0x0f
    15be:	58 c0       	rjmp	.+176    	; 0x1670 <glcd_draw_char_xy+0x37e>
				/* Loop one column at a time */
				
				uint8_t dat, bit;
				
#if defined(GLCD_DEVICE_AVR8)
				dat = pgm_read_byte( p + j*font_current.width + i );
    15c0:	8a 2d       	mov	r24, r10
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	20 91 69 03 	lds	r18, 0x0369
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	4e 81       	ldd	r20, Y+6	; 0x06
    15cc:	5f 81       	ldd	r21, Y+7	; 0x07
    15ce:	42 9f       	mul	r20, r18
    15d0:	f0 01       	movw	r30, r0
    15d2:	43 9f       	mul	r20, r19
    15d4:	f0 0d       	add	r31, r0
    15d6:	52 9f       	mul	r21, r18
    15d8:	f0 0d       	add	r31, r0
    15da:	11 24       	eor	r1, r1
    15dc:	e8 0f       	add	r30, r24
    15de:	f9 1f       	adc	r31, r25
    15e0:	e8 0d       	add	r30, r8
    15e2:	f9 1d       	adc	r31, r9
    15e4:	e4 91       	lpm	r30, Z+
    15e6:	86 01       	movw	r16, r12
    15e8:	1b 8a       	std	Y+19, r1	; 0x13
    15ea:	1a 8a       	std	Y+18, r1	; 0x12
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    15ec:	6f 85       	ldd	r22, Y+15	; 0x0f
    15ee:	78 89       	ldd	r23, Y+16	; 0x10
    15f0:	68 0f       	add	r22, r24
    15f2:	79 1f       	adc	r23, r25
    15f4:	7e 87       	std	Y+14, r23	; 0x0e
    15f6:	6d 87       	std	Y+13, r22	; 0x0d
					if ((j*8 + bit) >= font_current.height) {
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    15f8:	2e 2e       	mov	r2, r30
    15fa:	33 24       	eor	r3, r3
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
					
					if ((x+i) >= GLCD_LCD_WIDTH || (y+j*8+bit) >= GLCD_LCD_HEIGHT) {
    15fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1600:	84 35       	cpi	r24, 0x54	; 84
    1602:	91 05       	cpc	r25, r1
    1604:	0c f0       	brlt	.+2      	; 0x1608 <glcd_draw_char_xy+0x316>
    1606:	40 c0       	rjmp	.+128    	; 0x1688 <glcd_draw_char_xy+0x396>
    1608:	2a 89       	ldd	r18, Y+18	; 0x12
    160a:	8a 89       	ldd	r24, Y+18	; 0x12
    160c:	9b 89       	ldd	r25, Y+19	; 0x13
    160e:	8e 0d       	add	r24, r14
    1610:	9f 1d       	adc	r25, r15
    1612:	c0 97       	sbiw	r24, 0x30	; 48
    1614:	cc f5       	brge	.+114    	; 0x1688 <glcd_draw_char_xy+0x396>
						/* Don't write past the dimensions of the LCD, skip the entire char */
						return 0;
					}
					
					/* We should not write if the y bit exceeds font height */
					if ((j*8 + bit) >= font_current.height) {
    1616:	80 91 6a 03 	lds	r24, 0x036A
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	08 17       	cp	r16, r24
    161e:	19 07       	cpc	r17, r25
    1620:	94 f4       	brge	.+36     	; 0x1646 <glcd_draw_char_xy+0x354>
						/* Skip the bit */
						continue;
					}
					
					if (dat & (1<<bit)) {
    1622:	c1 01       	movw	r24, r2
    1624:	02 2e       	mov	r0, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <glcd_draw_char_xy+0x33a>
    1628:	95 95       	asr	r25
    162a:	87 95       	ror	r24
    162c:	0a 94       	dec	r0
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <glcd_draw_char_xy+0x336>
    1630:	6d 81       	ldd	r22, Y+5	; 0x05
    1632:	62 0f       	add	r22, r18
    1634:	80 ff       	sbrs	r24, 0
    1636:	03 c0       	rjmp	.+6      	; 0x163e <glcd_draw_char_xy+0x34c>
						glcd_set_pixel(x+i,y+j*8+bit,BLACK);
    1638:	87 2d       	mov	r24, r7
    163a:	41 e0       	ldi	r20, 0x01	; 1
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <glcd_draw_char_xy+0x350>
					} else {
						glcd_set_pixel(x+i,y+j*8+bit,WHITE);
    163e:	87 2d       	mov	r24, r7
    1640:	40 e0       	ldi	r20, 0x00	; 0
    1642:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
    1646:	ea 89       	ldd	r30, Y+18	; 0x12
    1648:	fb 89       	ldd	r31, Y+19	; 0x13
    164a:	31 96       	adiw	r30, 0x01	; 1
    164c:	fb 8b       	std	Y+19, r31	; 0x13
    164e:	ea 8b       	std	Y+18, r30	; 0x12
    1650:	0f 5f       	subi	r16, 0xFF	; 255
    1652:	1f 4f       	sbci	r17, 0xFF	; 255
				dat = pgm_read_byte( p + j*font_current.width + i );
#else
				dat = *( p + j*font_current.width + i );
#endif
				
				for (bit = 0; bit < 8; bit++) {
    1654:	38 97       	sbiw	r30, 0x08	; 8
    1656:	91 f6       	brne	.-92     	; 0x15fc <glcd_draw_char_xy+0x30a>
		uint8_t j; /* loop as rows, 1st row, j=0 */
		for ( j = 0; j < bytes_high; j++ ) {
			/* Loop one row at a time */
		
			uint8_t i;
			for ( i = 0; i < var_width; i++ ) {
    1658:	a3 94       	inc	r10
    165a:	73 94       	inc	r7
    165c:	a5 14       	cp	r10, r5
    165e:	08 f4       	brcc	.+2      	; 0x1662 <glcd_draw_char_xy+0x370>
    1660:	af cf       	rjmp	.-162    	; 0x15c0 <glcd_draw_char_xy+0x2ce>
		/* Uncomment line below, to force fixed width, for debugging only */
		//var_width = font_current.width; // bypass auto width detection, treat as fixed width
				
		/* For glcd-utils format, we write one complete row at a time */
		uint8_t j; /* loop as rows, 1st row, j=0 */
		for ( j = 0; j < bytes_high; j++ ) {
    1662:	63 94       	inc	r6
    1664:	28 e0       	ldi	r18, 0x08	; 8
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	e2 0e       	add	r14, r18
    166a:	f3 1e       	adc	r15, r19
    166c:	c2 0e       	add	r12, r18
    166e:	d3 1e       	adc	r13, r19
    1670:	6b 14       	cp	r6, r11
    1672:	10 f0       	brcs	.+4      	; 0x1678 <glcd_draw_char_xy+0x386>
    1674:	95 2d       	mov	r25, r5
    1676:	09 c0       	rjmp	.+18     	; 0x168a <glcd_draw_char_xy+0x398>
				/* Loop one column at a time */
				
				uint8_t dat, bit;
				
#if defined(GLCD_DEVICE_AVR8)
				dat = pgm_read_byte( p + j*font_current.width + i );
    1678:	46 2d       	mov	r20, r6
    167a:	50 e0       	ldi	r21, 0x00	; 0
    167c:	5f 83       	std	Y+7, r21	; 0x07
    167e:	4e 83       	std	Y+6, r20	; 0x06
    1680:	ed 82       	std	Y+5, r14	; 0x05
    1682:	74 2c       	mov	r7, r4
    1684:	aa 24       	eor	r10, r10
    1686:	ea cf       	rjmp	.-44     	; 0x165c <glcd_draw_char_xy+0x36a>
    1688:	90 e0       	ldi	r25, 0x00	; 0
		/* Don't recognise the font table */
		return 0;
		
	}

}
    168a:	89 2f       	mov	r24, r25
    168c:	63 96       	adiw	r28, 0x13	; 19
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	f8 94       	cli
    1692:	de bf       	out	0x3e, r29	; 62
    1694:	0f be       	out	0x3f, r0	; 63
    1696:	cd bf       	out	0x3d, r28	; 61
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	ff 90       	pop	r15
    16a2:	ef 90       	pop	r14
    16a4:	df 90       	pop	r13
    16a6:	cf 90       	pop	r12
    16a8:	bf 90       	pop	r11
    16aa:	af 90       	pop	r10
    16ac:	9f 90       	pop	r9
    16ae:	8f 90       	pop	r8
    16b0:	7f 90       	pop	r7
    16b2:	6f 90       	pop	r6
    16b4:	5f 90       	pop	r5
    16b6:	4f 90       	pop	r4
    16b8:	3f 90       	pop	r3
    16ba:	2f 90       	pop	r2
    16bc:	08 95       	ret

000016be <glcd_draw_string_xy_P>:
		c++;
	}		
}

void glcd_draw_string_xy_P(uint8_t x, uint8_t y, const char *str)
{
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	18 2f       	mov	r17, r24
    16c8:	06 2f       	mov	r16, r22
    16ca:	ea 01       	movw	r28, r20
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
    16cc:	86 2f       	mov	r24, r22
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	40 91 6a 03 	lds	r20, 0x036A
    16d4:	2f e2       	ldi	r18, 0x2F	; 47
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	24 1b       	sub	r18, r20
    16da:	31 09       	sbc	r19, r1
    16dc:	28 17       	cp	r18, r24
    16de:	39 07       	cpc	r19, r25
    16e0:	64 f0       	brlt	.+24     	; 0x16fa <glcd_draw_string_xy_P+0x3c>
		/* Character won't fit */
		return;
    16e2:	fe 01       	movw	r30, r28
	}

	while (1) {
#if defined(GLCD_DEVICE_AVR8)		
		char c = pgm_read_byte(str++);
    16e4:	21 96       	adiw	r28, 0x01	; 1
    16e6:	44 91       	lpm	r20, Z+
#else
		char c = *(str++);
#endif
		if (!c)
    16e8:	44 23       	and	r20, r20
    16ea:	39 f0       	breq	.+14     	; 0x16fa <glcd_draw_string_xy_P+0x3c>
			return;
					
		width = glcd_draw_char_xy(x,y,c);
    16ec:	81 2f       	mov	r24, r17
    16ee:	60 2f       	mov	r22, r16
    16f0:	0e 94 79 09 	call	0x12f2	; 0x12f2 <glcd_draw_char_xy>
		x += (width + 1);
    16f4:	8f 5f       	subi	r24, 0xFF	; 255
    16f6:	18 0f       	add	r17, r24
    16f8:	f4 cf       	rjmp	.-24     	; 0x16e2 <glcd_draw_string_xy_P+0x24>
		c++;
	}		
}
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	1f 91       	pop	r17
    1700:	0f 91       	pop	r16
    1702:	08 95       	ret

00001704 <glcd_draw_string_xy>:
	}

}

void glcd_draw_string_xy(uint8_t x, uint8_t y, char *c)
{
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	18 2f       	mov	r17, r24
    170e:	06 2f       	mov	r16, r22
    1710:	ea 01       	movw	r28, r20
	uint8_t width;

	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
    1712:	86 2f       	mov	r24, r22
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	40 91 6a 03 	lds	r20, 0x036A
    171a:	2f e2       	ldi	r18, 0x2F	; 47
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	24 1b       	sub	r18, r20
    1720:	31 09       	sbc	r19, r1
    1722:	28 17       	cp	r18, r24
    1724:	39 07       	cpc	r19, r25
    1726:	44 f4       	brge	.+16     	; 0x1738 <glcd_draw_string_xy+0x34>
    1728:	0a c0       	rjmp	.+20     	; 0x173e <glcd_draw_string_xy+0x3a>
		/* Character won't fit */
		return;
	}

	while (*c) {
		width = glcd_draw_char_xy(x,y,*c);
    172a:	81 2f       	mov	r24, r17
    172c:	60 2f       	mov	r22, r16
    172e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <glcd_draw_char_xy>
		x += (width + 1);
    1732:	8f 5f       	subi	r24, 0xFF	; 255
    1734:	18 0f       	add	r17, r24
		c++;
    1736:	21 96       	adiw	r28, 0x01	; 1
	if (y > (GLCD_LCD_HEIGHT - font_current.height - 1)) {
		/* Character won't fit */
		return;
	}

	while (*c) {
    1738:	48 81       	ld	r20, Y
    173a:	44 23       	and	r20, r20
    173c:	b1 f7       	brne	.-20     	; 0x172a <glcd_draw_string_xy+0x26>
		width = glcd_draw_char_xy(x,y,*c);
		x += (width + 1);
		c++;
	}		
}
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	1f 91       	pop	r17
    1744:	0f 91       	pop	r16
    1746:	08 95       	ret

00001748 <glcd_get_pixel>:

	glcd_update_bbox(x,y,x,y);
}

/* Based on PCD8544 library by Limor Fried */
uint8_t glcd_get_pixel(uint8_t x, uint8_t y) {
    1748:	48 2f       	mov	r20, r24
	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
    174a:	84 35       	cpi	r24, 0x54	; 84
    174c:	f0 f4       	brcc	.+60     	; 0x178a <glcd_get_pixel+0x42>
    174e:	60 33       	cpi	r22, 0x30	; 48
    1750:	e0 f4       	brcc	.+56     	; 0x178a <glcd_get_pixel+0x42>
    1752:	86 2f       	mov	r24, r22
    1754:	86 95       	lsr	r24
    1756:	86 95       	lsr	r24
    1758:	86 95       	lsr	r24
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	24 e5       	ldi	r18, 0x54	; 84
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	82 9f       	mul	r24, r18
    1762:	f0 01       	movw	r30, r0
    1764:	83 9f       	mul	r24, r19
    1766:	f0 0d       	add	r31, r0
    1768:	92 9f       	mul	r25, r18
    176a:	f0 0d       	add	r31, r0
    176c:	11 24       	eor	r1, r1
    176e:	e4 0f       	add	r30, r20
    1770:	f1 1d       	adc	r31, r1
    1772:	e5 59       	subi	r30, 0x95	; 149
    1774:	fe 4f       	sbci	r31, 0xFE	; 254
    1776:	80 81       	ld	r24, Z
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	67 70       	andi	r22, 0x07	; 7
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <glcd_get_pixel+0x3a>
    177e:	95 95       	asr	r25
    1780:	87 95       	ror	r24
    1782:	6a 95       	dec	r22
    1784:	e2 f7       	brpl	.-8      	; 0x177e <glcd_get_pixel+0x36>
    1786:	81 70       	andi	r24, 0x01	; 1
    1788:	08 95       	ret
    178a:	80 e0       	ldi	r24, 0x00	; 0
	if ( glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] & ( 1 << (y%8)) ) {
		return 1;
	} else {
		return 0;
	}
}
    178c:	08 95       	ret

0000178e <glcd_draw_bitmap>:
		}
	}
}

void glcd_draw_bitmap(const unsigned char *data)
{
    178e:	bc 01       	movw	r22, r24
	glcd_select_screen(original_buffer, glcd_bbox_selected);	
#endif
	
	/* Copy bitmap data to the screen buffer */
#if defined(GLCD_DEVICE_AVR8)
	memcpy_P(glcd_buffer_selected, data, (GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8));
    1790:	80 91 63 03 	lds	r24, 0x0363
    1794:	90 91 64 03 	lds	r25, 0x0364
    1798:	48 ef       	ldi	r20, 0xF8	; 248
    179a:	51 e0       	ldi	r21, 0x01	; 1
    179c:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <memcpy_P>
#else
	memcpy(glcd_buffer_selected, data, (GLCD_LCD_WIDTH * GLCD_LCD_HEIGHT / 8));
#endif

	glcd_bbox_refresh(); 
    17a0:	0e 94 8b 06 	call	0xd16	; 0xd16 <glcd_bbox_refresh>
}
    17a4:	08 95       	ret

000017a6 <glcd_invert_pixel>:
	} else {
		return 0;
	}
}

void glcd_invert_pixel(uint8_t x, uint8_t y) {
    17a6:	0f 93       	push	r16
    17a8:	1f 93       	push	r17
    17aa:	08 2f       	mov	r16, r24
    17ac:	16 2f       	mov	r17, r22
	if ((x >= GLCD_LCD_WIDTH) || (y >= GLCD_LCD_HEIGHT)) {
    17ae:	84 35       	cpi	r24, 0x54	; 84
    17b0:	e8 f4       	brcc	.+58     	; 0x17ec <glcd_invert_pixel+0x46>
    17b2:	60 33       	cpi	r22, 0x30	; 48
    17b4:	d8 f4       	brcc	.+54     	; 0x17ec <glcd_invert_pixel+0x46>
		return;
	}
	glcd_update_bbox(x,y,x,y);
    17b6:	40 2f       	mov	r20, r16
    17b8:	21 2f       	mov	r18, r17
    17ba:	0e 94 53 06 	call	0xca6	; 0xca6 <glcd_update_bbox>
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
    17be:	e1 2f       	mov	r30, r17
    17c0:	e6 95       	lsr	r30
    17c2:	e6 95       	lsr	r30
    17c4:	e6 95       	lsr	r30
    17c6:	84 e5       	ldi	r24, 0x54	; 84
    17c8:	e8 9f       	mul	r30, r24
    17ca:	f0 01       	movw	r30, r0
    17cc:	11 24       	eor	r1, r1
    17ce:	e0 0f       	add	r30, r16
    17d0:	f1 1d       	adc	r31, r1
    17d2:	e5 59       	subi	r30, 0x95	; 149
    17d4:	fe 4f       	sbci	r31, 0xFE	; 254
    17d6:	17 70       	andi	r17, 0x07	; 7
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <glcd_invert_pixel+0x3c>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	1a 95       	dec	r17
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <glcd_invert_pixel+0x38>
    17e6:	20 81       	ld	r18, Z
    17e8:	28 27       	eor	r18, r24
    17ea:	20 83       	st	Z, r18
}
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	08 95       	ret

000017f2 <glcd_invert_area>:
		}    
	}
}

void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
    17f2:	df 92       	push	r13
    17f4:	ef 92       	push	r14
    17f6:	ff 92       	push	r15
    17f8:	0f 93       	push	r16
    17fa:	1f 93       	push	r17
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	d6 2e       	mov	r13, r22
    1802:	08 2f       	mov	r16, r24
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
    1804:	e8 2e       	mov	r14, r24
    1806:	ff 24       	eor	r15, r15
    1808:	e4 0e       	add	r14, r20
    180a:	f1 1c       	adc	r15, r1
		/* Loop through each partial column */
		for (yy = y; yy < (y+h); yy++) {
    180c:	c6 2f       	mov	r28, r22
    180e:	d0 e0       	ldi	r29, 0x00	; 0
    1810:	c2 0f       	add	r28, r18
    1812:	d1 1d       	adc	r29, r1
    1814:	0b c0       	rjmp	.+22     	; 0x182c <glcd_invert_area+0x3a>
			/* Go down and invert every pixel */
			glcd_invert_pixel(xx,yy);
    1816:	80 2f       	mov	r24, r16
    1818:	61 2f       	mov	r22, r17
    181a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <glcd_invert_pixel>
void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
		/* Loop through each partial column */
		for (yy = y; yy < (y+h); yy++) {
    181e:	1f 5f       	subi	r17, 0xFF	; 255
    1820:	81 2f       	mov	r24, r17
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	8c 17       	cp	r24, r28
    1826:	9d 07       	cpc	r25, r29
    1828:	b4 f3       	brlt	.-20     	; 0x1816 <glcd_invert_area+0x24>
}

void glcd_invert_area(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
	uint8_t xx, yy;
	for (xx = x; xx < (x+w); xx++) {
    182a:	0f 5f       	subi	r16, 0xFF	; 255
    182c:	80 2f       	mov	r24, r16
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	8e 15       	cp	r24, r14
    1832:	9f 05       	cpc	r25, r15
    1834:	14 f4       	brge	.+4      	; 0x183a <glcd_invert_area+0x48>
    1836:	1d 2d       	mov	r17, r13
    1838:	f3 cf       	rjmp	.-26     	; 0x1820 <glcd_invert_area+0x2e>
		for (yy = y; yy < (y+h); yy++) {
			/* Go down and invert every pixel */
			glcd_invert_pixel(xx,yy);
		}
	}
}
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	ff 90       	pop	r15
    1844:	ef 90       	pop	r14
    1846:	df 90       	pop	r13
    1848:	08 95       	ret

0000184a <glcd_set_pixel>:
#include <stdlib.h>
#include <string.h>
#include "glcd.h"

/* Based on PCD8544 library by Limor Fried */
void glcd_set_pixel(uint8_t x, uint8_t y, uint8_t color) {
    184a:	a8 2f       	mov	r26, r24
    184c:	76 2f       	mov	r23, r22
	if (x > (GLCD_LCD_WIDTH-1) || y > (GLCD_LCD_HEIGHT-1)) {
    184e:	84 35       	cpi	r24, 0x54	; 84
    1850:	d0 f5       	brcc	.+116    	; 0x18c6 <glcd_set_pixel+0x7c>
    1852:	60 33       	cpi	r22, 0x30	; 48
    1854:	c0 f5       	brcc	.+112    	; 0x18c6 <glcd_set_pixel+0x7c>
    1856:	56 2f       	mov	r21, r22
    1858:	56 95       	lsr	r21
    185a:	56 95       	lsr	r21
    185c:	56 95       	lsr	r21
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	26 2f       	mov	r18, r22
    1862:	30 e0       	ldi	r19, 0x00	; 0
		/* don't do anything if x/y is outside bounds of display size */
		return;
	}

	if (color) {
    1864:	44 23       	and	r20, r20
    1866:	a1 f0       	breq	.+40     	; 0x1890 <glcd_set_pixel+0x46>
		/* Set black */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] |= ( 1 << (y%8));
    1868:	e4 e5       	ldi	r30, 0x54	; 84
    186a:	5e 9f       	mul	r21, r30
    186c:	f0 01       	movw	r30, r0
    186e:	11 24       	eor	r1, r1
    1870:	e8 0f       	add	r30, r24
    1872:	f9 1f       	adc	r31, r25
    1874:	e5 59       	subi	r30, 0x95	; 149
    1876:	fe 4f       	sbci	r31, 0xFE	; 254
    1878:	27 70       	andi	r18, 0x07	; 7
    187a:	30 70       	andi	r19, 0x00	; 0
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <glcd_set_pixel+0x3c>
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	2a 95       	dec	r18
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <glcd_set_pixel+0x38>
    188a:	20 81       	ld	r18, Z
    188c:	28 2b       	or	r18, r24
    188e:	14 c0       	rjmp	.+40     	; 0x18b8 <glcd_set_pixel+0x6e>
	} else {
		/* Set white */
		glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] &= ~ (1 << (y%8));
    1890:	e4 e5       	ldi	r30, 0x54	; 84
    1892:	5e 9f       	mul	r21, r30
    1894:	f0 01       	movw	r30, r0
    1896:	11 24       	eor	r1, r1
    1898:	e8 0f       	add	r30, r24
    189a:	f9 1f       	adc	r31, r25
    189c:	e5 59       	subi	r30, 0x95	; 149
    189e:	fe 4f       	sbci	r31, 0xFE	; 254
    18a0:	27 70       	andi	r18, 0x07	; 7
    18a2:	30 70       	andi	r19, 0x00	; 0
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <glcd_set_pixel+0x64>
    18aa:	88 0f       	add	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	2a 95       	dec	r18
    18b0:	e2 f7       	brpl	.-8      	; 0x18aa <glcd_set_pixel+0x60>
    18b2:	80 95       	com	r24
    18b4:	20 81       	ld	r18, Z
    18b6:	28 23       	and	r18, r24
    18b8:	20 83       	st	Z, r18
	}

	glcd_update_bbox(x,y,x,y);
    18ba:	8a 2f       	mov	r24, r26
    18bc:	67 2f       	mov	r22, r23
    18be:	4a 2f       	mov	r20, r26
    18c0:	27 2f       	mov	r18, r23
    18c2:	0e 94 53 06 	call	0xca6	; 0xca6 <glcd_update_bbox>
    18c6:	08 95       	ret

000018c8 <glcd_fill_circle>:
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    18c8:	3f 92       	push	r3
    18ca:	4f 92       	push	r4
    18cc:	5f 92       	push	r5
    18ce:	6f 92       	push	r6
    18d0:	7f 92       	push	r7
    18d2:	8f 92       	push	r8
    18d4:	9f 92       	push	r9
    18d6:	af 92       	push	r10
    18d8:	bf 92       	push	r11
    18da:	cf 92       	push	r12
    18dc:	df 92       	push	r13
    18de:	ef 92       	push	r14
    18e0:	ff 92       	push	r15
    18e2:	0f 93       	push	r16
    18e4:	1f 93       	push	r17
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <glcd_fill_circle+0x24>
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <glcd_fill_circle+0x26>
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <glcd_fill_circle+0x28>
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	b8 2e       	mov	r11, r24
    18f6:	e6 2e       	mov	r14, r22
    18f8:	f4 2e       	mov	r15, r20
    18fa:	62 2e       	mov	r6, r18
	
	int8_t f = 1 - r;
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    18fc:	04 2f       	mov	r16, r20
    18fe:	10 e0       	ldi	r17, 0x00	; 0
	int8_t x = 0;
	int8_t y = r;
	
	int16_t i;

	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
    1900:	64 1b       	sub	r22, r20
    1902:	48 0f       	add	r20, r24
    1904:	2f 2d       	mov	r18, r15
    1906:	2e 0d       	add	r18, r14
    1908:	8f 19       	sub	r24, r15
    190a:	0e 94 53 06 	call	0xca6	; 0xca6 <glcd_update_bbox>
	
	for (i=y0-r; i<=y0+r; i++) {
    190e:	8e 2c       	mov	r8, r14
    1910:	99 24       	eor	r9, r9
    1912:	24 01       	movw	r4, r8
    1914:	40 1a       	sub	r4, r16
    1916:	51 0a       	sbc	r5, r17
    1918:	68 01       	movw	r12, r16
    191a:	c8 0c       	add	r12, r8
    191c:	d9 1c       	adc	r13, r9
    191e:	08 c0       	rjmp	.+16     	; 0x1930 <glcd_fill_circle+0x68>
		glcd_set_pixel(x0, i, color);
    1920:	8b 2d       	mov	r24, r11
    1922:	64 2d       	mov	r22, r4
    1924:	46 2d       	mov	r20, r6
    1926:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
	
	int16_t i;

	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
	
	for (i=y0-r; i<=y0+r; i++) {
    192a:	08 94       	sec
    192c:	41 1c       	adc	r4, r1
    192e:	51 1c       	adc	r5, r1
    1930:	c4 14       	cp	r12, r4
    1932:	d5 04       	cpc	r13, r5
    1934:	ac f7       	brge	.-22     	; 0x1920 <glcd_fill_circle+0x58>
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
	
	int8_t f = 1 - r;
    1936:	dd 24       	eor	r13, r13
    1938:	d3 94       	inc	r13
    193a:	df 18       	sub	r13, r15
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    193c:	00 0f       	add	r16, r16
    193e:	11 1f       	adc	r17, r17
    1940:	40 2e       	mov	r4, r16
    1942:	41 94       	neg	r4
	int8_t x = 0;
	int8_t y = r;
    1944:	cf 2c       	mov	r12, r15
    1946:	aa 24       	eor	r10, r10
    1948:	00 e0       	ldi	r16, 0x00	; 0
    194a:	10 e0       	ldi	r17, 0x00	; 0
    194c:	83 e0       	ldi	r24, 0x03	; 3
    194e:	78 2e       	mov	r7, r24
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1950:	8e 2d       	mov	r24, r14
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	9c 01       	movw	r18, r24
    1956:	21 50       	subi	r18, 0x01	; 1
    1958:	30 40       	sbci	r19, 0x00	; 0
    195a:	3a 83       	std	Y+2, r19	; 0x02
    195c:	29 83       	std	Y+1, r18	; 0x01
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    195e:	fc 01       	movw	r30, r24
    1960:	31 96       	adiw	r30, 0x01	; 1
    1962:	fc 83       	std	Y+4, r31	; 0x04
    1964:	eb 83       	std	Y+3, r30	; 0x03
    1966:	54 c0       	rjmp	.+168    	; 0x1a10 <glcd_fill_circle+0x148>
	for (i=y0-r; i<=y0+r; i++) {
		glcd_set_pixel(x0, i, color);
	}
	
	while (x < y) {
		if (f >= 0) {
    1968:	d7 fc       	sbrc	r13, 7
    196a:	04 c0       	rjmp	.+8      	; 0x1974 <glcd_fill_circle+0xac>
			y--;
    196c:	ca 94       	dec	r12
			ddF_y += 2;
    196e:	f2 e0       	ldi	r31, 0x02	; 2
    1970:	4f 0e       	add	r4, r31
			f += ddF_y;
    1972:	d4 0c       	add	r13, r4
		}
		x++;
    1974:	a3 94       	inc	r10
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
    1976:	8c 2d       	mov	r24, r12
    1978:	99 27       	eor	r25, r25
    197a:	87 fd       	sbrc	r24, 7
    197c:	90 95       	com	r25
    197e:	94 01       	movw	r18, r8
    1980:	28 1b       	sub	r18, r24
    1982:	39 0b       	sbc	r19, r25
    1984:	3e 83       	std	Y+6, r19	; 0x06
    1986:	2d 83       	std	Y+5, r18	; 0x05
    1988:	7c 01       	movw	r14, r24
    198a:	e8 0c       	add	r14, r8
    198c:	f9 1c       	adc	r15, r9
			glcd_set_pixel(x0+x, i, color);
    198e:	3a 2c       	mov	r3, r10
    1990:	3b 0c       	add	r3, r11
			glcd_set_pixel(x0-x, i, color);
    1992:	5b 2c       	mov	r5, r11
    1994:	5a 18       	sub	r5, r10
    1996:	0f c0       	rjmp	.+30     	; 0x19b6 <glcd_fill_circle+0xee>
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
    1998:	83 2d       	mov	r24, r3
    199a:	6d 81       	ldd	r22, Y+5	; 0x05
    199c:	46 2d       	mov	r20, r6
    199e:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
			glcd_set_pixel(x0-x, i, color);
    19a2:	85 2d       	mov	r24, r5
    19a4:	6d 81       	ldd	r22, Y+5	; 0x05
    19a6:	46 2d       	mov	r20, r6
    19a8:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		for (i=y0-y; i<=y0+y; i++) {
    19ac:	8d 81       	ldd	r24, Y+5	; 0x05
    19ae:	9e 81       	ldd	r25, Y+6	; 0x06
    19b0:	01 96       	adiw	r24, 0x01	; 1
    19b2:	9e 83       	std	Y+6, r25	; 0x06
    19b4:	8d 83       	std	Y+5, r24	; 0x05
    19b6:	ed 81       	ldd	r30, Y+5	; 0x05
    19b8:	fe 81       	ldd	r31, Y+6	; 0x06
    19ba:	ee 16       	cp	r14, r30
    19bc:	ff 06       	cpc	r15, r31
    19be:	64 f7       	brge	.-40     	; 0x1998 <glcd_fill_circle+0xd0>
		
	}
}

void glcd_fill_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    19c0:	29 81       	ldd	r18, Y+1	; 0x01
    19c2:	3a 81       	ldd	r19, Y+2	; 0x02
    19c4:	20 1b       	sub	r18, r16
    19c6:	31 0b       	sbc	r19, r17
    19c8:	3e 83       	std	Y+6, r19	; 0x06
    19ca:	2d 83       	std	Y+5, r18	; 0x05
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    19cc:	eb 80       	ldd	r14, Y+3	; 0x03
    19ce:	fc 80       	ldd	r15, Y+4	; 0x04
    19d0:	e0 0e       	add	r14, r16
    19d2:	f1 1e       	adc	r15, r17
			glcd_set_pixel(x0+y, i, color);
    19d4:	3c 2c       	mov	r3, r12
    19d6:	3b 0c       	add	r3, r11
			glcd_set_pixel(x0-y, i, color);
    19d8:	5b 2c       	mov	r5, r11
    19da:	5c 18       	sub	r5, r12
    19dc:	0f c0       	rjmp	.+30     	; 0x19fc <glcd_fill_circle+0x134>
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
			glcd_set_pixel(x0+y, i, color);
    19de:	83 2d       	mov	r24, r3
    19e0:	6d 81       	ldd	r22, Y+5	; 0x05
    19e2:	46 2d       	mov	r20, r6
    19e4:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
			glcd_set_pixel(x0-y, i, color);
    19e8:	85 2d       	mov	r24, r5
    19ea:	6d 81       	ldd	r22, Y+5	; 0x05
    19ec:	46 2d       	mov	r20, r6
    19ee:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
		
		for (i=y0-y; i<=y0+y; i++) {
			glcd_set_pixel(x0+x, i, color);
			glcd_set_pixel(x0-x, i, color);
		} 
		for (i=y0-x; i<=y0+x; i++) {
    19f2:	8d 81       	ldd	r24, Y+5	; 0x05
    19f4:	9e 81       	ldd	r25, Y+6	; 0x06
    19f6:	01 96       	adiw	r24, 0x01	; 1
    19f8:	9e 83       	std	Y+6, r25	; 0x06
    19fa:	8d 83       	std	Y+5, r24	; 0x05
    19fc:	ed 81       	ldd	r30, Y+5	; 0x05
    19fe:	fe 81       	ldd	r31, Y+6	; 0x06
    1a00:	ee 16       	cp	r14, r30
    1a02:	ff 06       	cpc	r15, r31
    1a04:	64 f7       	brge	.-40     	; 0x19de <glcd_fill_circle+0x116>
			ddF_y += 2;
			f += ddF_y;
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
    1a06:	d7 0c       	add	r13, r7
    1a08:	0f 5f       	subi	r16, 0xFF	; 255
    1a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0c:	f2 e0       	ldi	r31, 0x02	; 2
    1a0e:	7f 0e       	add	r7, r31
	
	for (i=y0-r; i<=y0+r; i++) {
		glcd_set_pixel(x0, i, color);
	}
	
	while (x < y) {
    1a10:	ac 14       	cp	r10, r12
    1a12:	0c f4       	brge	.+2      	; 0x1a16 <glcd_fill_circle+0x14e>
    1a14:	a9 cf       	rjmp	.-174    	; 0x1968 <glcd_fill_circle+0xa0>
		for (i=y0-x; i<=y0+x; i++) {
			glcd_set_pixel(x0+y, i, color);
			glcd_set_pixel(x0-y, i, color);
		}    
	}
}
    1a16:	26 96       	adiw	r28, 0x06	; 6
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	cd bf       	out	0x3d, r28	; 61
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	1f 91       	pop	r17
    1a28:	0f 91       	pop	r16
    1a2a:	ff 90       	pop	r15
    1a2c:	ef 90       	pop	r14
    1a2e:	df 90       	pop	r13
    1a30:	cf 90       	pop	r12
    1a32:	bf 90       	pop	r11
    1a34:	af 90       	pop	r10
    1a36:	9f 90       	pop	r9
    1a38:	8f 90       	pop	r8
    1a3a:	7f 90       	pop	r7
    1a3c:	6f 90       	pop	r6
    1a3e:	5f 90       	pop	r5
    1a40:	4f 90       	pop	r4
    1a42:	3f 90       	pop	r3
    1a44:	08 95       	ret

00001a46 <glcd_draw_circle>:
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
}

void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1a46:	7f 92       	push	r7
    1a48:	8f 92       	push	r8
    1a4a:	9f 92       	push	r9
    1a4c:	af 92       	push	r10
    1a4e:	bf 92       	push	r11
    1a50:	cf 92       	push	r12
    1a52:	df 92       	push	r13
    1a54:	ef 92       	push	r14
    1a56:	ff 92       	push	r15
    1a58:	0f 93       	push	r16
    1a5a:	1f 93       	push	r17
    1a5c:	a8 2e       	mov	r10, r24
    1a5e:	b6 2e       	mov	r11, r22
    1a60:	c2 2e       	mov	r12, r18
		
	int8_t f = 1 - r;
    1a62:	99 24       	eor	r9, r9
    1a64:	93 94       	inc	r9
    1a66:	94 1a       	sub	r9, r20
	int8_t ddF_x = 1;
	int8_t ddF_y = -2 * r;
    1a68:	84 2f       	mov	r24, r20
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	88 0f       	add	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	78 2e       	mov	r7, r24
    1a72:	71 94       	neg	r7
	int8_t x = 0;
	int8_t y = r;
    1a74:	d4 2e       	mov	r13, r20
	
	glcd_update_bbox(x0-r, y0-r, x0+r, y0+r);
    1a76:	ea 2c       	mov	r14, r10
    1a78:	e4 1a       	sub	r14, r20
    1a7a:	06 2f       	mov	r16, r22
    1a7c:	04 1b       	sub	r16, r20
    1a7e:	f4 2e       	mov	r15, r20
    1a80:	fa 0c       	add	r15, r10
    1a82:	14 2f       	mov	r17, r20
    1a84:	16 0f       	add	r17, r22
    1a86:	8e 2d       	mov	r24, r14
    1a88:	60 2f       	mov	r22, r16
    1a8a:	4f 2d       	mov	r20, r15
    1a8c:	21 2f       	mov	r18, r17
    1a8e:	0e 94 53 06 	call	0xca6	; 0xca6 <glcd_update_bbox>
	
	glcd_set_pixel(x0, y0+r, color);
    1a92:	8a 2d       	mov	r24, r10
    1a94:	61 2f       	mov	r22, r17
    1a96:	4c 2d       	mov	r20, r12
    1a98:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
	glcd_set_pixel(x0, y0-r, color);
    1a9c:	8a 2d       	mov	r24, r10
    1a9e:	60 2f       	mov	r22, r16
    1aa0:	4c 2d       	mov	r20, r12
    1aa2:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
	glcd_set_pixel(x0+r, y0, color);
    1aa6:	8f 2d       	mov	r24, r15
    1aa8:	6b 2d       	mov	r22, r11
    1aaa:	4c 2d       	mov	r20, r12
    1aac:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
	glcd_set_pixel(x0-r, y0, color);
    1ab0:	8e 2d       	mov	r24, r14
    1ab2:	6b 2d       	mov	r22, r11
    1ab4:	4c 2d       	mov	r20, r12
    1ab6:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
    1aba:	ee 24       	eor	r14, r14
    1abc:	23 e0       	ldi	r18, 0x03	; 3
    1abe:	82 2e       	mov	r8, r18
    1ac0:	42 c0       	rjmp	.+132    	; 0x1b46 <glcd_draw_circle+0x100>
	
	while (x<y) {
		if (f >= 0) {
    1ac2:	97 fc       	sbrc	r9, 7
    1ac4:	04 c0       	rjmp	.+8      	; 0x1ace <glcd_draw_circle+0x88>
			y--;
    1ac6:	da 94       	dec	r13
			ddF_y += 2;
    1ac8:	82 e0       	ldi	r24, 0x02	; 2
    1aca:	78 0e       	add	r7, r24
			f += ddF_y;
    1acc:	97 0c       	add	r9, r7
		}
		x++;
    1ace:	e3 94       	inc	r14
		ddF_x += 2;
		f += ddF_x;
    1ad0:	98 0c       	add	r9, r8
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
}

void glcd_draw_circle(uint8_t x0, uint8_t y0, uint8_t r, uint8_t color)
{
    1ad2:	fe 2c       	mov	r15, r14
    1ad4:	fa 0c       	add	r15, r10
		}
		x++;
		ddF_x += 2;
		f += ddF_x;
		
		glcd_set_pixel(x0 + x, y0 + y, color);
    1ad6:	1d 2d       	mov	r17, r13
    1ad8:	1b 0d       	add	r17, r11
    1ada:	8f 2d       	mov	r24, r15
    1adc:	61 2f       	mov	r22, r17
    1ade:	4c 2d       	mov	r20, r12
    1ae0:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
    1ae4:	0a 2d       	mov	r16, r10
    1ae6:	0e 19       	sub	r16, r14
		glcd_set_pixel(x0 - x, y0 + y, color);
    1ae8:	80 2f       	mov	r24, r16
    1aea:	61 2f       	mov	r22, r17
    1aec:	4c 2d       	mov	r20, r12
    1aee:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
		glcd_set_pixel(x0 + x, y0 - y, color);
    1af2:	1b 2d       	mov	r17, r11
    1af4:	1d 19       	sub	r17, r13
    1af6:	8f 2d       	mov	r24, r15
    1af8:	61 2f       	mov	r22, r17
    1afa:	4c 2d       	mov	r20, r12
    1afc:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
		glcd_set_pixel(x0 - x, y0 - y, color);
    1b00:	80 2f       	mov	r24, r16
    1b02:	61 2f       	mov	r22, r17
    1b04:	4c 2d       	mov	r20, r12
    1b06:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
		
		glcd_set_pixel(x0 + y, y0 + x, color);
    1b0a:	fd 2c       	mov	r15, r13
    1b0c:	fa 0c       	add	r15, r10
    1b0e:	1e 2d       	mov	r17, r14
    1b10:	1b 0d       	add	r17, r11
    1b12:	8f 2d       	mov	r24, r15
    1b14:	61 2f       	mov	r22, r17
    1b16:	4c 2d       	mov	r20, r12
    1b18:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
		glcd_set_pixel(x0 - y, y0 + x, color);
    1b1c:	0a 2d       	mov	r16, r10
    1b1e:	0d 19       	sub	r16, r13
    1b20:	80 2f       	mov	r24, r16
    1b22:	61 2f       	mov	r22, r17
    1b24:	4c 2d       	mov	r20, r12
    1b26:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
    1b2a:	1b 2d       	mov	r17, r11
    1b2c:	1e 19       	sub	r17, r14
		glcd_set_pixel(x0 + y, y0 - x, color);
    1b2e:	8f 2d       	mov	r24, r15
    1b30:	61 2f       	mov	r22, r17
    1b32:	4c 2d       	mov	r20, r12
    1b34:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
		glcd_set_pixel(x0 - y, y0 - x, color);
    1b38:	80 2f       	mov	r24, r16
    1b3a:	61 2f       	mov	r22, r17
    1b3c:	4c 2d       	mov	r20, r12
    1b3e:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
    1b42:	82 e0       	ldi	r24, 0x02	; 2
    1b44:	88 0e       	add	r8, r24
	glcd_set_pixel(x0, y0+r, color);
	glcd_set_pixel(x0, y0-r, color);
	glcd_set_pixel(x0+r, y0, color);
	glcd_set_pixel(x0-r, y0, color);
	
	while (x<y) {
    1b46:	ed 14       	cp	r14, r13
    1b48:	0c f4       	brge	.+2      	; 0x1b4c <glcd_draw_circle+0x106>
    1b4a:	bb cf       	rjmp	.-138    	; 0x1ac2 <glcd_draw_circle+0x7c>
		glcd_set_pixel(x0 - y, y0 + x, color);
		glcd_set_pixel(x0 + y, y0 - x, color);
		glcd_set_pixel(x0 - y, y0 - x, color);
		
	}
}
    1b4c:	1f 91       	pop	r17
    1b4e:	0f 91       	pop	r16
    1b50:	ff 90       	pop	r15
    1b52:	ef 90       	pop	r14
    1b54:	df 90       	pop	r13
    1b56:	cf 90       	pop	r12
    1b58:	bf 90       	pop	r11
    1b5a:	af 90       	pop	r10
    1b5c:	9f 90       	pop	r9
    1b5e:	8f 90       	pop	r8
    1b60:	7f 90       	pop	r7
    1b62:	08 95       	ret

00001b64 <glcd_draw_rect_thick>:
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect_thick(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t tx, uint8_t ty, uint8_t color)
{
    1b64:	2f 92       	push	r2
    1b66:	3f 92       	push	r3
    1b68:	4f 92       	push	r4
    1b6a:	5f 92       	push	r5
    1b6c:	6f 92       	push	r6
    1b6e:	7f 92       	push	r7
    1b70:	8f 92       	push	r8
    1b72:	9f 92       	push	r9
    1b74:	af 92       	push	r10
    1b76:	bf 92       	push	r11
    1b78:	cf 92       	push	r12
    1b7a:	df 92       	push	r13
    1b7c:	ef 92       	push	r14
    1b7e:	ff 92       	push	r15
    1b80:	0f 93       	push	r16
    1b82:	1f 93       	push	r17
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <glcd_draw_rect_thick+0x26>
    1b8a:	0f 92       	push	r0
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	b8 2e       	mov	r11, r24
    1b92:	a6 2e       	mov	r10, r22
    1b94:	44 2e       	mov	r4, r20
    1b96:	29 83       	std	Y+1, r18	; 0x01
    1b98:	90 2e       	mov	r9, r16
    1b9a:	8e 2d       	mov	r24, r14
    1b9c:	5c 2c       	mov	r5, r12
	int16_t i, t;
	
	if (tx == 0) {
    1b9e:	00 23       	and	r16, r16
    1ba0:	11 f4       	brne	.+4      	; 0x1ba6 <glcd_draw_rect_thick+0x42>
    1ba2:	99 24       	eor	r9, r9
    1ba4:	93 94       	inc	r9
		tx = 1;
	}

	if (ty == 0) {
    1ba6:	88 23       	and	r24, r24
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <glcd_draw_rect_thick+0x48>
    1baa:	81 e0       	ldi	r24, 0x01	; 1
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
    1bac:	00 e0       	ldi	r16, 0x00	; 0
    1bae:	10 e0       	ldi	r17, 0x00	; 0
    1bb0:	cb 2c       	mov	r12, r11
    1bb2:	dd 24       	eor	r13, r13
    1bb4:	16 01       	movw	r2, r12
    1bb6:	24 0c       	add	r2, r4
    1bb8:	31 1c       	adc	r3, r1
    1bba:	89 80       	ldd	r8, Y+1	; 0x01
    1bbc:	8a 0c       	add	r8, r10
		/* Top and bottom sides */
		for (t=0; t<(ty); t++) {
    1bbe:	68 2e       	mov	r6, r24
    1bc0:	77 24       	eor	r7, r7
    1bc2:	18 c0       	rjmp	.+48     	; 0x1bf4 <glcd_draw_rect_thick+0x90>
			glcd_set_pixel(i, y+t, color);
    1bc4:	6a 81       	ldd	r22, Y+2	; 0x02
    1bc6:	6a 0d       	add	r22, r10
    1bc8:	8e 2d       	mov	r24, r14
    1bca:	45 2d       	mov	r20, r5
    1bcc:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
			glcd_set_pixel(i, y+h-1-t, color);
    1bd0:	8e 2d       	mov	r24, r14
    1bd2:	6f 2d       	mov	r22, r15
    1bd4:	45 2d       	mov	r20, r5
    1bd6:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
		/* Top and bottom sides */
		for (t=0; t<(ty); t++) {
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bde:	01 96       	adiw	r24, 0x01	; 1
    1be0:	9b 83       	std	Y+3, r25	; 0x03
    1be2:	8a 83       	std	Y+2, r24	; 0x02
    1be4:	fa 94       	dec	r15
    1be6:	ea 81       	ldd	r30, Y+2	; 0x02
    1be8:	fb 81       	ldd	r31, Y+3	; 0x03
    1bea:	e6 15       	cp	r30, r6
    1bec:	f7 05       	cpc	r31, r7
    1bee:	54 f3       	brlt	.-44     	; 0x1bc4 <glcd_draw_rect_thick+0x60>
    1bf0:	0f 5f       	subi	r16, 0xFF	; 255
    1bf2:	1f 4f       	sbci	r17, 0xFF	; 255

	if (ty == 0) {
		ty = 1;
	}
	
	for (i=x; i<x+w; i++) {
    1bf4:	c8 01       	movw	r24, r16
    1bf6:	8c 0d       	add	r24, r12
    1bf8:	9d 1d       	adc	r25, r13
    1bfa:	82 15       	cp	r24, r2
    1bfc:	93 05       	cpc	r25, r3
    1bfe:	34 f4       	brge	.+12     	; 0x1c0c <glcd_draw_rect_thick+0xa8>
    1c00:	f8 2c       	mov	r15, r8
    1c02:	1b 82       	std	Y+3, r1	; 0x03
    1c04:	1a 82       	std	Y+2, r1	; 0x02
    1c06:	eb 2c       	mov	r14, r11
    1c08:	e0 0e       	add	r14, r16
    1c0a:	ec cf       	rjmp	.-40     	; 0x1be4 <glcd_draw_rect_thick+0x80>
		for (t=0; t<(ty); t++) {
			glcd_set_pixel(i, y+t, color);
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
    1c0c:	00 e0       	ldi	r16, 0x00	; 0
    1c0e:	10 e0       	ldi	r17, 0x00	; 0
    1c10:	ca 2c       	mov	r12, r10
    1c12:	dd 24       	eor	r13, r13
    1c14:	36 01       	movw	r6, r12
    1c16:	f9 81       	ldd	r31, Y+1	; 0x01
    1c18:	6f 0e       	add	r6, r31
    1c1a:	71 1c       	adc	r7, r1
    1c1c:	34 2c       	mov	r3, r4
    1c1e:	3b 0c       	add	r3, r11
		/* Left and right sides */
		for (t=0; t<(tx); t++) {
    1c20:	89 2c       	mov	r8, r9
    1c22:	99 24       	eor	r9, r9
    1c24:	18 c0       	rjmp	.+48     	; 0x1c56 <glcd_draw_rect_thick+0xf2>
			glcd_set_pixel(x+t, i, color);
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	8b 0d       	add	r24, r11
    1c2a:	6f 2d       	mov	r22, r15
    1c2c:	45 2d       	mov	r20, r5
    1c2e:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
			glcd_set_pixel(x+w-1-t, i, color);
    1c32:	8e 2d       	mov	r24, r14
    1c34:	6f 2d       	mov	r22, r15
    1c36:	45 2d       	mov	r20, r5
    1c38:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
		/* Left and right sides */
		for (t=0; t<(tx); t++) {
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	9b 83       	std	Y+3, r25	; 0x03
    1c44:	8a 83       	std	Y+2, r24	; 0x02
    1c46:	ea 94       	dec	r14
    1c48:	ea 81       	ldd	r30, Y+2	; 0x02
    1c4a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c4c:	e8 15       	cp	r30, r8
    1c4e:	f9 05       	cpc	r31, r9
    1c50:	54 f3       	brlt	.-44     	; 0x1c26 <glcd_draw_rect_thick+0xc2>
    1c52:	0f 5f       	subi	r16, 0xFF	; 255
    1c54:	1f 4f       	sbci	r17, 0xFF	; 255
		for (t=0; t<(ty); t++) {
			glcd_set_pixel(i, y+t, color);
			glcd_set_pixel(i, y+h-1-t, color);
		}
	}
	for (i=y; i<y+h; i++) {
    1c56:	c8 01       	movw	r24, r16
    1c58:	8c 0d       	add	r24, r12
    1c5a:	9d 1d       	adc	r25, r13
    1c5c:	86 15       	cp	r24, r6
    1c5e:	97 05       	cpc	r25, r7
    1c60:	34 f4       	brge	.+12     	; 0x1c6e <glcd_draw_rect_thick+0x10a>
    1c62:	e3 2c       	mov	r14, r3
    1c64:	1b 82       	std	Y+3, r1	; 0x03
    1c66:	1a 82       	std	Y+2, r1	; 0x02
    1c68:	fa 2c       	mov	r15, r10
    1c6a:	f0 0e       	add	r15, r16
    1c6c:	ec cf       	rjmp	.-40     	; 0x1c46 <glcd_draw_rect_thick+0xe2>
		for (t=0; t<(tx); t++) {
			glcd_set_pixel(x+t, i, color);
			glcd_set_pixel(x+w-1-t, i, color);
		}
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    1c6e:	4b 2d       	mov	r20, r11
    1c70:	41 50       	subi	r20, 0x01	; 1
    1c72:	44 0d       	add	r20, r4
    1c74:	2a 2d       	mov	r18, r10
    1c76:	21 50       	subi	r18, 0x01	; 1
    1c78:	f9 81       	ldd	r31, Y+1	; 0x01
    1c7a:	2f 0f       	add	r18, r31
    1c7c:	8b 2d       	mov	r24, r11
    1c7e:	6a 2d       	mov	r22, r10
    1c80:	0e 94 53 06 	call	0xca6	; 0xca6 <glcd_update_bbox>
}
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	cf 91       	pop	r28
    1c8c:	df 91       	pop	r29
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	ff 90       	pop	r15
    1c94:	ef 90       	pop	r14
    1c96:	df 90       	pop	r13
    1c98:	cf 90       	pop	r12
    1c9a:	bf 90       	pop	r11
    1c9c:	af 90       	pop	r10
    1c9e:	9f 90       	pop	r9
    1ca0:	8f 90       	pop	r8
    1ca2:	7f 90       	pop	r7
    1ca4:	6f 90       	pop	r6
    1ca6:	5f 90       	pop	r5
    1ca8:	4f 90       	pop	r4
    1caa:	3f 90       	pop	r3
    1cac:	2f 90       	pop	r2
    1cae:	08 95       	ret

00001cb0 <glcd_draw_rect>:
	}
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    1cb0:	6f 92       	push	r6
    1cb2:	7f 92       	push	r7
    1cb4:	8f 92       	push	r8
    1cb6:	9f 92       	push	r9
    1cb8:	af 92       	push	r10
    1cba:	bf 92       	push	r11
    1cbc:	cf 92       	push	r12
    1cbe:	df 92       	push	r13
    1cc0:	ef 92       	push	r14
    1cc2:	ff 92       	push	r15
    1cc4:	0f 93       	push	r16
    1cc6:	1f 93       	push	r17
    1cc8:	cf 93       	push	r28
    1cca:	df 93       	push	r29
    1ccc:	e8 2e       	mov	r14, r24
    1cce:	f6 2e       	mov	r15, r22
    1cd0:	a4 2e       	mov	r10, r20
    1cd2:	72 2e       	mov	r7, r18
    1cd4:	b0 2e       	mov	r11, r16
	int16_t i;
	for (i=x; i<x+w; i++) {
    1cd6:	c0 e0       	ldi	r28, 0x00	; 0
    1cd8:	d0 e0       	ldi	r29, 0x00	; 0
    1cda:	c8 2e       	mov	r12, r24
    1cdc:	dd 24       	eor	r13, r13
    1cde:	46 01       	movw	r8, r12
    1ce0:	84 0e       	add	r8, r20
    1ce2:	91 1c       	adc	r9, r1
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
    1ce4:	fa 94       	dec	r15
    1ce6:	0f 2d       	mov	r16, r15
    1ce8:	02 0f       	add	r16, r18
    1cea:	f3 94       	inc	r15
    1cec:	0d c0       	rjmp	.+26     	; 0x1d08 <glcd_draw_rect+0x58>
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    1cee:	1e 2d       	mov	r17, r14
    1cf0:	1c 0f       	add	r17, r28
		glcd_set_pixel(i, y, color);
    1cf2:	81 2f       	mov	r24, r17
    1cf4:	6f 2d       	mov	r22, r15
    1cf6:	4b 2d       	mov	r20, r11
    1cf8:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
		glcd_set_pixel(i, y+h-1, color);
    1cfc:	81 2f       	mov	r24, r17
    1cfe:	60 2f       	mov	r22, r16
    1d00:	4b 2d       	mov	r20, r11
    1d02:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
    1d06:	21 96       	adiw	r28, 0x01	; 1
}

void glcd_draw_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    1d08:	ce 01       	movw	r24, r28
    1d0a:	8c 0d       	add	r24, r12
    1d0c:	9d 1d       	adc	r25, r13
    1d0e:	88 15       	cp	r24, r8
    1d10:	99 05       	cpc	r25, r9
    1d12:	6c f3       	brlt	.-38     	; 0x1cee <glcd_draw_rect+0x3e>
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    1d14:	c0 e0       	ldi	r28, 0x00	; 0
    1d16:	d0 e0       	ldi	r29, 0x00	; 0
    1d18:	cf 2c       	mov	r12, r15
    1d1a:	dd 24       	eor	r13, r13
    1d1c:	46 01       	movw	r8, r12
    1d1e:	87 0c       	add	r8, r7
    1d20:	91 1c       	adc	r9, r1
    1d22:	0e 2d       	mov	r16, r14
    1d24:	01 50       	subi	r16, 0x01	; 1
		glcd_set_pixel(x, i, color);
		glcd_set_pixel(x+w-1, i, color);
    1d26:	60 2e       	mov	r6, r16
    1d28:	6a 0c       	add	r6, r10
    1d2a:	0d c0       	rjmp	.+26     	; 0x1d46 <glcd_draw_rect+0x96>
	int16_t i;
	for (i=x; i<x+w; i++) {
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    1d2c:	1f 2d       	mov	r17, r15
    1d2e:	1c 0f       	add	r17, r28
		glcd_set_pixel(x, i, color);
    1d30:	8e 2d       	mov	r24, r14
    1d32:	61 2f       	mov	r22, r17
    1d34:	4b 2d       	mov	r20, r11
    1d36:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
		glcd_set_pixel(x+w-1, i, color);
    1d3a:	86 2d       	mov	r24, r6
    1d3c:	61 2f       	mov	r22, r17
    1d3e:	4b 2d       	mov	r20, r11
    1d40:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
    1d44:	21 96       	adiw	r28, 0x01	; 1
	int16_t i;
	for (i=x; i<x+w; i++) {
		glcd_set_pixel(i, y, color);
		glcd_set_pixel(i, y+h-1, color);
	}
	for (i=y; i<y+h; i++) {
    1d46:	ce 01       	movw	r24, r28
    1d48:	8c 0d       	add	r24, r12
    1d4a:	9d 1d       	adc	r25, r13
    1d4c:	88 15       	cp	r24, r8
    1d4e:	99 05       	cpc	r25, r9
    1d50:	6c f3       	brlt	.-38     	; 0x1d2c <glcd_draw_rect+0x7c>
		glcd_set_pixel(x, i, color);
		glcd_set_pixel(x+w-1, i, color);
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    1d52:	0a 0d       	add	r16, r10
    1d54:	2f 2d       	mov	r18, r15
    1d56:	21 50       	subi	r18, 0x01	; 1
    1d58:	27 0d       	add	r18, r7
    1d5a:	8e 2d       	mov	r24, r14
    1d5c:	6f 2d       	mov	r22, r15
    1d5e:	40 2f       	mov	r20, r16
    1d60:	0e 94 53 06 	call	0xca6	; 0xca6 <glcd_update_bbox>
}
    1d64:	df 91       	pop	r29
    1d66:	cf 91       	pop	r28
    1d68:	1f 91       	pop	r17
    1d6a:	0f 91       	pop	r16
    1d6c:	ff 90       	pop	r15
    1d6e:	ef 90       	pop	r14
    1d70:	df 90       	pop	r13
    1d72:	cf 90       	pop	r12
    1d74:	bf 90       	pop	r11
    1d76:	af 90       	pop	r10
    1d78:	9f 90       	pop	r9
    1d7a:	8f 90       	pop	r8
    1d7c:	7f 90       	pop	r7
    1d7e:	6f 90       	pop	r6
    1d80:	08 95       	ret

00001d82 <glcd_fill_rect>:
		}
	}
}

void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    1d82:	2f 92       	push	r2
    1d84:	3f 92       	push	r3
    1d86:	4f 92       	push	r4
    1d88:	5f 92       	push	r5
    1d8a:	6f 92       	push	r6
    1d8c:	7f 92       	push	r7
    1d8e:	8f 92       	push	r8
    1d90:	9f 92       	push	r9
    1d92:	af 92       	push	r10
    1d94:	bf 92       	push	r11
    1d96:	cf 92       	push	r12
    1d98:	df 92       	push	r13
    1d9a:	ef 92       	push	r14
    1d9c:	ff 92       	push	r15
    1d9e:	0f 93       	push	r16
    1da0:	1f 93       	push	r17
    1da2:	cf 93       	push	r28
    1da4:	df 93       	push	r29
    1da6:	d8 2e       	mov	r13, r24
    1da8:	c6 2e       	mov	r12, r22
    1daa:	44 2e       	mov	r4, r20
    1dac:	32 2e       	mov	r3, r18
    1dae:	20 2e       	mov	r2, r16
	int16_t i;
	for (i=x; i<x+w; i++) {
    1db0:	00 e0       	ldi	r16, 0x00	; 0
    1db2:	10 e0       	ldi	r17, 0x00	; 0
    1db4:	a8 2e       	mov	r10, r24
    1db6:	bb 24       	eor	r11, r11
    1db8:	35 01       	movw	r6, r10
    1dba:	64 0e       	add	r6, r20
    1dbc:	71 1c       	adc	r7, r1
		int16_t j;
		for (j=y; j<y+h; j++) {
    1dbe:	e6 2e       	mov	r14, r22
    1dc0:	ff 24       	eor	r15, r15
    1dc2:	47 01       	movw	r8, r14
    1dc4:	82 0e       	add	r8, r18
    1dc6:	91 1c       	adc	r9, r1
    1dc8:	14 c0       	rjmp	.+40     	; 0x1df2 <glcd_fill_rect+0x70>
    1dca:	c0 e0       	ldi	r28, 0x00	; 0
    1dcc:	d0 e0       	ldi	r29, 0x00	; 0
			glcd_set_pixel(i, j, color);
    1dce:	5d 2c       	mov	r5, r13
    1dd0:	50 0e       	add	r5, r16
    1dd2:	07 c0       	rjmp	.+14     	; 0x1de2 <glcd_fill_rect+0x60>
    1dd4:	6c 2d       	mov	r22, r12
    1dd6:	6c 0f       	add	r22, r28
    1dd8:	85 2d       	mov	r24, r5
    1dda:	42 2d       	mov	r20, r2
    1ddc:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
    1de0:	21 96       	adiw	r28, 0x01	; 1
void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
		int16_t j;
		for (j=y; j<y+h; j++) {
    1de2:	ce 01       	movw	r24, r28
    1de4:	8e 0d       	add	r24, r14
    1de6:	9f 1d       	adc	r25, r15
    1de8:	88 15       	cp	r24, r8
    1dea:	99 05       	cpc	r25, r9
    1dec:	9c f3       	brlt	.-26     	; 0x1dd4 <glcd_fill_rect+0x52>
    1dee:	0f 5f       	subi	r16, 0xFF	; 255
    1df0:	1f 4f       	sbci	r17, 0xFF	; 255
}

void glcd_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
	int16_t i;
	for (i=x; i<x+w; i++) {
    1df2:	c8 01       	movw	r24, r16
    1df4:	8a 0d       	add	r24, r10
    1df6:	9b 1d       	adc	r25, r11
    1df8:	86 15       	cp	r24, r6
    1dfa:	97 05       	cpc	r25, r7
    1dfc:	34 f3       	brlt	.-52     	; 0x1dca <glcd_fill_rect+0x48>
		int16_t j;
		for (j=y; j<y+h; j++) {
			glcd_set_pixel(i, j, color);
		}
	}
	glcd_update_bbox(x, y, x+w-1, y+h-1);
    1dfe:	4d 2d       	mov	r20, r13
    1e00:	41 50       	subi	r20, 0x01	; 1
    1e02:	44 0d       	add	r20, r4
    1e04:	2c 2d       	mov	r18, r12
    1e06:	21 50       	subi	r18, 0x01	; 1
    1e08:	23 0d       	add	r18, r3
    1e0a:	8d 2d       	mov	r24, r13
    1e0c:	6c 2d       	mov	r22, r12
    1e0e:	0e 94 53 06 	call	0xca6	; 0xca6 <glcd_update_bbox>
}
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	1f 91       	pop	r17
    1e18:	0f 91       	pop	r16
    1e1a:	ff 90       	pop	r15
    1e1c:	ef 90       	pop	r14
    1e1e:	df 90       	pop	r13
    1e20:	cf 90       	pop	r12
    1e22:	bf 90       	pop	r11
    1e24:	af 90       	pop	r10
    1e26:	9f 90       	pop	r9
    1e28:	8f 90       	pop	r8
    1e2a:	7f 90       	pop	r7
    1e2c:	6f 90       	pop	r6
    1e2e:	5f 90       	pop	r5
    1e30:	4f 90       	pop	r4
    1e32:	3f 90       	pop	r3
    1e34:	2f 90       	pop	r2
    1e36:	08 95       	ret

00001e38 <glcd_draw_line>:
	glcd_update_bbox(x,y,x,y);
	glcd_buffer[x+ (y/8)*GLCD_LCD_WIDTH] ^= ( 1 << (y%8));
}

/* Bresenham's algorithm - based on PCD8544 library Limor Fried */
void glcd_draw_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
    1e38:	9f 92       	push	r9
    1e3a:	af 92       	push	r10
    1e3c:	bf 92       	push	r11
    1e3e:	cf 92       	push	r12
    1e40:	df 92       	push	r13
    1e42:	ef 92       	push	r14
    1e44:	ff 92       	push	r15
    1e46:	0f 93       	push	r16
    1e48:	1f 93       	push	r17
    1e4a:	f8 2e       	mov	r15, r24
    1e4c:	e6 2e       	mov	r14, r22
    1e4e:	d4 2e       	mov	r13, r20
    1e50:	12 2f       	mov	r17, r18
    1e52:	90 2e       	mov	r9, r16
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
    1e54:	aa 24       	eor	r10, r10
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	26 1b       	sub	r18, r22
    1e5a:	31 09       	sbc	r19, r1
    1e5c:	37 ff       	sbrs	r19, 7
    1e5e:	03 c0       	rjmp	.+6      	; 0x1e66 <glcd_draw_line+0x2e>
    1e60:	30 95       	com	r19
    1e62:	21 95       	neg	r18
    1e64:	3f 4f       	sbci	r19, 0xFF	; 255
    1e66:	8d 2d       	mov	r24, r13
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	8f 19       	sub	r24, r15
    1e6c:	91 09       	sbc	r25, r1
    1e6e:	97 ff       	sbrs	r25, 7
    1e70:	03 c0       	rjmp	.+6      	; 0x1e78 <glcd_draw_line+0x40>
    1e72:	90 95       	com	r25
    1e74:	81 95       	neg	r24
    1e76:	9f 4f       	sbci	r25, 0xFF	; 255
    1e78:	82 17       	cp	r24, r18
    1e7a:	93 07       	cpc	r25, r19
    1e7c:	44 f4       	brge	.+16     	; 0x1e8e <glcd_draw_line+0x56>
    1e7e:	aa 24       	eor	r10, r10
    1e80:	a3 94       	inc	r10
	uint8_t dx, dy;
	int8_t err;
	int8_t ystep;
	
	if (steep) {
    1e82:	8e 2d       	mov	r24, r14
    1e84:	ef 2c       	mov	r14, r15
    1e86:	f8 2e       	mov	r15, r24
    1e88:	81 2f       	mov	r24, r17
    1e8a:	1d 2d       	mov	r17, r13
    1e8c:	d8 2e       	mov	r13, r24
		swap(x0, y0);
		swap(x1, y1);
	}
	
	if (x0 > x1) {
    1e8e:	df 14       	cp	r13, r15
    1e90:	30 f4       	brcc	.+12     	; 0x1e9e <glcd_draw_line+0x66>
    1e92:	8d 2d       	mov	r24, r13
    1e94:	df 2c       	mov	r13, r15
    1e96:	f8 2e       	mov	r15, r24
    1e98:	81 2f       	mov	r24, r17
    1e9a:	1e 2d       	mov	r17, r14
    1e9c:	e8 2e       	mov	r14, r24
		swap(x0, x1);
		swap(y0, y1);
	}
	
	glcd_update_bbox( x0, y0, x1, y1 );
    1e9e:	8f 2d       	mov	r24, r15
    1ea0:	6e 2d       	mov	r22, r14
    1ea2:	4d 2d       	mov	r20, r13
    1ea4:	21 2f       	mov	r18, r17
    1ea6:	0e 94 53 06 	call	0xca6	; 0xca6 <glcd_update_bbox>

	dx = x1 - x0;
    1eaa:	cd 2c       	mov	r12, r13
    1eac:	cf 18       	sub	r12, r15
	dy = abs(y1 - y0);
    1eae:	81 2f       	mov	r24, r17
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	8e 19       	sub	r24, r14
    1eb4:	91 09       	sbc	r25, r1
    1eb6:	97 ff       	sbrs	r25, 7
    1eb8:	03 c0       	rjmp	.+6      	; 0x1ec0 <glcd_draw_line+0x88>
    1eba:	90 95       	com	r25
    1ebc:	81 95       	neg	r24
    1ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec0:	b8 2e       	mov	r11, r24
	
	err = dx / 2;
	
	if (y0 < y1) {
    1ec2:	e1 16       	cp	r14, r17
    1ec4:	10 f0       	brcs	.+4      	; 0x1eca <glcd_draw_line+0x92>
    1ec6:	0f ef       	ldi	r16, 0xFF	; 255
    1ec8:	01 c0       	rjmp	.+2      	; 0x1ecc <glcd_draw_line+0x94>
    1eca:	01 e0       	ldi	r16, 0x01	; 1
	glcd_update_bbox( x0, y0, x1, y1 );

	dx = x1 - x0;
	dy = abs(y1 - y0);
	
	err = dx / 2;
    1ecc:	1c 2d       	mov	r17, r12
    1ece:	16 95       	lsr	r17
    1ed0:	10 c0       	rjmp	.+32     	; 0x1ef2 <glcd_draw_line+0xba>
	} else {
		ystep = -1;
	}
	
	for (; x0<=x1; x0++) {
		if (steep) {
    1ed2:	aa 20       	and	r10, r10
    1ed4:	19 f0       	breq	.+6      	; 0x1edc <glcd_draw_line+0xa4>
			glcd_set_pixel(y0, x0, color);
    1ed6:	8e 2d       	mov	r24, r14
    1ed8:	6f 2d       	mov	r22, r15
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <glcd_draw_line+0xa8>
		} else {
			glcd_set_pixel(x0, y0, color);
    1edc:	8f 2d       	mov	r24, r15
    1ede:	6e 2d       	mov	r22, r14
    1ee0:	49 2d       	mov	r20, r9
    1ee2:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
		}
		err -= dy;
    1ee6:	1b 19       	sub	r17, r11
		if (err < 0) {
    1ee8:	17 ff       	sbrs	r17, 7
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <glcd_draw_line+0xb8>
			y0 += ystep;
    1eec:	e0 0e       	add	r14, r16
			err += dx;
    1eee:	1c 0d       	add	r17, r12
		ystep = 1;
	} else {
		ystep = -1;
	}
	
	for (; x0<=x1; x0++) {
    1ef0:	f3 94       	inc	r15
    1ef2:	df 14       	cp	r13, r15
    1ef4:	70 f7       	brcc	.-36     	; 0x1ed2 <glcd_draw_line+0x9a>
		if (err < 0) {
			y0 += ystep;
			err += dx;
		}
	}
}
    1ef6:	1f 91       	pop	r17
    1ef8:	0f 91       	pop	r16
    1efa:	ff 90       	pop	r15
    1efc:	ef 90       	pop	r14
    1efe:	df 90       	pop	r13
    1f00:	cf 90       	pop	r12
    1f02:	bf 90       	pop	r11
    1f04:	af 90       	pop	r10
    1f06:	9f 90       	pop	r9
    1f08:	08 95       	ret

00001f0a <glcd_draw_rect_shadow>:
	} 
	glcd_update_bbox(x, y, x+w-1, y+h-1);
}

void glcd_draw_rect_shadow(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    1f0a:	cf 92       	push	r12
    1f0c:	df 92       	push	r13
    1f0e:	ef 92       	push	r14
    1f10:	ff 92       	push	r15
    1f12:	0f 93       	push	r16
    1f14:	1f 93       	push	r17
    1f16:	e8 2e       	mov	r14, r24
    1f18:	d6 2e       	mov	r13, r22
    1f1a:	14 2f       	mov	r17, r20
    1f1c:	f2 2e       	mov	r15, r18
	glcd_draw_rect(x, y, w, h, color);
    1f1e:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <glcd_draw_rect>
	glcd_draw_line(x+1, y+h, x+w, y+h, color);
    1f22:	1e 0d       	add	r17, r14
    1f24:	fd 0c       	add	r15, r13
    1f26:	8e 2d       	mov	r24, r14
    1f28:	8f 5f       	subi	r24, 0xFF	; 255
    1f2a:	6f 2d       	mov	r22, r15
    1f2c:	41 2f       	mov	r20, r17
    1f2e:	2f 2d       	mov	r18, r15
    1f30:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <glcd_draw_line>
	glcd_draw_line(x+w, y+1, x+w, y+h, color);
    1f34:	d3 94       	inc	r13
    1f36:	81 2f       	mov	r24, r17
    1f38:	6d 2d       	mov	r22, r13
    1f3a:	41 2f       	mov	r20, r17
    1f3c:	2f 2d       	mov	r18, r15
    1f3e:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <glcd_draw_line>
}
    1f42:	1f 91       	pop	r17
    1f44:	0f 91       	pop	r16
    1f46:	ff 90       	pop	r15
    1f48:	ef 90       	pop	r14
    1f4a:	df 90       	pop	r13
    1f4c:	cf 90       	pop	r12
    1f4e:	08 95       	ret

00001f50 <glcd_test_bitmap_128x64>:
}

#if defined (GLCD_UNIT_TEST_BITMAP_ENABLE)
void glcd_test_bitmap_128x64(void)
{
	glcd_draw_bitmap(bmp_oslogo);
    1f50:	88 e4       	ldi	r24, 0x48	; 72
    1f52:	92 e0       	ldi	r25, 0x02	; 2
    1f54:	0e 94 c7 0b 	call	0x178e	; 0x178e <glcd_draw_bitmap>
	glcd_write();	
    1f58:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
	while (1) {
		DEMO_RETURN();
    1f5c:	80 91 66 01 	lds	r24, 0x0166
    1f60:	88 23       	and	r24, r24
    1f62:	e1 f3       	breq	.-8      	; 0x1f5c <glcd_test_bitmap_128x64+0xc>
    1f64:	10 92 66 01 	sts	0x0166, r1
	}
}
    1f68:	08 95       	ret

00001f6a <glcd_test_scrolling_graph>:
	}
	
}

void glcd_test_scrolling_graph(void)
{
    1f6a:	0f 93       	push	r16
    1f6c:	1f 93       	push	r17
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
	glcd_clear();
    1f72:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <glcd_clear>
	glcd_write();
    1f76:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
    1f7a:	40 c0       	rjmp	.+128    	; 0x1ffc <glcd_test_scrolling_graph+0x92>
	while(1) {
		uint16_t n;
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,n);
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	60 e0       	ldi	r22, 0x00	; 0
    1f80:	42 e3       	ldi	r20, 0x32	; 50
    1f82:	22 e3       	ldi	r18, 0x32	; 50
    1f84:	0c 2f       	mov	r16, r28
    1f86:	0e 94 c6 07 	call	0xf8c	; 0xf8c <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,0,50,30,n);
    1f8a:	8c e3       	ldi	r24, 0x3C	; 60
    1f8c:	60 e0       	ldi	r22, 0x00	; 0
    1f8e:	42 e3       	ldi	r20, 0x32	; 50
    1f90:	2e e1       	ldi	r18, 0x1E	; 30
    1f92:	0e 94 c6 07 	call	0xf8c	; 0xf8c <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,35,60,20,n);
    1f96:	8c e3       	ldi	r24, 0x3C	; 60
    1f98:	63 e2       	ldi	r22, 0x23	; 35
    1f9a:	4c e3       	ldi	r20, 0x3C	; 60
    1f9c:	24 e1       	ldi	r18, 0x14	; 20
    1f9e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <glcd_scrolling_bar_graph>
			DEMO_RETURN();
    1fa2:	80 91 66 01 	lds	r24, 0x0166
    1fa6:	88 23       	and	r24, r24
    1fa8:	f9 f4       	brne	.+62     	; 0x1fe8 <glcd_test_scrolling_graph+0x7e>
{
	glcd_clear();
	glcd_write();
	while(1) {
		uint16_t n;
		for (n=0; n<=255; n += 20) {
    1faa:	64 96       	adiw	r28, 0x14	; 20
    1fac:	cf 3f       	cpi	r28, 0xFF	; 255
    1fae:	d1 05       	cpc	r29, r1
    1fb0:	29 f3       	breq	.-54     	; 0x1f7c <glcd_test_scrolling_graph+0x12>
    1fb2:	20 f3       	brcs	.-56     	; 0x1f7c <glcd_test_scrolling_graph+0x12>
    1fb4:	10 e0       	ldi	r17, 0x00	; 0
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
		}
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,255-n);
    1fb6:	01 2f       	mov	r16, r17
    1fb8:	00 95       	com	r16
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	60 e0       	ldi	r22, 0x00	; 0
    1fbe:	42 e3       	ldi	r20, 0x32	; 50
    1fc0:	22 e3       	ldi	r18, 0x32	; 50
    1fc2:	0e 94 c6 07 	call	0xf8c	; 0xf8c <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,0,50,30,n);
    1fc6:	8c e3       	ldi	r24, 0x3C	; 60
    1fc8:	60 e0       	ldi	r22, 0x00	; 0
    1fca:	42 e3       	ldi	r20, 0x32	; 50
    1fcc:	2e e1       	ldi	r18, 0x1E	; 30
    1fce:	01 2f       	mov	r16, r17
    1fd0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <glcd_scrolling_bar_graph>
			glcd_scrolling_bar_graph(60,35,60,20,n);
    1fd4:	8c e3       	ldi	r24, 0x3C	; 60
    1fd6:	63 e2       	ldi	r22, 0x23	; 35
    1fd8:	4c e3       	ldi	r20, 0x3C	; 60
    1fda:	24 e1       	ldi	r18, 0x14	; 20
    1fdc:	0e 94 c6 07 	call	0xf8c	; 0xf8c <glcd_scrolling_bar_graph>
			DEMO_RETURN();
    1fe0:	80 91 66 01 	lds	r24, 0x0166
    1fe4:	88 23       	and	r24, r24
    1fe6:	39 f0       	breq	.+14     	; 0x1ff6 <glcd_test_scrolling_graph+0x8c>
    1fe8:	10 92 66 01 	sts	0x0166, r1
		}
	}	
}
    1fec:	df 91       	pop	r29
    1fee:	cf 91       	pop	r28
    1ff0:	1f 91       	pop	r17
    1ff2:	0f 91       	pop	r16
    1ff4:	08 95       	ret
		}
		for (n=0; n<=255; n += 20) {
			glcd_scrolling_bar_graph(0,0,50,50,255-n);
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
    1ff6:	1c 5e       	subi	r17, 0xEC	; 236
			glcd_scrolling_bar_graph(0,0,50,50,n);
			glcd_scrolling_bar_graph(60,0,50,30,n);
			glcd_scrolling_bar_graph(60,35,60,20,n);
			DEMO_RETURN();
		}
		for (n=0; n<=255; n += 20) {
    1ff8:	14 30       	cpi	r17, 0x04	; 4
    1ffa:	e9 f6       	brne	.-70     	; 0x1fb6 <glcd_test_scrolling_graph+0x4c>
    1ffc:	c0 e0       	ldi	r28, 0x00	; 0
    1ffe:	d0 e0       	ldi	r29, 0x00	; 0
    2000:	d5 cf       	rjmp	.-86     	; 0x1fac <glcd_test_scrolling_graph+0x42>

00002002 <glcd_test_hello_world>:
	}

}

void glcd_test_hello_world(void)
{
    2002:	0f 93       	push	r16
	glcd_tiny_set_font(Font5x7,5,7,32,127);
    2004:	80 eb       	ldi	r24, 0xB0	; 176
    2006:	97 e0       	ldi	r25, 0x07	; 7
    2008:	65 e0       	ldi	r22, 0x05	; 5
    200a:	47 e0       	ldi	r20, 0x07	; 7
    200c:	20 e2       	ldi	r18, 0x20	; 32
    200e:	0f e7       	ldi	r16, 0x7F	; 127
    2010:	0e 94 c4 12 	call	0x2588	; 0x2588 <glcd_tiny_set_font>
	glcd_clear_buffer();
    2014:	0e 94 d1 06 	call	0xda2	; 0xda2 <glcd_clear_buffer>
	glcd_tiny_draw_string(0,0,"Hello World!");
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	60 e0       	ldi	r22, 0x00	; 0
    201c:	40 e0       	ldi	r20, 0x00	; 0
    201e:	51 e0       	ldi	r21, 0x01	; 1
    2020:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <glcd_tiny_draw_string>
	glcd_write();
    2024:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
	while(1) {
		DEMO_RETURN();
    2028:	80 91 66 01 	lds	r24, 0x0166
    202c:	88 23       	and	r24, r24
    202e:	e1 f3       	breq	.-8      	; 0x2028 <glcd_test_hello_world+0x26>
    2030:	10 92 66 01 	sts	0x0166, r1
	}
}
    2034:	0f 91       	pop	r16
    2036:	08 95       	ret

00002038 <glcd_test_rectangles>:

void glcd_test_rectangles(void)
{
    2038:	cf 92       	push	r12
    203a:	ef 92       	push	r14
    203c:	0f 93       	push	r16
    203e:	cf 93       	push	r28
    2040:	df 93       	push	r29
	glcd_tiny_set_font(Font5x7,5,7,32,127);
    2042:	80 eb       	ldi	r24, 0xB0	; 176
    2044:	97 e0       	ldi	r25, 0x07	; 7
    2046:	65 e0       	ldi	r22, 0x05	; 5
    2048:	47 e0       	ldi	r20, 0x07	; 7
    204a:	20 e2       	ldi	r18, 0x20	; 32
    204c:	0f e7       	ldi	r16, 0x7F	; 127
    204e:	0e 94 c4 12 	call	0x2588	; 0x2588 <glcd_tiny_set_font>
	glcd_clear_buffer();
    2052:	0e 94 d1 06 	call	0xda2	; 0xda2 <glcd_clear_buffer>
	glcd_tiny_draw_string(0,0,"RECTANGLE DEMO");
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	60 e0       	ldi	r22, 0x00	; 0
    205a:	4d e0       	ldi	r20, 0x0D	; 13
    205c:	51 e0       	ldi	r21, 0x01	; 1
    205e:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <glcd_tiny_draw_string>
	glcd_write();
    2062:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
    2066:	80 ed       	ldi	r24, 0xD0	; 208
    2068:	97 e0       	ldi	r25, 0x07	; 7
    206a:	20 e9       	ldi	r18, 0x90	; 144
    206c:	31 e0       	ldi	r19, 0x01	; 1
    206e:	f9 01       	movw	r30, r18
    2070:	31 97       	sbiw	r30, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <glcd_test_rectangles+0x38>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2074:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2076:	d9 f7       	brne	.-10     	; 0x206e <glcd_test_rectangles+0x36>
    2078:	c0 e9       	ldi	r28, 0x90	; 144
    207a:	d1 e0       	ldi	r29, 0x01	; 1
	delay_ms(200);
	
	while(1) {
		
		glcd_clear();
    207c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <glcd_clear>
		glcd_draw_rect(0,0,100,50,BLACK);
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	60 e0       	ldi	r22, 0x00	; 0
    2084:	44 e6       	ldi	r20, 0x64	; 100
    2086:	22 e3       	ldi	r18, 0x32	; 50
    2088:	01 e0       	ldi	r16, 0x01	; 1
    208a:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <glcd_draw_rect>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect");
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	69 e0       	ldi	r22, 0x09	; 9
    2092:	4c e1       	ldi	r20, 0x1C	; 28
    2094:	51 e0       	ldi	r21, 0x01	; 1
    2096:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <glcd_tiny_draw_string>
		glcd_write();
    209a:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
    209e:	88 e8       	ldi	r24, 0x88	; 136
    20a0:	93 e1       	ldi	r25, 0x13	; 19
    20a2:	fe 01       	movw	r30, r28
    20a4:	31 97       	sbiw	r30, 0x01	; 1
    20a6:	f1 f7       	brne	.-4      	; 0x20a4 <glcd_test_rectangles+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20aa:	d9 f7       	brne	.-10     	; 0x20a2 <glcd_test_rectangles+0x6a>
		delay_ms(500);
		DEMO_RETURN();
    20ac:	80 91 66 01 	lds	r24, 0x0166
    20b0:	88 23       	and	r24, r24
    20b2:	09 f0       	breq	.+2      	; 0x20b6 <glcd_test_rectangles+0x7e>
    20b4:	85 c0       	rjmp	.+266    	; 0x21c0 <glcd_test_rectangles+0x188>
		
		glcd_clear();
    20b6:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <glcd_clear>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_thick");
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	69 e0       	ldi	r22, 0x09	; 9
    20be:	4b e2       	ldi	r20, 0x2B	; 43
    20c0:	51 e0       	ldi	r21, 0x01	; 1
    20c2:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <glcd_tiny_draw_string>
		glcd_write();
    20c6:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>

		glcd_draw_rect_thick(5,5,80,30,3,6,BLACK);
    20ca:	85 e0       	ldi	r24, 0x05	; 5
    20cc:	65 e0       	ldi	r22, 0x05	; 5
    20ce:	40 e5       	ldi	r20, 0x50	; 80
    20d0:	2e e1       	ldi	r18, 0x1E	; 30
    20d2:	03 e0       	ldi	r16, 0x03	; 3
    20d4:	56 e0       	ldi	r21, 0x06	; 6
    20d6:	e5 2e       	mov	r14, r21
    20d8:	cc 24       	eor	r12, r12
    20da:	c3 94       	inc	r12
    20dc:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <glcd_draw_rect_thick>
		glcd_write();
    20e0:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
    20e4:	88 e8       	ldi	r24, 0x88	; 136
    20e6:	93 e1       	ldi	r25, 0x13	; 19
    20e8:	fe 01       	movw	r30, r28
    20ea:	31 97       	sbiw	r30, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <glcd_test_rectangles+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f0:	d9 f7       	brne	.-10     	; 0x20e8 <glcd_test_rectangles+0xb0>
		delay_ms(500);
		DEMO_RETURN();
    20f2:	80 91 66 01 	lds	r24, 0x0166
    20f6:	88 23       	and	r24, r24
    20f8:	09 f0       	breq	.+2      	; 0x20fc <glcd_test_rectangles+0xc4>
    20fa:	62 c0       	rjmp	.+196    	; 0x21c0 <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_thick(0,0,20,20,2,2,BLACK);
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	60 e0       	ldi	r22, 0x00	; 0
    2100:	44 e1       	ldi	r20, 0x14	; 20
    2102:	24 e1       	ldi	r18, 0x14	; 20
    2104:	02 e0       	ldi	r16, 0x02	; 2
    2106:	32 e0       	ldi	r19, 0x02	; 2
    2108:	e3 2e       	mov	r14, r19
    210a:	cc 24       	eor	r12, r12
    210c:	c3 94       	inc	r12
    210e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <glcd_draw_rect_thick>
		glcd_write();
    2112:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
    2116:	88 e8       	ldi	r24, 0x88	; 136
    2118:	93 e1       	ldi	r25, 0x13	; 19
    211a:	fe 01       	movw	r30, r28
    211c:	31 97       	sbiw	r30, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <glcd_test_rectangles+0xe4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2120:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2122:	d9 f7       	brne	.-10     	; 0x211a <glcd_test_rectangles+0xe2>
		delay_ms(500);
		DEMO_RETURN();
    2124:	80 91 66 01 	lds	r24, 0x0166
    2128:	88 23       	and	r24, r24
    212a:	09 f0       	breq	.+2      	; 0x212e <glcd_test_rectangles+0xf6>
    212c:	49 c0       	rjmp	.+146    	; 0x21c0 <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_thick(100,10,20,20,5,5,BLACK);
    212e:	84 e6       	ldi	r24, 0x64	; 100
    2130:	6a e0       	ldi	r22, 0x0A	; 10
    2132:	44 e1       	ldi	r20, 0x14	; 20
    2134:	24 e1       	ldi	r18, 0x14	; 20
    2136:	05 e0       	ldi	r16, 0x05	; 5
    2138:	95 e0       	ldi	r25, 0x05	; 5
    213a:	e9 2e       	mov	r14, r25
    213c:	cc 24       	eor	r12, r12
    213e:	c3 94       	inc	r12
    2140:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <glcd_draw_rect_thick>
		glcd_write();
    2144:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
    2148:	88 e8       	ldi	r24, 0x88	; 136
    214a:	93 e1       	ldi	r25, 0x13	; 19
    214c:	fe 01       	movw	r30, r28
    214e:	31 97       	sbiw	r30, 0x01	; 1
    2150:	f1 f7       	brne	.-4      	; 0x214e <glcd_test_rectangles+0x116>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2152:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2154:	d9 f7       	brne	.-10     	; 0x214c <glcd_test_rectangles+0x114>
		delay_ms(500);
		DEMO_RETURN();
    2156:	80 91 66 01 	lds	r24, 0x0166
    215a:	88 23       	and	r24, r24
    215c:	89 f5       	brne	.+98     	; 0x21c0 <glcd_test_rectangles+0x188>

		glcd_clear();
    215e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <glcd_clear>
		glcd_tiny_draw_string(0,GLCD_NUMBER_OF_BANKS-1,"glcd_draw_rect_shadow");
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	69 e0       	ldi	r22, 0x09	; 9
    2166:	40 e4       	ldi	r20, 0x40	; 64
    2168:	51 e0       	ldi	r21, 0x01	; 1
    216a:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <glcd_tiny_draw_string>
		glcd_draw_rect_shadow(0,0,45,30,BLACK);
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	60 e0       	ldi	r22, 0x00	; 0
    2172:	4d e2       	ldi	r20, 0x2D	; 45
    2174:	2e e1       	ldi	r18, 0x1E	; 30
    2176:	01 e0       	ldi	r16, 0x01	; 1
    2178:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <glcd_draw_rect_shadow>
		glcd_write();
    217c:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
    2180:	88 e8       	ldi	r24, 0x88	; 136
    2182:	93 e1       	ldi	r25, 0x13	; 19
    2184:	fe 01       	movw	r30, r28
    2186:	31 97       	sbiw	r30, 0x01	; 1
    2188:	f1 f7       	brne	.-4      	; 0x2186 <glcd_test_rectangles+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218c:	d9 f7       	brne	.-10     	; 0x2184 <glcd_test_rectangles+0x14c>
		delay_ms(500);
		DEMO_RETURN();
    218e:	80 91 66 01 	lds	r24, 0x0166
    2192:	88 23       	and	r24, r24
    2194:	a9 f4       	brne	.+42     	; 0x21c0 <glcd_test_rectangles+0x188>
		
		glcd_draw_rect_shadow(95,5,30,30,BLACK);
    2196:	8f e5       	ldi	r24, 0x5F	; 95
    2198:	65 e0       	ldi	r22, 0x05	; 5
    219a:	4e e1       	ldi	r20, 0x1E	; 30
    219c:	2e e1       	ldi	r18, 0x1E	; 30
    219e:	01 e0       	ldi	r16, 0x01	; 1
    21a0:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <glcd_draw_rect_shadow>
		glcd_write();
    21a4:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
    21a8:	88 e8       	ldi	r24, 0x88	; 136
    21aa:	93 e1       	ldi	r25, 0x13	; 19
    21ac:	fe 01       	movw	r30, r28
    21ae:	31 97       	sbiw	r30, 0x01	; 1
    21b0:	f1 f7       	brne	.-4      	; 0x21ae <glcd_test_rectangles+0x176>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b4:	d9 f7       	brne	.-10     	; 0x21ac <glcd_test_rectangles+0x174>
		delay_ms(500);
		DEMO_RETURN();
    21b6:	80 91 66 01 	lds	r24, 0x0166
    21ba:	88 23       	and	r24, r24
    21bc:	09 f4       	brne	.+2      	; 0x21c0 <glcd_test_rectangles+0x188>
    21be:	5e cf       	rjmp	.-324    	; 0x207c <glcd_test_rectangles+0x44>
    21c0:	10 92 66 01 	sts	0x0166, r1
		
	}
	
}
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	0f 91       	pop	r16
    21ca:	ef 90       	pop	r14
    21cc:	cf 90       	pop	r12
    21ce:	08 95       	ret

000021d0 <glcd_test_tiny_text>:
	}

}

void glcd_test_tiny_text(void)
{
    21d0:	af 92       	push	r10
    21d2:	bf 92       	push	r11
    21d4:	cf 92       	push	r12
    21d6:	df 92       	push	r13
    21d8:	ef 92       	push	r14
    21da:	ff 92       	push	r15
    21dc:	0f 93       	push	r16
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    21e6:	2f 97       	sbiw	r28, 0x0f	; 15
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
	char string[GLCD_LCD_WIDTH / 6 + 1];

	uint8_t c = 32;
	uint8_t len = GLCD_LCD_WIDTH / 6;
	
	GLCD_TEXT_INIT();
    21f2:	80 eb       	ldi	r24, 0xB0	; 176
    21f4:	97 e0       	ldi	r25, 0x07	; 7
    21f6:	65 e0       	ldi	r22, 0x05	; 5
    21f8:	47 e0       	ldi	r20, 0x07	; 7
    21fa:	20 e2       	ldi	r18, 0x20	; 32
    21fc:	0f e7       	ldi	r16, 0x7F	; 127
    21fe:	0e 94 c4 12 	call	0x2588	; 0x2588 <glcd_tiny_set_font>
    2202:	00 e2       	ldi	r16, 0x20	; 32
    2204:	7e 01       	movw	r14, r28
    2206:	08 94       	sec
    2208:	e1 1c       	adc	r14, r1
    220a:	f1 1c       	adc	r15, r1
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
    220c:	7f e0       	ldi	r23, 0x0F	; 15
    220e:	a7 2e       	mov	r10, r23
    2210:	b1 2c       	mov	r11, r1
    2212:	ac 0e       	add	r10, r28
    2214:	bd 1e       	adc	r11, r29
    2216:	60 e9       	ldi	r22, 0x90	; 144
    2218:	c6 2e       	mov	r12, r22
    221a:	61 e0       	ldi	r22, 0x01	; 1
    221c:	d6 2e       	mov	r13, r22
	char string[GLCD_LCD_WIDTH / 6 + 1];

	uint8_t c = 32;
	uint8_t len = GLCD_LCD_WIDTH / 6;
	
	GLCD_TEXT_INIT();
    221e:	f7 01       	movw	r30, r14
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
			string[i] = c;
    2220:	00 83       	st	Z, r16
			c++;
    2222:	0f 5f       	subi	r16, 0xFF	; 255
			if (c > 127) {
    2224:	07 fd       	sbrc	r16, 7
    2226:	00 e2       	ldi	r16, 0x20	; 32
    2228:	31 96       	adiw	r30, 0x01	; 1
	GLCD_TEXT_INIT();
	
	while(1) {
		// write chars to string from 32 to 127 ASCII
		uint8_t i;
		for (i=0; i<len; i++) {
    222a:	ea 15       	cp	r30, r10
    222c:	fb 05       	cpc	r31, r11
    222e:	c1 f7       	brne	.-16     	; 0x2220 <glcd_test_tiny_text+0x50>
				c = 32;
			}
		}

		// write null terminator
		string[len] = '\0';
    2230:	1f 86       	std	Y+15, r1	; 0x0f

		GLCD_WRITE(string);
    2232:	c7 01       	movw	r24, r14
    2234:	0e 94 4a 14 	call	0x2894	; 0x2894 <glcd_tiny_draw_string_ammend>
		
		DEMO_RETURN();
    2238:	80 91 66 01 	lds	r24, 0x0166
    223c:	88 23       	and	r24, r24
    223e:	91 f0       	breq	.+36     	; 0x2264 <glcd_test_tiny_text+0x94>
    2240:	10 92 66 01 	sts	0x0166, r1
		
		delay_ms(1000);
	}

}
    2244:	2f 96       	adiw	r28, 0x0f	; 15
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	cf 91       	pop	r28
    2252:	df 91       	pop	r29
    2254:	0f 91       	pop	r16
    2256:	ff 90       	pop	r15
    2258:	ef 90       	pop	r14
    225a:	df 90       	pop	r13
    225c:	cf 90       	pop	r12
    225e:	bf 90       	pop	r11
    2260:	af 90       	pop	r10
    2262:	08 95       	ret
		// write null terminator
		string[len] = '\0';

		GLCD_WRITE(string);
		
		DEMO_RETURN();
    2264:	80 e1       	ldi	r24, 0x10	; 16
    2266:	97 e2       	ldi	r25, 0x27	; 39
    2268:	f6 01       	movw	r30, r12
    226a:	31 97       	sbiw	r30, 0x01	; 1
    226c:	f1 f7       	brne	.-4      	; 0x226a <glcd_test_tiny_text+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2270:	d9 f7       	brne	.-10     	; 0x2268 <glcd_test_tiny_text+0x98>
    2272:	d5 cf       	rjmp	.-86     	; 0x221e <glcd_test_tiny_text+0x4e>

00002274 <glcd_test_text_up_down>:
		DEMO_RETURN();
	}
}

void glcd_test_text_up_down(void)
{
    2274:	0f 93       	push	r16
    2276:	1f 93       	push	r17
    2278:	cf 93       	push	r28
    227a:	df 93       	push	r29

	uint8_t y;
	uint8_t max_y;
	
	//glcd_set_font(Liberation_Sans11x14_Numbers,11,14,46,57);
	glcd_set_font(Liberation_Sans15x21_Numbers,15,21,46,57);
    227c:	80 e9       	ldi	r24, 0x90	; 144
    227e:	99 e0       	ldi	r25, 0x09	; 9
    2280:	6f e0       	ldi	r22, 0x0F	; 15
    2282:	45 e1       	ldi	r20, 0x15	; 21
    2284:	2e e2       	ldi	r18, 0x2E	; 46
    2286:	09 e3       	ldi	r16, 0x39	; 57
    2288:	0e 94 54 09 	call	0x12a8	; 0x12a8 <glcd_set_font>
	//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
	//glcd_set_font(Liberation_Sans17x17_Alpha,17,17,46,90);

	max_y = GLCD_LCD_HEIGHT - font_current.height - 2; // max y start position for draw_string
    228c:	1e e2       	ldi	r17, 0x2E	; 46
    228e:	80 91 6a 03 	lds	r24, 0x036A
    2292:	18 1b       	sub	r17, r24
    2294:	00 e0       	ldi	r16, 0x00	; 0
    2296:	c0 e9       	ldi	r28, 0x90	; 144
    2298:	d1 e0       	ldi	r29, 0x01	; 1
    229a:	16 c0       	rjmp	.+44     	; 0x22c8 <glcd_test_text_up_down+0x54>

	while(1) {
		// move top to bottom
		for (y=0; y<max_y; y++) {
			DEMO_RETURN();
    229c:	80 91 66 01 	lds	r24, 0x0166
    22a0:	88 23       	and	r24, r24
    22a2:	d1 f4       	brne	.+52     	; 0x22d8 <glcd_test_text_up_down+0x64>
			glcd_clear_buffer();
    22a4:	0e 94 d1 06 	call	0xda2	; 0xda2 <glcd_clear_buffer>
			glcd_draw_string_xy(0,y,"123");
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	60 2f       	mov	r22, r16
    22ac:	46 e5       	ldi	r20, 0x56	; 86
    22ae:	51 e0       	ldi	r21, 0x01	; 1
    22b0:	0e 94 82 0b 	call	0x1704	; 0x1704 <glcd_draw_string_xy>
			glcd_write();
    22b4:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
    22b8:	80 e2       	ldi	r24, 0x20	; 32
    22ba:	93 e0       	ldi	r25, 0x03	; 3
    22bc:	fe 01       	movw	r30, r28
    22be:	31 97       	sbiw	r30, 0x01	; 1
    22c0:	f1 f7       	brne	.-4      	; 0x22be <glcd_test_text_up_down+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c4:	d9 f7       	brne	.-10     	; 0x22bc <glcd_test_text_up_down+0x48>

	max_y = GLCD_LCD_HEIGHT - font_current.height - 2; // max y start position for draw_string

	while(1) {
		// move top to bottom
		for (y=0; y<max_y; y++) {
    22c6:	0f 5f       	subi	r16, 0xFF	; 255
    22c8:	01 17       	cp	r16, r17
    22ca:	40 f3       	brcs	.-48     	; 0x229c <glcd_test_text_up_down+0x28>
    22cc:	01 2f       	mov	r16, r17
    22ce:	1d c0       	rjmp	.+58     	; 0x230a <glcd_test_text_up_down+0x96>
			delay_ms(80);
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
			DEMO_RETURN();
    22d0:	80 91 66 01 	lds	r24, 0x0166
    22d4:	88 23       	and	r24, r24
    22d6:	39 f0       	breq	.+14     	; 0x22e6 <glcd_test_text_up_down+0x72>
    22d8:	10 92 66 01 	sts	0x0166, r1
			delay_ms(80);
		}
		
	}

}
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	1f 91       	pop	r17
    22e2:	0f 91       	pop	r16
    22e4:	08 95       	ret
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
			DEMO_RETURN();
			glcd_clear_buffer();
    22e6:	0e 94 d1 06 	call	0xda2	; 0xda2 <glcd_clear_buffer>
			glcd_draw_string_xy(0,y,"456");
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	60 2f       	mov	r22, r16
    22ee:	4a e5       	ldi	r20, 0x5A	; 90
    22f0:	51 e0       	ldi	r21, 0x01	; 1
    22f2:	0e 94 82 0b 	call	0x1704	; 0x1704 <glcd_draw_string_xy>
			glcd_write();
    22f6:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
    22fa:	80 e2       	ldi	r24, 0x20	; 32
    22fc:	93 e0       	ldi	r25, 0x03	; 3
    22fe:	fe 01       	movw	r30, r28
    2300:	31 97       	sbiw	r30, 0x01	; 1
    2302:	f1 f7       	brne	.-4      	; 0x2300 <glcd_test_text_up_down+0x8c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2304:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2306:	d9 f7       	brne	.-10     	; 0x22fe <glcd_test_text_up_down+0x8a>
			glcd_write();
			delay_ms(80);
		}

		// move bottom to top
		for (y=(max_y); y>0; y--) {
    2308:	01 50       	subi	r16, 0x01	; 1
    230a:	00 23       	and	r16, r16
    230c:	09 f7       	brne	.-62     	; 0x22d0 <glcd_test_text_up_down+0x5c>
    230e:	dc cf       	rjmp	.-72     	; 0x22c8 <glcd_test_text_up_down+0x54>

00002310 <glcd_test_glcdutils>:
}

/* Test glcd-utils font table type, increments and display a 16-bit number over and over */
#include "fonts/Earthbound_12x19_48to57.h"
void glcd_test_glcdutils(void)
{
    2310:	8f 92       	push	r8
    2312:	9f 92       	push	r9
    2314:	af 92       	push	r10
    2316:	bf 92       	push	r11
    2318:	cf 92       	push	r12
    231a:	df 92       	push	r13
    231c:	ef 92       	push	r14
    231e:	0f 93       	push	r16
    2320:	df 93       	push	r29
    2322:	cf 93       	push	r28
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	28 97       	sbiw	r28, 0x08	; 8
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
	uint16_t count = 0;
	char string[8] = "";
    2334:	19 82       	std	Y+1, r1	; 0x01
    2336:	1a 82       	std	Y+2, r1	; 0x02
    2338:	1b 82       	std	Y+3, r1	; 0x03
    233a:	1c 82       	std	Y+4, r1	; 0x04
    233c:	1d 82       	std	Y+5, r1	; 0x05
    233e:	1e 82       	std	Y+6, r1	; 0x06
    2340:	1f 82       	std	Y+7, r1	; 0x07
    2342:	18 86       	std	Y+8, r1	; 0x08
    2344:	cc 24       	eor	r12, r12
    2346:	dd 24       	eor	r13, r13
		glcd_clear_buffer();

		/* Set the font */
		glcd_font(font_Earthbound_12x19_48to57,12,19,48,57,GLCD_UTILS);

		sprintf(string,"%d",count);
    2348:	5e 01       	movw	r10, r28
    234a:	08 94       	sec
    234c:	a1 1c       	adc	r10, r1
    234e:	b1 1c       	adc	r11, r1
    2350:	fe e5       	ldi	r31, 0x5E	; 94
    2352:	8f 2e       	mov	r8, r31
    2354:	f1 e0       	ldi	r31, 0x01	; 1
    2356:	9f 2e       	mov	r9, r31
void glcd_test_glcdutils(void)
{
	uint16_t count = 0;
	char string[8] = "";
	while(1) {
		glcd_clear_buffer();
    2358:	0e 94 d1 06 	call	0xda2	; 0xda2 <glcd_clear_buffer>

		/* Set the font */
		glcd_font(font_Earthbound_12x19_48to57,12,19,48,57,GLCD_UTILS);
    235c:	88 e4       	ldi	r24, 0x48	; 72
    235e:	96 e0       	ldi	r25, 0x06	; 6
    2360:	6c e0       	ldi	r22, 0x0C	; 12
    2362:	43 e1       	ldi	r20, 0x13	; 19
    2364:	20 e3       	ldi	r18, 0x30	; 48
    2366:	09 e3       	ldi	r16, 0x39	; 57
    2368:	e2 e0       	ldi	r30, 0x02	; 2
    236a:	ee 2e       	mov	r14, r30
    236c:	0e 94 66 09 	call	0x12cc	; 0x12cc <glcd_font>

		sprintf(string,"%d",count);
    2370:	00 d0       	rcall	.+0      	; 0x2372 <glcd_test_glcdutils+0x62>
    2372:	00 d0       	rcall	.+0      	; 0x2374 <glcd_test_glcdutils+0x64>
    2374:	00 d0       	rcall	.+0      	; 0x2376 <glcd_test_glcdutils+0x66>
    2376:	ed b7       	in	r30, 0x3d	; 61
    2378:	fe b7       	in	r31, 0x3e	; 62
    237a:	31 96       	adiw	r30, 0x01	; 1
    237c:	ad b7       	in	r26, 0x3d	; 61
    237e:	be b7       	in	r27, 0x3e	; 62
    2380:	12 96       	adiw	r26, 0x02	; 2
    2382:	bc 92       	st	X, r11
    2384:	ae 92       	st	-X, r10
    2386:	11 97       	sbiw	r26, 0x01	; 1
    2388:	93 82       	std	Z+3, r9	; 0x03
    238a:	82 82       	std	Z+2, r8	; 0x02
    238c:	d5 82       	std	Z+5, r13	; 0x05
    238e:	c4 82       	std	Z+4, r12	; 0x04
    2390:	0e 94 33 16 	call	0x2c66	; 0x2c66 <sprintf>
		glcd_draw_string_xy(0,0,string);
    2394:	8d b7       	in	r24, 0x3d	; 61
    2396:	9e b7       	in	r25, 0x3e	; 62
    2398:	06 96       	adiw	r24, 0x06	; 6
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	9e bf       	out	0x3e, r25	; 62
    23a0:	0f be       	out	0x3f, r0	; 63
    23a2:	8d bf       	out	0x3d, r24	; 61
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	60 e0       	ldi	r22, 0x00	; 0
    23a8:	a5 01       	movw	r20, r10
    23aa:	0e 94 82 0b 	call	0x1704	; 0x1704 <glcd_draw_string_xy>
		glcd_write();
    23ae:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
		
		count += 1;
    23b2:	08 94       	sec
    23b4:	c1 1c       	adc	r12, r1
    23b6:	d1 1c       	adc	r13, r1

		DEMO_RETURN();
    23b8:	80 91 66 01 	lds	r24, 0x0166
    23bc:	88 23       	and	r24, r24
    23be:	61 f2       	breq	.-104    	; 0x2358 <glcd_test_glcdutils+0x48>
    23c0:	10 92 66 01 	sts	0x0166, r1
	}
}
    23c4:	28 96       	adiw	r28, 0x08	; 8
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	cd bf       	out	0x3d, r28	; 61
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	0f 91       	pop	r16
    23d6:	ef 90       	pop	r14
    23d8:	df 90       	pop	r13
    23da:	cf 90       	pop	r12
    23dc:	bf 90       	pop	r11
    23de:	af 90       	pop	r10
    23e0:	9f 90       	pop	r9
    23e2:	8f 90       	pop	r8
    23e4:	08 95       	ret

000023e6 <glcd_test_counter_and_graph>:
		DEMO_RETURN();
	}
}

void glcd_test_counter_and_graph(void)
{
    23e6:	8f 92       	push	r8
    23e8:	9f 92       	push	r9
    23ea:	af 92       	push	r10
    23ec:	bf 92       	push	r11
    23ee:	df 92       	push	r13
    23f0:	ef 92       	push	r14
    23f2:	ff 92       	push	r15
    23f4:	0f 93       	push	r16
    23f6:	1f 93       	push	r17
    23f8:	df 93       	push	r29
    23fa:	cf 93       	push	r28
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
    2400:	28 97       	sbiw	r28, 0x08	; 8
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	f8 94       	cli
    2406:	de bf       	out	0x3e, r29	; 62
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	cd bf       	out	0x3d, r28	; 61
	uint8_t count = 0;
	char string[8] = "";
    240c:	19 82       	std	Y+1, r1	; 0x01
    240e:	1a 82       	std	Y+2, r1	; 0x02
    2410:	1b 82       	std	Y+3, r1	; 0x03
    2412:	1c 82       	std	Y+4, r1	; 0x04
    2414:	1d 82       	std	Y+5, r1	; 0x05
    2416:	1e 82       	std	Y+6, r1	; 0x06
    2418:	1f 82       	std	Y+7, r1	; 0x07
    241a:	18 86       	std	Y+8, r1	; 0x08
    241c:	dd 24       	eor	r13, r13
		//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
		//glcd_set_font(Bebas_Neue20x36_Bold_Numbers,20,36,46,57);
		//glcd_set_font(Bebas_Neue18x36_Numbers,18,36,46,57);
		//glcd_set_font(HelveticaNeueLT_Com_57_Cn23x35_Numbers,23,35,46,57); // commercial font - not for public distribution

		sprintf(string,"%d",count);
    241e:	5e 01       	movw	r10, r28
    2420:	08 94       	sec
    2422:	a1 1c       	adc	r10, r1
    2424:	b1 1c       	adc	r11, r1
    2426:	1e e5       	ldi	r17, 0x5E	; 94
    2428:	81 2e       	mov	r8, r17
    242a:	11 e0       	ldi	r17, 0x01	; 1
    242c:	91 2e       	mov	r9, r17
void glcd_test_counter_and_graph(void)
{
	uint8_t count = 0;
	char string[8] = "";
	while(1) {
		glcd_clear_buffer();
    242e:	0e 94 d1 06 	call	0xda2	; 0xda2 <glcd_clear_buffer>

		//glcd_tiny_set_font(Font5x7,5,7,32,127);
		//glcd_draw_string_xy(0,40,(char *)utoa(count,string,10));

		glcd_set_font(Liberation_Sans15x21_Numbers,15,21,46,57);
    2432:	80 e9       	ldi	r24, 0x90	; 144
    2434:	99 e0       	ldi	r25, 0x09	; 9
    2436:	6f e0       	ldi	r22, 0x0F	; 15
    2438:	45 e1       	ldi	r20, 0x15	; 21
    243a:	2e e2       	ldi	r18, 0x2E	; 46
    243c:	09 e3       	ldi	r16, 0x39	; 57
    243e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <glcd_set_font>
		//glcd_set_font(Liberation_Sans27x36_Numbers,27,36,46,57);
		//glcd_set_font(Bebas_Neue20x36_Bold_Numbers,20,36,46,57);
		//glcd_set_font(Bebas_Neue18x36_Numbers,18,36,46,57);
		//glcd_set_font(HelveticaNeueLT_Com_57_Cn23x35_Numbers,23,35,46,57); // commercial font - not for public distribution

		sprintf(string,"%d",count);
    2442:	ed 2c       	mov	r14, r13
    2444:	ff 24       	eor	r15, r15
    2446:	00 d0       	rcall	.+0      	; 0x2448 <glcd_test_counter_and_graph+0x62>
    2448:	00 d0       	rcall	.+0      	; 0x244a <glcd_test_counter_and_graph+0x64>
    244a:	00 d0       	rcall	.+0      	; 0x244c <glcd_test_counter_and_graph+0x66>
    244c:	ed b7       	in	r30, 0x3d	; 61
    244e:	fe b7       	in	r31, 0x3e	; 62
    2450:	31 96       	adiw	r30, 0x01	; 1
    2452:	ad b7       	in	r26, 0x3d	; 61
    2454:	be b7       	in	r27, 0x3e	; 62
    2456:	12 96       	adiw	r26, 0x02	; 2
    2458:	bc 92       	st	X, r11
    245a:	ae 92       	st	-X, r10
    245c:	11 97       	sbiw	r26, 0x01	; 1
    245e:	93 82       	std	Z+3, r9	; 0x03
    2460:	82 82       	std	Z+2, r8	; 0x02
    2462:	f5 82       	std	Z+5, r15	; 0x05
    2464:	e4 82       	std	Z+4, r14	; 0x04
    2466:	0e 94 33 16 	call	0x2c66	; 0x2c66 <sprintf>
		glcd_draw_string_xy(0,0,string);
    246a:	8d b7       	in	r24, 0x3d	; 61
    246c:	9e b7       	in	r25, 0x3e	; 62
    246e:	06 96       	adiw	r24, 0x06	; 6
    2470:	0f b6       	in	r0, 0x3f	; 63
    2472:	f8 94       	cli
    2474:	9e bf       	out	0x3e, r25	; 62
    2476:	0f be       	out	0x3f, r0	; 63
    2478:	8d bf       	out	0x3d, r24	; 61
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	60 e0       	ldi	r22, 0x00	; 0
    247e:	a5 01       	movw	r20, r10
    2480:	0e 94 82 0b 	call	0x1704	; 0x1704 <glcd_draw_string_xy>
		glcd_bar_graph_horizontal(10,38,30,6,count*4);
    2484:	87 01       	movw	r16, r14
    2486:	00 0f       	add	r16, r16
    2488:	11 1f       	adc	r17, r17
    248a:	00 0f       	add	r16, r16
    248c:	11 1f       	adc	r17, r17
    248e:	8a e0       	ldi	r24, 0x0A	; 10
    2490:	66 e2       	ldi	r22, 0x26	; 38
    2492:	4e e1       	ldi	r20, 0x1E	; 30
    2494:	26 e0       	ldi	r18, 0x06	; 6
    2496:	0e 94 2b 09 	call	0x1256	; 0x1256 <glcd_bar_graph_horizontal>
		glcd_bar_graph_vertical(70,0,8,30,count*2);
    249a:	ee 0c       	add	r14, r14
    249c:	ff 1c       	adc	r15, r15
    249e:	86 e4       	ldi	r24, 0x46	; 70
    24a0:	60 e0       	ldi	r22, 0x00	; 0
    24a2:	48 e0       	ldi	r20, 0x08	; 8
    24a4:	2e e1       	ldi	r18, 0x1E	; 30
    24a6:	0e 2d       	mov	r16, r14
    24a8:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <glcd_bar_graph_vertical>

		glcd_write();
    24ac:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
		count += 1;
    24b0:	d3 94       	inc	r13

		DEMO_RETURN();
    24b2:	80 91 66 01 	lds	r24, 0x0166
    24b6:	88 23       	and	r24, r24
    24b8:	09 f4       	brne	.+2      	; 0x24bc <glcd_test_counter_and_graph+0xd6>
    24ba:	b9 cf       	rjmp	.-142    	; 0x242e <glcd_test_counter_and_graph+0x48>
    24bc:	10 92 66 01 	sts	0x0166, r1
	}

}
    24c0:	28 96       	adiw	r28, 0x08	; 8
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	cf 91       	pop	r28
    24ce:	df 91       	pop	r29
    24d0:	1f 91       	pop	r17
    24d2:	0f 91       	pop	r16
    24d4:	ff 90       	pop	r15
    24d6:	ef 90       	pop	r14
    24d8:	df 90       	pop	r13
    24da:	bf 90       	pop	r11
    24dc:	af 90       	pop	r10
    24de:	9f 90       	pop	r9
    24e0:	8f 90       	pop	r8
    24e2:	08 95       	ret

000024e4 <glcd_test_circles>:
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf0, 0xe0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xf0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 
	};
#endif /* GLCD_UNIT_TEST_BITMAP_ENABLE */

void glcd_test_circles(void)
{
    24e4:	cf 92       	push	r12
    24e6:	df 92       	push	r13
    24e8:	ef 92       	push	r14
    24ea:	ff 92       	push	r15
    24ec:	0f 93       	push	r16
    24ee:	1f 93       	push	r17
    24f0:	cf 93       	push	r28
    24f2:	df 93       	push	r29
    24f4:	00 e4       	ldi	r16, 0x40	; 64
    24f6:	c0 2e       	mov	r12, r16
    24f8:	0f e1       	ldi	r16, 0x1F	; 31
    24fa:	d0 2e       	mov	r13, r16
	uint8_t x,y,radius;

	while (1) {
		uint8_t i;
		
		glcd_clear();
    24fc:	c0 ea       	ldi	r28, 0xA0	; 160
    24fe:	df e0       	ldi	r29, 0x0F	; 15
    2500:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <glcd_clear>

		// generate random(ish) position on display
		x = rand() % GLCD_LCD_WIDTH;
    2504:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <rand>
    2508:	64 e5       	ldi	r22, 0x54	; 84
    250a:	70 e0       	ldi	r23, 0x00	; 0
    250c:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__divmodhi4>
    2510:	e8 2e       	mov	r14, r24
		y = rand() % GLCD_LCD_HEIGHT;
    2512:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <rand>
    2516:	60 e3       	ldi	r22, 0x30	; 48
    2518:	70 e0       	ldi	r23, 0x00	; 0
    251a:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__divmodhi4>
    251e:	f8 2e       	mov	r15, r24
		radius = rand() % 50;
    2520:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <rand>
    2524:	62 e3       	ldi	r22, 0x32	; 50
    2526:	70 e0       	ldi	r23, 0x00	; 0
    2528:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__divmodhi4>
    252c:	08 2f       	mov	r16, r24
    252e:	10 e0       	ldi	r17, 0x00	; 0
		//x = 70; y=25; radius=50; // for debugging

		// fill circle with black
		
		for (i=0; i<=radius; i++) {
			glcd_fill_circle(x,y,i,BLACK);
    2530:	8e 2d       	mov	r24, r14
    2532:	6f 2d       	mov	r22, r15
    2534:	41 2f       	mov	r20, r17
    2536:	21 e0       	ldi	r18, 0x01	; 1
    2538:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <glcd_fill_circle>
			glcd_write();
    253c:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
    2540:	c6 01       	movw	r24, r12
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	f1 f7       	brne	.-4      	; 0x2542 <glcd_test_circles+0x5e>

		//x = 70; y=25; radius=50; // for debugging

		// fill circle with black
		
		for (i=0; i<=radius; i++) {
    2546:	1f 5f       	subi	r17, 0xFF	; 255
    2548:	01 17       	cp	r16, r17
    254a:	90 f7       	brcc	.-28     	; 0x2530 <glcd_test_circles+0x4c>
    254c:	10 e0       	ldi	r17, 0x00	; 0
			delay_ms(2);
		}

		// fill the same circle above but with white
		for (i=0; i<=radius; i++) {
			glcd_fill_circle(x,y,i,WHITE);
    254e:	8e 2d       	mov	r24, r14
    2550:	6f 2d       	mov	r22, r15
    2552:	41 2f       	mov	r20, r17
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <glcd_fill_circle>
			glcd_write();
    255a:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
    255e:	ce 01       	movw	r24, r28
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <glcd_test_circles+0x7c>
			glcd_write();
			delay_ms(2);
		}

		// fill the same circle above but with white
		for (i=0; i<=radius; i++) {
    2564:	1f 5f       	subi	r17, 0xFF	; 255
    2566:	01 17       	cp	r16, r17
    2568:	90 f7       	brcc	.-28     	; 0x254e <glcd_test_circles+0x6a>
			glcd_fill_circle(x,y,i,WHITE);
			glcd_write();
			delay_ms(1);
		}
		DEMO_RETURN();
    256a:	80 91 66 01 	lds	r24, 0x0166
    256e:	88 23       	and	r24, r24
    2570:	39 f2       	breq	.-114    	; 0x2500 <glcd_test_circles+0x1c>
    2572:	10 92 66 01 	sts	0x0166, r1
	}
}
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	ff 90       	pop	r15
    2580:	ef 90       	pop	r14
    2582:	df 90       	pop	r13
    2584:	cf 90       	pop	r12
    2586:	08 95       	ret

00002588 <glcd_tiny_set_font>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_set_font(PGM_P font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#else
void glcd_tiny_set_font(const char * font_table, uint8_t width, uint8_t height, char start_char, char end_char)
#endif
{
    2588:	0f 93       	push	r16
	font_current.font_table = font_table;
    258a:	90 93 68 03 	sts	0x0368, r25
    258e:	80 93 67 03 	sts	0x0367, r24
	font_current.width = width;
    2592:	60 93 69 03 	sts	0x0369, r22
	font_current.height = height;
    2596:	40 93 6a 03 	sts	0x036A, r20
	font_current.start_char = start_char;
    259a:	20 93 6b 03 	sts	0x036B, r18
	font_current.end_char = end_char;
    259e:	00 93 6c 03 	sts	0x036C, r16
	font_current.table_type = STANG;
    25a2:	10 92 6d 03 	sts	0x036D, r1
}
    25a6:	0f 91       	pop	r16
    25a8:	08 95       	ret

000025aa <glcd_tiny_draw_char_xy>:
{
	glcd_invert_area(0,line*8,GLCD_LCD_WIDTH-1,8);
}

void glcd_tiny_draw_char_xy(uint8_t x, uint8_t y, char c)
{
    25aa:	bf 92       	push	r11
    25ac:	cf 92       	push	r12
    25ae:	df 92       	push	r13
    25b0:	ef 92       	push	r14
    25b2:	ff 92       	push	r15
    25b4:	0f 93       	push	r16
    25b6:	1f 93       	push	r17
    25b8:	cf 93       	push	r28
    25ba:	df 93       	push	r29
    25bc:	f8 2e       	mov	r15, r24
    25be:	e6 2e       	mov	r14, r22
	uint8_t dat;
	
	/* Only works for fonts < 8 bits in height */
	
	/* Check all important bounds requirements are okay */
	if ( (y >= GLCD_LCD_HEIGHT) || ((x+font_current.width) >= GLCD_LCD_WIDTH) || (font_current.height >= 8) || font_current.table_type != STANG) {
    25c0:	5f e2       	ldi	r21, 0x2F	; 47
    25c2:	56 17       	cp	r21, r22
    25c4:	08 f4       	brcc	.+2      	; 0x25c8 <glcd_tiny_draw_char_xy+0x1e>
    25c6:	5d c0       	rjmp	.+186    	; 0x2682 <glcd_tiny_draw_char_xy+0xd8>
    25c8:	80 91 69 03 	lds	r24, 0x0369
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	8f 0d       	add	r24, r15
    25d0:	91 1d       	adc	r25, r1
    25d2:	84 35       	cpi	r24, 0x54	; 84
    25d4:	91 05       	cpc	r25, r1
    25d6:	0c f0       	brlt	.+2      	; 0x25da <glcd_tiny_draw_char_xy+0x30>
    25d8:	54 c0       	rjmp	.+168    	; 0x2682 <glcd_tiny_draw_char_xy+0xd8>
    25da:	80 91 6a 03 	lds	r24, 0x036A
    25de:	88 30       	cpi	r24, 0x08	; 8
    25e0:	08 f0       	brcs	.+2      	; 0x25e4 <glcd_tiny_draw_char_xy+0x3a>
    25e2:	4f c0       	rjmp	.+158    	; 0x2682 <glcd_tiny_draw_char_xy+0xd8>
    25e4:	80 91 6d 03 	lds	r24, 0x036D
    25e8:	88 23       	and	r24, r24
    25ea:	09 f0       	breq	.+2      	; 0x25ee <glcd_tiny_draw_char_xy+0x44>
    25ec:	4a c0       	rjmp	.+148    	; 0x2682 <glcd_tiny_draw_char_xy+0xd8>
		return;
	}		
	if (c < font_current.start_char || c > font_current.end_char) {
    25ee:	80 91 6b 03 	lds	r24, 0x036B
    25f2:	48 17       	cp	r20, r24
    25f4:	20 f0       	brcs	.+8      	; 0x25fe <glcd_tiny_draw_char_xy+0x54>
    25f6:	80 91 6c 03 	lds	r24, 0x036C
    25fa:	84 17       	cp	r24, r20
    25fc:	08 f4       	brcc	.+2      	; 0x2600 <glcd_tiny_draw_char_xy+0x56>
    25fe:	4e e2       	ldi	r20, 0x2E	; 46
    2600:	00 e0       	ldi	r16, 0x00	; 0
	
	xvar = x;
	
	for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)			
		dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    2602:	c4 2e       	mov	r12, r20
    2604:	dd 24       	eor	r13, r13
    2606:	2f c0       	rjmp	.+94     	; 0x2666 <glcd_tiny_draw_char_xy+0xbc>
    2608:	80 91 6b 03 	lds	r24, 0x036B
    260c:	96 01       	movw	r18, r12
    260e:	28 1b       	sub	r18, r24
    2610:	31 09       	sbc	r19, r1
    2612:	84 2f       	mov	r24, r20
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	ac 01       	movw	r20, r24
    2618:	24 9f       	mul	r18, r20
    261a:	c0 01       	movw	r24, r0
    261c:	25 9f       	mul	r18, r21
    261e:	90 0d       	add	r25, r0
    2620:	34 9f       	mul	r19, r20
    2622:	90 0d       	add	r25, r0
    2624:	11 24       	eor	r1, r1
    2626:	80 0f       	add	r24, r16
    2628:	91 1d       	adc	r25, r1
    262a:	e0 91 67 03 	lds	r30, 0x0367
    262e:	f0 91 68 03 	lds	r31, 0x0368
    2632:	e8 0f       	add	r30, r24
    2634:	f9 1f       	adc	r31, r25
    2636:	e4 91       	lpm	r30, Z+
    2638:	10 e0       	ldi	r17, 0x00	; 0
#else
		dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		for (yvar = 0; yvar < font_current.height; yvar++) {
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
    263a:	ce 2f       	mov	r28, r30
    263c:	d0 e0       	ldi	r29, 0x00	; 0
    263e:	0e c0       	rjmp	.+28     	; 0x265c <glcd_tiny_draw_char_xy+0xb2>
    2640:	61 2f       	mov	r22, r17
    2642:	6e 0d       	add	r22, r14
    2644:	ae 01       	movw	r20, r28
    2646:	01 2e       	mov	r0, r17
    2648:	02 c0       	rjmp	.+4      	; 0x264e <glcd_tiny_draw_char_xy+0xa4>
    264a:	55 95       	asr	r21
    264c:	47 95       	ror	r20
    264e:	0a 94       	dec	r0
    2650:	e2 f7       	brpl	.-8      	; 0x264a <glcd_tiny_draw_char_xy+0xa0>
    2652:	41 70       	andi	r20, 0x01	; 1
    2654:	8b 2d       	mov	r24, r11
    2656:	0e 94 25 0c 	call	0x184a	; 0x184a <glcd_set_pixel>
#if defined(GLCD_DEVICE_AVR8)			
		dat = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#else
		dat = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		for (yvar = 0; yvar < font_current.height; yvar++) {
    265a:	1f 5f       	subi	r17, 0xFF	; 255
    265c:	80 91 6a 03 	lds	r24, 0x036A
    2660:	18 17       	cp	r17, r24
    2662:	70 f3       	brcs	.-36     	; 0x2640 <glcd_tiny_draw_char_xy+0x96>
		c = '.';
	}
	
	xvar = x;
	
	for ( i = 0; i < font_current.width; i++ ) {
    2664:	0f 5f       	subi	r16, 0xFF	; 255
    2666:	b0 2e       	mov	r11, r16
    2668:	bf 0c       	add	r11, r15
    266a:	40 91 69 03 	lds	r20, 0x0369
    266e:	04 17       	cp	r16, r20
    2670:	58 f2       	brcs	.-106    	; 0x2608 <glcd_tiny_draw_char_xy+0x5e>
			glcd_set_pixel(xvar,y+yvar, (dat & (1<<yvar) ? 1 : 0) );
		}
		xvar++;
	}
	
	glcd_update_bbox(x, y, x+font_current.width,y+font_current.height);
    2672:	4f 0d       	add	r20, r15
    2674:	20 91 6a 03 	lds	r18, 0x036A
    2678:	2e 0d       	add	r18, r14
    267a:	8f 2d       	mov	r24, r15
    267c:	6e 2d       	mov	r22, r14
    267e:	0e 94 53 06 	call	0xca6	; 0xca6 <glcd_update_bbox>
	
}
    2682:	df 91       	pop	r29
    2684:	cf 91       	pop	r28
    2686:	1f 91       	pop	r17
    2688:	0f 91       	pop	r16
    268a:	ff 90       	pop	r15
    268c:	ef 90       	pop	r14
    268e:	df 90       	pop	r13
    2690:	cf 90       	pop	r12
    2692:	bf 90       	pop	r11
    2694:	08 95       	ret

00002696 <glcd_tiny_draw_char>:
	font_current.end_char = end_char;
	font_current.table_type = STANG;
}

void glcd_tiny_draw_char(uint8_t x, uint8_t line, char c)
{
    2696:	0f 93       	push	r16
    2698:	1f 93       	push	r17
    269a:	cf 93       	push	r28
    269c:	df 93       	push	r29
    269e:	08 2f       	mov	r16, r24
    26a0:	26 2f       	mov	r18, r22
    26a2:	14 2f       	mov	r17, r20
	uint8_t i;
	
	/* Only works for fonts < 8 bits in height */
	if (font_current.height >= 8) {
    26a4:	60 91 6a 03 	lds	r22, 0x036A
    26a8:	68 30       	cpi	r22, 0x08	; 8
    26aa:	08 f0       	brcs	.+2      	; 0x26ae <glcd_tiny_draw_char+0x18>
    26ac:	6a c0       	rjmp	.+212    	; 0x2782 <glcd_tiny_draw_char+0xec>
		return;
	}
	if (c < font_current.start_char || c > font_current.end_char) {
    26ae:	80 91 6b 03 	lds	r24, 0x036B
    26b2:	48 17       	cp	r20, r24
    26b4:	20 f0       	brcs	.+8      	; 0x26be <glcd_tiny_draw_char+0x28>
    26b6:	80 91 6c 03 	lds	r24, 0x036C
    26ba:	84 17       	cp	r24, r20
    26bc:	08 f4       	brcc	.+2      	; 0x26c0 <glcd_tiny_draw_char+0x2a>
    26be:	1e e2       	ldi	r17, 0x2E	; 46
		c = '.';
	}
	if ( line >= GLCD_LCD_HEIGHT / (font_current.height + 1) ) {
    26c0:	c2 2f       	mov	r28, r18
    26c2:	d0 e0       	ldi	r29, 0x00	; 0
    26c4:	e6 2f       	mov	r30, r22
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	31 96       	adiw	r30, 0x01	; 1
    26ca:	80 e3       	ldi	r24, 0x30	; 48
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	bf 01       	movw	r22, r30
    26d0:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__divmodhi4>
    26d4:	c6 17       	cp	r28, r22
    26d6:	d7 07       	cpc	r29, r23
    26d8:	0c f0       	brlt	.+2      	; 0x26dc <glcd_tiny_draw_char+0x46>
    26da:	53 c0       	rjmp	.+166    	; 0x2782 <glcd_tiny_draw_char+0xec>
		return;
	}		
	if ( (x+font_current.width) >= GLCD_LCD_WIDTH ) {
    26dc:	40 91 69 03 	lds	r20, 0x0369
    26e0:	84 2f       	mov	r24, r20
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	80 0f       	add	r24, r16
    26e6:	91 1d       	adc	r25, r1
    26e8:	84 35       	cpi	r24, 0x54	; 84
    26ea:	91 05       	cpc	r25, r1
    26ec:	0c f0       	brlt	.+2      	; 0x26f0 <glcd_tiny_draw_char+0x5a>
    26ee:	49 c0       	rjmp	.+146    	; 0x2782 <glcd_tiny_draw_char+0xec>
		return;
	}		
	
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
    26f0:	ce 9f       	mul	r28, r30
    26f2:	b0 01       	movw	r22, r0
    26f4:	cf 9f       	mul	r28, r31
    26f6:	70 0d       	add	r23, r0
    26f8:	de 9f       	mul	r29, r30
    26fa:	70 0d       	add	r23, r0
    26fc:	11 24       	eor	r1, r1
    26fe:	40 0f       	add	r20, r16
    2700:	21 96       	adiw	r28, 0x01	; 1
    2702:	ce 9f       	mul	r28, r30
    2704:	90 01       	movw	r18, r0
    2706:	cf 9f       	mul	r28, r31
    2708:	30 0d       	add	r19, r0
    270a:	de 9f       	mul	r29, r30
    270c:	30 0d       	add	r19, r0
    270e:	11 24       	eor	r1, r1
    2710:	21 97       	sbiw	r28, 0x01	; 1
    2712:	80 2f       	mov	r24, r16
    2714:	0e 94 53 06 	call	0xca6	; 0xca6 <glcd_update_bbox>
	
	for ( i = 0; i < font_current.width; i++ ) {
#if defined(GLCD_DEVICE_AVR8)		
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = pgm_read_byte( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
    2718:	84 e5       	ldi	r24, 0x54	; 84
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	c8 9f       	mul	r28, r24
    271e:	d0 01       	movw	r26, r0
    2720:	c9 9f       	mul	r28, r25
    2722:	b0 0d       	add	r27, r0
    2724:	d8 9f       	mul	r29, r24
    2726:	b0 0d       	add	r27, r0
    2728:	11 24       	eor	r1, r1
    272a:	50 e0       	ldi	r21, 0x00	; 0
    272c:	61 2f       	mov	r22, r17
    272e:	70 e0       	ldi	r23, 0x00	; 0
    2730:	22 c0       	rjmp	.+68     	; 0x2776 <glcd_tiny_draw_char+0xe0>
    2732:	80 91 6b 03 	lds	r24, 0x036B
    2736:	9b 01       	movw	r18, r22
    2738:	28 1b       	sub	r18, r24
    273a:	31 09       	sbc	r19, r1
    273c:	89 2f       	mov	r24, r25
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	fc 01       	movw	r30, r24
    2742:	2e 9f       	mul	r18, r30
    2744:	c0 01       	movw	r24, r0
    2746:	2f 9f       	mul	r18, r31
    2748:	90 0d       	add	r25, r0
    274a:	3e 9f       	mul	r19, r30
    274c:	90 0d       	add	r25, r0
    274e:	11 24       	eor	r1, r1
    2750:	85 0f       	add	r24, r21
    2752:	91 1d       	adc	r25, r1
    2754:	e0 91 67 03 	lds	r30, 0x0367
    2758:	f0 91 68 03 	lds	r31, 0x0368
    275c:	e8 0f       	add	r30, r24
    275e:	f9 1f       	adc	r31, r25
    2760:	84 91       	lpm	r24, Z+
    2762:	e0 91 63 03 	lds	r30, 0x0363
    2766:	f0 91 64 03 	lds	r31, 0x0364
    276a:	ea 0f       	add	r30, r26
    276c:	fb 1f       	adc	r31, r27
    276e:	e4 0f       	add	r30, r20
    2770:	f1 1d       	adc	r31, r1
    2772:	80 83       	st	Z, r24
		return;
	}		
	
	glcd_update_bbox(x, line*(font_current.height + 1), x+font_current.width, line*(font_current.height + 1) + (font_current.height + 1));
	
	for ( i = 0; i < font_current.width; i++ ) {
    2774:	5f 5f       	subi	r21, 0xFF	; 255
    2776:	45 2f       	mov	r20, r21
    2778:	40 0f       	add	r20, r16
    277a:	90 91 69 03 	lds	r25, 0x0369
    277e:	59 17       	cp	r21, r25
    2780:	c0 f2       	brcs	.-80     	; 0x2732 <glcd_tiny_draw_char+0x9c>
#else
		glcd_buffer_selected[x + (line * GLCD_LCD_WIDTH)] = *( font_current.font_table + ((c - font_current.start_char) * (font_current.width)) + i );
#endif
		x++;
	}
}
    2782:	df 91       	pop	r29
    2784:	cf 91       	pop	r28
    2786:	1f 91       	pop	r17
    2788:	0f 91       	pop	r16
    278a:	08 95       	ret

0000278c <glcd_tiny_draw_string_P>:
#if defined(GLCD_DEVICE_AVR8)
void glcd_tiny_draw_string_P(uint8_t x, uint8_t line, PGM_P str)
#else
void glcd_tiny_draw_string_P(uint8_t x, uint8_t line, const char *str)
#endif
{
    278c:	0f 93       	push	r16
    278e:	1f 93       	push	r17
    2790:	cf 93       	push	r28
    2792:	df 93       	push	r29
    2794:	18 2f       	mov	r17, r24
    2796:	06 2f       	mov	r16, r22
    2798:	ea 01       	movw	r28, r20
	if (font_current.height >= 8) {
    279a:	80 91 6a 03 	lds	r24, 0x036A
    279e:	88 30       	cpi	r24, 0x08	; 8
    27a0:	20 f5       	brcc	.+72     	; 0x27ea <glcd_tiny_draw_string_P+0x5e>
		return;
    27a2:	fe 01       	movw	r30, r28
	}
	while (1) {
#if defined(GLCD_DEVICE_AVR8)
		char c = pgm_read_byte(str++);
    27a4:	21 96       	adiw	r28, 0x01	; 1
    27a6:	44 91       	lpm	r20, Z+
#else
		char c = *(str++);
#endif
		if (!c)
    27a8:	44 23       	and	r20, r20
    27aa:	f9 f0       	breq	.+62     	; 0x27ea <glcd_tiny_draw_string_P+0x5e>
			return;	
				
		glcd_tiny_draw_char(x, line, c);
    27ac:	81 2f       	mov	r24, r17
    27ae:	60 2f       	mov	r22, r16
    27b0:	0e 94 4b 13 	call	0x2696	; 0x2696 <glcd_tiny_draw_char>
		
		x += (font_current.width + 1);
    27b4:	80 91 69 03 	lds	r24, 0x0369
    27b8:	8f 5f       	subi	r24, 0xFF	; 255
    27ba:	18 0f       	add	r17, r24
    27bc:	81 50       	subi	r24, 0x01	; 1
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	81 0f       	add	r24, r17
    27c2:	91 1d       	adc	r25, r1
    27c4:	84 35       	cpi	r24, 0x54	; 84
    27c6:	91 05       	cpc	r25, r1
    27c8:	14 f0       	brlt	.+4      	; 0x27ce <glcd_tiny_draw_string_P+0x42>
			x = 0; /* Ran out of this line */
			line++;
    27ca:	0f 5f       	subi	r16, 0xFF	; 255
    27cc:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
    27ce:	20 2f       	mov	r18, r16
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	60 91 6a 03 	lds	r22, 0x036A
    27d6:	70 e0       	ldi	r23, 0x00	; 0
    27d8:	6f 5f       	subi	r22, 0xFF	; 255
    27da:	7f 4f       	sbci	r23, 0xFF	; 255
    27dc:	80 e3       	ldi	r24, 0x30	; 48
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__divmodhi4>
    27e4:	26 17       	cp	r18, r22
    27e6:	37 07       	cpc	r19, r23
    27e8:	e4 f2       	brlt	.-72     	; 0x27a2 <glcd_tiny_draw_string_P+0x16>
			return; /* Ran out of space :( */
	}	
}
    27ea:	df 91       	pop	r29
    27ec:	cf 91       	pop	r28
    27ee:	1f 91       	pop	r17
    27f0:	0f 91       	pop	r16
    27f2:	08 95       	ret

000027f4 <glcd_tiny_draw_string>:
		x++;
	}
}

void glcd_tiny_draw_string(uint8_t x, uint8_t line, char *str)
{
    27f4:	0f 93       	push	r16
    27f6:	1f 93       	push	r17
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	18 2f       	mov	r17, r24
    27fe:	06 2f       	mov	r16, r22
    2800:	ea 01       	movw	r28, r20
	if (font_current.height >= 8) {
    2802:	80 91 6a 03 	lds	r24, 0x036A
    2806:	88 30       	cpi	r24, 0x08	; 8
    2808:	08 f1       	brcs	.+66     	; 0x284c <glcd_tiny_draw_string+0x58>
    280a:	23 c0       	rjmp	.+70     	; 0x2852 <glcd_tiny_draw_string+0x5e>
		return;
	}
	while (*str) {
		glcd_tiny_draw_char(x, line, *str++);
    280c:	81 2f       	mov	r24, r17
    280e:	60 2f       	mov	r22, r16
    2810:	0e 94 4b 13 	call	0x2696	; 0x2696 <glcd_tiny_draw_char>
		x += (font_current.width + 1);
    2814:	80 91 69 03 	lds	r24, 0x0369
    2818:	8f 5f       	subi	r24, 0xFF	; 255
    281a:	18 0f       	add	r17, r24
    281c:	81 50       	subi	r24, 0x01	; 1
		if ((x + font_current.width + 1) > GLCD_LCD_WIDTH) {
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	81 0f       	add	r24, r17
    2822:	91 1d       	adc	r25, r1
    2824:	84 35       	cpi	r24, 0x54	; 84
    2826:	91 05       	cpc	r25, r1
    2828:	14 f0       	brlt	.+4      	; 0x282e <glcd_tiny_draw_string+0x3a>
			x = 0; /* Ran out of this line */
			line++;
    282a:	0f 5f       	subi	r16, 0xFF	; 255
    282c:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
    282e:	20 2f       	mov	r18, r16
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	60 91 6a 03 	lds	r22, 0x036A
    2836:	70 e0       	ldi	r23, 0x00	; 0
    2838:	6f 5f       	subi	r22, 0xFF	; 255
    283a:	7f 4f       	sbci	r23, 0xFF	; 255
    283c:	80 e3       	ldi	r24, 0x30	; 48
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <__divmodhi4>
    2844:	26 17       	cp	r18, r22
    2846:	37 07       	cpc	r19, r23
    2848:	24 f4       	brge	.+8      	; 0x2852 <glcd_tiny_draw_string+0x5e>
{
	if (font_current.height >= 8) {
		return;
	}
	while (*str) {
		glcd_tiny_draw_char(x, line, *str++);
    284a:	21 96       	adiw	r28, 0x01	; 1
void glcd_tiny_draw_string(uint8_t x, uint8_t line, char *str)
{
	if (font_current.height >= 8) {
		return;
	}
	while (*str) {
    284c:	48 81       	ld	r20, Y
    284e:	44 23       	and	r20, r20
    2850:	e9 f6       	brne	.-70     	; 0x280c <glcd_tiny_draw_string+0x18>
			line++;
		}
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
			return; /* Ran out of space :( */
	}
}
    2852:	df 91       	pop	r29
    2854:	cf 91       	pop	r28
    2856:	1f 91       	pop	r17
    2858:	0f 91       	pop	r16
    285a:	08 95       	ret

0000285c <glcd_tiny_invert_line>:
	glcd_write();
}

void glcd_tiny_invert_line(uint8_t line)
{
	glcd_invert_area(0,line*8,GLCD_LCD_WIDTH-1,8);
    285c:	68 2f       	mov	r22, r24
    285e:	70 e0       	ldi	r23, 0x00	; 0
    2860:	83 e0       	ldi	r24, 0x03	; 3
    2862:	66 0f       	add	r22, r22
    2864:	77 1f       	adc	r23, r23
    2866:	8a 95       	dec	r24
    2868:	e1 f7       	brne	.-8      	; 0x2862 <glcd_tiny_invert_line+0x6>
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	43 e5       	ldi	r20, 0x53	; 83
    286e:	28 e0       	ldi	r18, 0x08	; 8
    2870:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <glcd_invert_area>
}
    2874:	08 95       	ret

00002876 <glcd_tiny_draw_string_ammend_P>:
	glcd_scroll_line();
	glcd_tiny_draw_string(0, (GLCD_LCD_HEIGHT/8-1), str);
	glcd_write();
}

void glcd_tiny_draw_string_ammend_P(const char *str) {
    2876:	0f 93       	push	r16
    2878:	1f 93       	push	r17
    287a:	8c 01       	movw	r16, r24
	glcd_scroll_line();
    287c:	0e 94 a0 06 	call	0xd40	; 0xd40 <glcd_scroll_line>
	glcd_tiny_draw_string_P(0, (GLCD_LCD_HEIGHT/8-1), str);
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	65 e0       	ldi	r22, 0x05	; 5
    2884:	a8 01       	movw	r20, r16
    2886:	0e 94 c6 13 	call	0x278c	; 0x278c <glcd_tiny_draw_string_P>
	glcd_write();
    288a:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
}
    288e:	1f 91       	pop	r17
    2890:	0f 91       	pop	r16
    2892:	08 95       	ret

00002894 <glcd_tiny_draw_string_ammend>:
		if (line >= (GLCD_LCD_HEIGHT/(font_current.height + 1)))
			return; /* Ran out of space :( */
	}	
}

void glcd_tiny_draw_string_ammend(char *str) {
    2894:	0f 93       	push	r16
    2896:	1f 93       	push	r17
    2898:	8c 01       	movw	r16, r24
	glcd_scroll_line();
    289a:	0e 94 a0 06 	call	0xd40	; 0xd40 <glcd_scroll_line>
	glcd_tiny_draw_string(0, (GLCD_LCD_HEIGHT/8-1), str);
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	65 e0       	ldi	r22, 0x05	; 5
    28a2:	a8 01       	movw	r20, r16
    28a4:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <glcd_tiny_draw_string>
	glcd_write();
    28a8:	0e 94 39 07 	call	0xe72	; 0xe72 <glcd_write>
}
    28ac:	1f 91       	pop	r17
    28ae:	0f 91       	pop	r16
    28b0:	08 95       	ret

000028b2 <__cmpsf2>:
    28b2:	6c d0       	rcall	.+216    	; 0x298c <__fp_cmp>
    28b4:	08 f4       	brcc	.+2      	; 0x28b8 <__cmpsf2+0x6>
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	08 95       	ret

000028ba <__fixunssfsi>:
    28ba:	94 d0       	rcall	.+296    	; 0x29e4 <__fp_splitA>
    28bc:	88 f0       	brcs	.+34     	; 0x28e0 <__fixunssfsi+0x26>
    28be:	9f 57       	subi	r25, 0x7F	; 127
    28c0:	90 f0       	brcs	.+36     	; 0x28e6 <__fixunssfsi+0x2c>
    28c2:	b9 2f       	mov	r27, r25
    28c4:	99 27       	eor	r25, r25
    28c6:	b7 51       	subi	r27, 0x17	; 23
    28c8:	a0 f0       	brcs	.+40     	; 0x28f2 <__fixunssfsi+0x38>
    28ca:	d1 f0       	breq	.+52     	; 0x2900 <__fixunssfsi+0x46>
    28cc:	66 0f       	add	r22, r22
    28ce:	77 1f       	adc	r23, r23
    28d0:	88 1f       	adc	r24, r24
    28d2:	99 1f       	adc	r25, r25
    28d4:	1a f0       	brmi	.+6      	; 0x28dc <__fixunssfsi+0x22>
    28d6:	ba 95       	dec	r27
    28d8:	c9 f7       	brne	.-14     	; 0x28cc <__fixunssfsi+0x12>
    28da:	12 c0       	rjmp	.+36     	; 0x2900 <__fixunssfsi+0x46>
    28dc:	b1 30       	cpi	r27, 0x01	; 1
    28de:	81 f0       	breq	.+32     	; 0x2900 <__fixunssfsi+0x46>
    28e0:	9b d0       	rcall	.+310    	; 0x2a18 <__fp_zero>
    28e2:	b1 e0       	ldi	r27, 0x01	; 1
    28e4:	08 95       	ret
    28e6:	98 c0       	rjmp	.+304    	; 0x2a18 <__fp_zero>
    28e8:	67 2f       	mov	r22, r23
    28ea:	78 2f       	mov	r23, r24
    28ec:	88 27       	eor	r24, r24
    28ee:	b8 5f       	subi	r27, 0xF8	; 248
    28f0:	39 f0       	breq	.+14     	; 0x2900 <__fixunssfsi+0x46>
    28f2:	b9 3f       	cpi	r27, 0xF9	; 249
    28f4:	cc f3       	brlt	.-14     	; 0x28e8 <__fixunssfsi+0x2e>
    28f6:	86 95       	lsr	r24
    28f8:	77 95       	ror	r23
    28fa:	67 95       	ror	r22
    28fc:	b3 95       	inc	r27
    28fe:	d9 f7       	brne	.-10     	; 0x28f6 <__fixunssfsi+0x3c>
    2900:	3e f4       	brtc	.+14     	; 0x2910 <__fixunssfsi+0x56>
    2902:	90 95       	com	r25
    2904:	80 95       	com	r24
    2906:	70 95       	com	r23
    2908:	61 95       	neg	r22
    290a:	7f 4f       	sbci	r23, 0xFF	; 255
    290c:	8f 4f       	sbci	r24, 0xFF	; 255
    290e:	9f 4f       	sbci	r25, 0xFF	; 255
    2910:	08 95       	ret

00002912 <__floatunsisf>:
    2912:	e8 94       	clt
    2914:	09 c0       	rjmp	.+18     	; 0x2928 <__floatsisf+0x12>

00002916 <__floatsisf>:
    2916:	97 fb       	bst	r25, 7
    2918:	3e f4       	brtc	.+14     	; 0x2928 <__floatsisf+0x12>
    291a:	90 95       	com	r25
    291c:	80 95       	com	r24
    291e:	70 95       	com	r23
    2920:	61 95       	neg	r22
    2922:	7f 4f       	sbci	r23, 0xFF	; 255
    2924:	8f 4f       	sbci	r24, 0xFF	; 255
    2926:	9f 4f       	sbci	r25, 0xFF	; 255
    2928:	99 23       	and	r25, r25
    292a:	a9 f0       	breq	.+42     	; 0x2956 <__floatsisf+0x40>
    292c:	f9 2f       	mov	r31, r25
    292e:	96 e9       	ldi	r25, 0x96	; 150
    2930:	bb 27       	eor	r27, r27
    2932:	93 95       	inc	r25
    2934:	f6 95       	lsr	r31
    2936:	87 95       	ror	r24
    2938:	77 95       	ror	r23
    293a:	67 95       	ror	r22
    293c:	b7 95       	ror	r27
    293e:	f1 11       	cpse	r31, r1
    2940:	f8 cf       	rjmp	.-16     	; 0x2932 <__floatsisf+0x1c>
    2942:	fa f4       	brpl	.+62     	; 0x2982 <__floatsisf+0x6c>
    2944:	bb 0f       	add	r27, r27
    2946:	11 f4       	brne	.+4      	; 0x294c <__floatsisf+0x36>
    2948:	60 ff       	sbrs	r22, 0
    294a:	1b c0       	rjmp	.+54     	; 0x2982 <__floatsisf+0x6c>
    294c:	6f 5f       	subi	r22, 0xFF	; 255
    294e:	7f 4f       	sbci	r23, 0xFF	; 255
    2950:	8f 4f       	sbci	r24, 0xFF	; 255
    2952:	9f 4f       	sbci	r25, 0xFF	; 255
    2954:	16 c0       	rjmp	.+44     	; 0x2982 <__floatsisf+0x6c>
    2956:	88 23       	and	r24, r24
    2958:	11 f0       	breq	.+4      	; 0x295e <__floatsisf+0x48>
    295a:	96 e9       	ldi	r25, 0x96	; 150
    295c:	11 c0       	rjmp	.+34     	; 0x2980 <__floatsisf+0x6a>
    295e:	77 23       	and	r23, r23
    2960:	21 f0       	breq	.+8      	; 0x296a <__floatsisf+0x54>
    2962:	9e e8       	ldi	r25, 0x8E	; 142
    2964:	87 2f       	mov	r24, r23
    2966:	76 2f       	mov	r23, r22
    2968:	05 c0       	rjmp	.+10     	; 0x2974 <__floatsisf+0x5e>
    296a:	66 23       	and	r22, r22
    296c:	71 f0       	breq	.+28     	; 0x298a <__floatsisf+0x74>
    296e:	96 e8       	ldi	r25, 0x86	; 134
    2970:	86 2f       	mov	r24, r22
    2972:	70 e0       	ldi	r23, 0x00	; 0
    2974:	60 e0       	ldi	r22, 0x00	; 0
    2976:	2a f0       	brmi	.+10     	; 0x2982 <__floatsisf+0x6c>
    2978:	9a 95       	dec	r25
    297a:	66 0f       	add	r22, r22
    297c:	77 1f       	adc	r23, r23
    297e:	88 1f       	adc	r24, r24
    2980:	da f7       	brpl	.-10     	; 0x2978 <__floatsisf+0x62>
    2982:	88 0f       	add	r24, r24
    2984:	96 95       	lsr	r25
    2986:	87 95       	ror	r24
    2988:	97 f9       	bld	r25, 7
    298a:	08 95       	ret

0000298c <__fp_cmp>:
    298c:	99 0f       	add	r25, r25
    298e:	00 08       	sbc	r0, r0
    2990:	55 0f       	add	r21, r21
    2992:	aa 0b       	sbc	r26, r26
    2994:	e0 e8       	ldi	r30, 0x80	; 128
    2996:	fe ef       	ldi	r31, 0xFE	; 254
    2998:	16 16       	cp	r1, r22
    299a:	17 06       	cpc	r1, r23
    299c:	e8 07       	cpc	r30, r24
    299e:	f9 07       	cpc	r31, r25
    29a0:	c0 f0       	brcs	.+48     	; 0x29d2 <__fp_cmp+0x46>
    29a2:	12 16       	cp	r1, r18
    29a4:	13 06       	cpc	r1, r19
    29a6:	e4 07       	cpc	r30, r20
    29a8:	f5 07       	cpc	r31, r21
    29aa:	98 f0       	brcs	.+38     	; 0x29d2 <__fp_cmp+0x46>
    29ac:	62 1b       	sub	r22, r18
    29ae:	73 0b       	sbc	r23, r19
    29b0:	84 0b       	sbc	r24, r20
    29b2:	95 0b       	sbc	r25, r21
    29b4:	39 f4       	brne	.+14     	; 0x29c4 <__fp_cmp+0x38>
    29b6:	0a 26       	eor	r0, r26
    29b8:	61 f0       	breq	.+24     	; 0x29d2 <__fp_cmp+0x46>
    29ba:	23 2b       	or	r18, r19
    29bc:	24 2b       	or	r18, r20
    29be:	25 2b       	or	r18, r21
    29c0:	21 f4       	brne	.+8      	; 0x29ca <__fp_cmp+0x3e>
    29c2:	08 95       	ret
    29c4:	0a 26       	eor	r0, r26
    29c6:	09 f4       	brne	.+2      	; 0x29ca <__fp_cmp+0x3e>
    29c8:	a1 40       	sbci	r26, 0x01	; 1
    29ca:	a6 95       	lsr	r26
    29cc:	8f ef       	ldi	r24, 0xFF	; 255
    29ce:	81 1d       	adc	r24, r1
    29d0:	81 1d       	adc	r24, r1
    29d2:	08 95       	ret

000029d4 <__fp_split3>:
    29d4:	57 fd       	sbrc	r21, 7
    29d6:	90 58       	subi	r25, 0x80	; 128
    29d8:	44 0f       	add	r20, r20
    29da:	55 1f       	adc	r21, r21
    29dc:	59 f0       	breq	.+22     	; 0x29f4 <__fp_splitA+0x10>
    29de:	5f 3f       	cpi	r21, 0xFF	; 255
    29e0:	71 f0       	breq	.+28     	; 0x29fe <__fp_splitA+0x1a>
    29e2:	47 95       	ror	r20

000029e4 <__fp_splitA>:
    29e4:	88 0f       	add	r24, r24
    29e6:	97 fb       	bst	r25, 7
    29e8:	99 1f       	adc	r25, r25
    29ea:	61 f0       	breq	.+24     	; 0x2a04 <__fp_splitA+0x20>
    29ec:	9f 3f       	cpi	r25, 0xFF	; 255
    29ee:	79 f0       	breq	.+30     	; 0x2a0e <__fp_splitA+0x2a>
    29f0:	87 95       	ror	r24
    29f2:	08 95       	ret
    29f4:	12 16       	cp	r1, r18
    29f6:	13 06       	cpc	r1, r19
    29f8:	14 06       	cpc	r1, r20
    29fa:	55 1f       	adc	r21, r21
    29fc:	f2 cf       	rjmp	.-28     	; 0x29e2 <__fp_split3+0xe>
    29fe:	46 95       	lsr	r20
    2a00:	f1 df       	rcall	.-30     	; 0x29e4 <__fp_splitA>
    2a02:	08 c0       	rjmp	.+16     	; 0x2a14 <__fp_splitA+0x30>
    2a04:	16 16       	cp	r1, r22
    2a06:	17 06       	cpc	r1, r23
    2a08:	18 06       	cpc	r1, r24
    2a0a:	99 1f       	adc	r25, r25
    2a0c:	f1 cf       	rjmp	.-30     	; 0x29f0 <__fp_splitA+0xc>
    2a0e:	86 95       	lsr	r24
    2a10:	71 05       	cpc	r23, r1
    2a12:	61 05       	cpc	r22, r1
    2a14:	08 94       	sec
    2a16:	08 95       	ret

00002a18 <__fp_zero>:
    2a18:	e8 94       	clt

00002a1a <__fp_szero>:
    2a1a:	bb 27       	eor	r27, r27
    2a1c:	66 27       	eor	r22, r22
    2a1e:	77 27       	eor	r23, r23
    2a20:	cb 01       	movw	r24, r22
    2a22:	97 f9       	bld	r25, 7
    2a24:	08 95       	ret

00002a26 <__gesf2>:
    2a26:	b2 df       	rcall	.-156    	; 0x298c <__fp_cmp>
    2a28:	08 f4       	brcc	.+2      	; 0x2a2c <__gesf2+0x6>
    2a2a:	8f ef       	ldi	r24, 0xFF	; 255
    2a2c:	08 95       	ret

00002a2e <__mulsf3>:
    2a2e:	0b d0       	rcall	.+22     	; 0x2a46 <__mulsf3x>
    2a30:	78 c0       	rjmp	.+240    	; 0x2b22 <__fp_round>
    2a32:	69 d0       	rcall	.+210    	; 0x2b06 <__fp_pscA>
    2a34:	28 f0       	brcs	.+10     	; 0x2a40 <__mulsf3+0x12>
    2a36:	6e d0       	rcall	.+220    	; 0x2b14 <__fp_pscB>
    2a38:	18 f0       	brcs	.+6      	; 0x2a40 <__mulsf3+0x12>
    2a3a:	95 23       	and	r25, r21
    2a3c:	09 f0       	breq	.+2      	; 0x2a40 <__mulsf3+0x12>
    2a3e:	5a c0       	rjmp	.+180    	; 0x2af4 <__fp_inf>
    2a40:	5f c0       	rjmp	.+190    	; 0x2b00 <__fp_nan>
    2a42:	11 24       	eor	r1, r1
    2a44:	ea cf       	rjmp	.-44     	; 0x2a1a <__fp_szero>

00002a46 <__mulsf3x>:
    2a46:	c6 df       	rcall	.-116    	; 0x29d4 <__fp_split3>
    2a48:	a0 f3       	brcs	.-24     	; 0x2a32 <__mulsf3+0x4>

00002a4a <__mulsf3_pse>:
    2a4a:	95 9f       	mul	r25, r21
    2a4c:	d1 f3       	breq	.-12     	; 0x2a42 <__mulsf3+0x14>
    2a4e:	95 0f       	add	r25, r21
    2a50:	50 e0       	ldi	r21, 0x00	; 0
    2a52:	55 1f       	adc	r21, r21
    2a54:	62 9f       	mul	r22, r18
    2a56:	f0 01       	movw	r30, r0
    2a58:	72 9f       	mul	r23, r18
    2a5a:	bb 27       	eor	r27, r27
    2a5c:	f0 0d       	add	r31, r0
    2a5e:	b1 1d       	adc	r27, r1
    2a60:	63 9f       	mul	r22, r19
    2a62:	aa 27       	eor	r26, r26
    2a64:	f0 0d       	add	r31, r0
    2a66:	b1 1d       	adc	r27, r1
    2a68:	aa 1f       	adc	r26, r26
    2a6a:	64 9f       	mul	r22, r20
    2a6c:	66 27       	eor	r22, r22
    2a6e:	b0 0d       	add	r27, r0
    2a70:	a1 1d       	adc	r26, r1
    2a72:	66 1f       	adc	r22, r22
    2a74:	82 9f       	mul	r24, r18
    2a76:	22 27       	eor	r18, r18
    2a78:	b0 0d       	add	r27, r0
    2a7a:	a1 1d       	adc	r26, r1
    2a7c:	62 1f       	adc	r22, r18
    2a7e:	73 9f       	mul	r23, r19
    2a80:	b0 0d       	add	r27, r0
    2a82:	a1 1d       	adc	r26, r1
    2a84:	62 1f       	adc	r22, r18
    2a86:	83 9f       	mul	r24, r19
    2a88:	a0 0d       	add	r26, r0
    2a8a:	61 1d       	adc	r22, r1
    2a8c:	22 1f       	adc	r18, r18
    2a8e:	74 9f       	mul	r23, r20
    2a90:	33 27       	eor	r19, r19
    2a92:	a0 0d       	add	r26, r0
    2a94:	61 1d       	adc	r22, r1
    2a96:	23 1f       	adc	r18, r19
    2a98:	84 9f       	mul	r24, r20
    2a9a:	60 0d       	add	r22, r0
    2a9c:	21 1d       	adc	r18, r1
    2a9e:	82 2f       	mov	r24, r18
    2aa0:	76 2f       	mov	r23, r22
    2aa2:	6a 2f       	mov	r22, r26
    2aa4:	11 24       	eor	r1, r1
    2aa6:	9f 57       	subi	r25, 0x7F	; 127
    2aa8:	50 40       	sbci	r21, 0x00	; 0
    2aaa:	8a f0       	brmi	.+34     	; 0x2ace <__mulsf3_pse+0x84>
    2aac:	e1 f0       	breq	.+56     	; 0x2ae6 <__mulsf3_pse+0x9c>
    2aae:	88 23       	and	r24, r24
    2ab0:	4a f0       	brmi	.+18     	; 0x2ac4 <__mulsf3_pse+0x7a>
    2ab2:	ee 0f       	add	r30, r30
    2ab4:	ff 1f       	adc	r31, r31
    2ab6:	bb 1f       	adc	r27, r27
    2ab8:	66 1f       	adc	r22, r22
    2aba:	77 1f       	adc	r23, r23
    2abc:	88 1f       	adc	r24, r24
    2abe:	91 50       	subi	r25, 0x01	; 1
    2ac0:	50 40       	sbci	r21, 0x00	; 0
    2ac2:	a9 f7       	brne	.-22     	; 0x2aae <__mulsf3_pse+0x64>
    2ac4:	9e 3f       	cpi	r25, 0xFE	; 254
    2ac6:	51 05       	cpc	r21, r1
    2ac8:	70 f0       	brcs	.+28     	; 0x2ae6 <__mulsf3_pse+0x9c>
    2aca:	14 c0       	rjmp	.+40     	; 0x2af4 <__fp_inf>
    2acc:	a6 cf       	rjmp	.-180    	; 0x2a1a <__fp_szero>
    2ace:	5f 3f       	cpi	r21, 0xFF	; 255
    2ad0:	ec f3       	brlt	.-6      	; 0x2acc <__mulsf3_pse+0x82>
    2ad2:	98 3e       	cpi	r25, 0xE8	; 232
    2ad4:	dc f3       	brlt	.-10     	; 0x2acc <__mulsf3_pse+0x82>
    2ad6:	86 95       	lsr	r24
    2ad8:	77 95       	ror	r23
    2ada:	67 95       	ror	r22
    2adc:	b7 95       	ror	r27
    2ade:	f7 95       	ror	r31
    2ae0:	e7 95       	ror	r30
    2ae2:	9f 5f       	subi	r25, 0xFF	; 255
    2ae4:	c1 f7       	brne	.-16     	; 0x2ad6 <__mulsf3_pse+0x8c>
    2ae6:	fe 2b       	or	r31, r30
    2ae8:	88 0f       	add	r24, r24
    2aea:	91 1d       	adc	r25, r1
    2aec:	96 95       	lsr	r25
    2aee:	87 95       	ror	r24
    2af0:	97 f9       	bld	r25, 7
    2af2:	08 95       	ret

00002af4 <__fp_inf>:
    2af4:	97 f9       	bld	r25, 7
    2af6:	9f 67       	ori	r25, 0x7F	; 127
    2af8:	80 e8       	ldi	r24, 0x80	; 128
    2afa:	70 e0       	ldi	r23, 0x00	; 0
    2afc:	60 e0       	ldi	r22, 0x00	; 0
    2afe:	08 95       	ret

00002b00 <__fp_nan>:
    2b00:	9f ef       	ldi	r25, 0xFF	; 255
    2b02:	80 ec       	ldi	r24, 0xC0	; 192
    2b04:	08 95       	ret

00002b06 <__fp_pscA>:
    2b06:	00 24       	eor	r0, r0
    2b08:	0a 94       	dec	r0
    2b0a:	16 16       	cp	r1, r22
    2b0c:	17 06       	cpc	r1, r23
    2b0e:	18 06       	cpc	r1, r24
    2b10:	09 06       	cpc	r0, r25
    2b12:	08 95       	ret

00002b14 <__fp_pscB>:
    2b14:	00 24       	eor	r0, r0
    2b16:	0a 94       	dec	r0
    2b18:	12 16       	cp	r1, r18
    2b1a:	13 06       	cpc	r1, r19
    2b1c:	14 06       	cpc	r1, r20
    2b1e:	05 06       	cpc	r0, r21
    2b20:	08 95       	ret

00002b22 <__fp_round>:
    2b22:	09 2e       	mov	r0, r25
    2b24:	03 94       	inc	r0
    2b26:	00 0c       	add	r0, r0
    2b28:	11 f4       	brne	.+4      	; 0x2b2e <__fp_round+0xc>
    2b2a:	88 23       	and	r24, r24
    2b2c:	52 f0       	brmi	.+20     	; 0x2b42 <__fp_round+0x20>
    2b2e:	bb 0f       	add	r27, r27
    2b30:	40 f4       	brcc	.+16     	; 0x2b42 <__fp_round+0x20>
    2b32:	bf 2b       	or	r27, r31
    2b34:	11 f4       	brne	.+4      	; 0x2b3a <__fp_round+0x18>
    2b36:	60 ff       	sbrs	r22, 0
    2b38:	04 c0       	rjmp	.+8      	; 0x2b42 <__fp_round+0x20>
    2b3a:	6f 5f       	subi	r22, 0xFF	; 255
    2b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b3e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b40:	9f 4f       	sbci	r25, 0xFF	; 255
    2b42:	08 95       	ret

00002b44 <__divmodhi4>:
    2b44:	97 fb       	bst	r25, 7
    2b46:	09 2e       	mov	r0, r25
    2b48:	07 26       	eor	r0, r23
    2b4a:	0a d0       	rcall	.+20     	; 0x2b60 <__divmodhi4_neg1>
    2b4c:	77 fd       	sbrc	r23, 7
    2b4e:	04 d0       	rcall	.+8      	; 0x2b58 <__divmodhi4_neg2>
    2b50:	0c d0       	rcall	.+24     	; 0x2b6a <__udivmodhi4>
    2b52:	06 d0       	rcall	.+12     	; 0x2b60 <__divmodhi4_neg1>
    2b54:	00 20       	and	r0, r0
    2b56:	1a f4       	brpl	.+6      	; 0x2b5e <__divmodhi4_exit>

00002b58 <__divmodhi4_neg2>:
    2b58:	70 95       	com	r23
    2b5a:	61 95       	neg	r22
    2b5c:	7f 4f       	sbci	r23, 0xFF	; 255

00002b5e <__divmodhi4_exit>:
    2b5e:	08 95       	ret

00002b60 <__divmodhi4_neg1>:
    2b60:	f6 f7       	brtc	.-4      	; 0x2b5e <__divmodhi4_exit>
    2b62:	90 95       	com	r25
    2b64:	81 95       	neg	r24
    2b66:	9f 4f       	sbci	r25, 0xFF	; 255
    2b68:	08 95       	ret

00002b6a <__udivmodhi4>:
    2b6a:	aa 1b       	sub	r26, r26
    2b6c:	bb 1b       	sub	r27, r27
    2b6e:	51 e1       	ldi	r21, 0x11	; 17
    2b70:	07 c0       	rjmp	.+14     	; 0x2b80 <__udivmodhi4_ep>

00002b72 <__udivmodhi4_loop>:
    2b72:	aa 1f       	adc	r26, r26
    2b74:	bb 1f       	adc	r27, r27
    2b76:	a6 17       	cp	r26, r22
    2b78:	b7 07       	cpc	r27, r23
    2b7a:	10 f0       	brcs	.+4      	; 0x2b80 <__udivmodhi4_ep>
    2b7c:	a6 1b       	sub	r26, r22
    2b7e:	b7 0b       	sbc	r27, r23

00002b80 <__udivmodhi4_ep>:
    2b80:	88 1f       	adc	r24, r24
    2b82:	99 1f       	adc	r25, r25
    2b84:	5a 95       	dec	r21
    2b86:	a9 f7       	brne	.-22     	; 0x2b72 <__udivmodhi4_loop>
    2b88:	80 95       	com	r24
    2b8a:	90 95       	com	r25
    2b8c:	bc 01       	movw	r22, r24
    2b8e:	cd 01       	movw	r24, r26
    2b90:	08 95       	ret

00002b92 <do_rand>:
    2b92:	a0 e0       	ldi	r26, 0x00	; 0
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	ef ec       	ldi	r30, 0xCF	; 207
    2b98:	f5 e1       	ldi	r31, 0x15	; 21
    2b9a:	0c 94 16 19 	jmp	0x322c	; 0x322c <__prologue_saves__+0x10>
    2b9e:	ec 01       	movw	r28, r24
    2ba0:	a8 80       	ld	r10, Y
    2ba2:	b9 80       	ldd	r11, Y+1	; 0x01
    2ba4:	ca 80       	ldd	r12, Y+2	; 0x02
    2ba6:	db 80       	ldd	r13, Y+3	; 0x03
    2ba8:	a1 14       	cp	r10, r1
    2baa:	b1 04       	cpc	r11, r1
    2bac:	c1 04       	cpc	r12, r1
    2bae:	d1 04       	cpc	r13, r1
    2bb0:	41 f4       	brne	.+16     	; 0x2bc2 <do_rand+0x30>
    2bb2:	84 e2       	ldi	r24, 0x24	; 36
    2bb4:	a8 2e       	mov	r10, r24
    2bb6:	89 ed       	ldi	r24, 0xD9	; 217
    2bb8:	b8 2e       	mov	r11, r24
    2bba:	8b e5       	ldi	r24, 0x5B	; 91
    2bbc:	c8 2e       	mov	r12, r24
    2bbe:	87 e0       	ldi	r24, 0x07	; 7
    2bc0:	d8 2e       	mov	r13, r24
    2bc2:	c6 01       	movw	r24, r12
    2bc4:	b5 01       	movw	r22, r10
    2bc6:	2d e1       	ldi	r18, 0x1D	; 29
    2bc8:	33 ef       	ldi	r19, 0xF3	; 243
    2bca:	41 e0       	ldi	r20, 0x01	; 1
    2bcc:	50 e0       	ldi	r21, 0x00	; 0
    2bce:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__divmodsi4>
    2bd2:	27 ea       	ldi	r18, 0xA7	; 167
    2bd4:	31 e4       	ldi	r19, 0x41	; 65
    2bd6:	40 e0       	ldi	r20, 0x00	; 0
    2bd8:	50 e0       	ldi	r21, 0x00	; 0
    2bda:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__mulsi3>
    2bde:	7b 01       	movw	r14, r22
    2be0:	8c 01       	movw	r16, r24
    2be2:	c6 01       	movw	r24, r12
    2be4:	b5 01       	movw	r22, r10
    2be6:	2d e1       	ldi	r18, 0x1D	; 29
    2be8:	33 ef       	ldi	r19, 0xF3	; 243
    2bea:	41 e0       	ldi	r20, 0x01	; 1
    2bec:	50 e0       	ldi	r21, 0x00	; 0
    2bee:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__divmodsi4>
    2bf2:	ca 01       	movw	r24, r20
    2bf4:	b9 01       	movw	r22, r18
    2bf6:	2c ee       	ldi	r18, 0xEC	; 236
    2bf8:	34 ef       	ldi	r19, 0xF4	; 244
    2bfa:	4f ef       	ldi	r20, 0xFF	; 255
    2bfc:	5f ef       	ldi	r21, 0xFF	; 255
    2bfe:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__mulsi3>
    2c02:	6e 0d       	add	r22, r14
    2c04:	7f 1d       	adc	r23, r15
    2c06:	80 1f       	adc	r24, r16
    2c08:	91 1f       	adc	r25, r17
    2c0a:	97 ff       	sbrs	r25, 7
    2c0c:	04 c0       	rjmp	.+8      	; 0x2c16 <do_rand+0x84>
    2c0e:	61 50       	subi	r22, 0x01	; 1
    2c10:	70 40       	sbci	r23, 0x00	; 0
    2c12:	80 40       	sbci	r24, 0x00	; 0
    2c14:	90 48       	sbci	r25, 0x80	; 128
    2c16:	68 83       	st	Y, r22
    2c18:	79 83       	std	Y+1, r23	; 0x01
    2c1a:	8a 83       	std	Y+2, r24	; 0x02
    2c1c:	9b 83       	std	Y+3, r25	; 0x03
    2c1e:	9b 01       	movw	r18, r22
    2c20:	3f 77       	andi	r19, 0x7F	; 127
    2c22:	c9 01       	movw	r24, r18
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
    2c28:	ea e0       	ldi	r30, 0x0A	; 10
    2c2a:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__epilogue_restores__+0x10>

00002c2e <rand_r>:
    2c2e:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <do_rand>
    2c32:	08 95       	ret

00002c34 <rand>:
    2c34:	81 e6       	ldi	r24, 0x61	; 97
    2c36:	91 e0       	ldi	r25, 0x01	; 1
    2c38:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <do_rand>
    2c3c:	08 95       	ret

00002c3e <srand>:
    2c3e:	a0 e0       	ldi	r26, 0x00	; 0
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	80 93 61 01 	sts	0x0161, r24
    2c46:	90 93 62 01 	sts	0x0162, r25
    2c4a:	a0 93 63 01 	sts	0x0163, r26
    2c4e:	b0 93 64 01 	sts	0x0164, r27
    2c52:	08 95       	ret

00002c54 <memcpy_P>:
    2c54:	fb 01       	movw	r30, r22
    2c56:	dc 01       	movw	r26, r24
    2c58:	02 c0       	rjmp	.+4      	; 0x2c5e <memcpy_P+0xa>
    2c5a:	05 90       	lpm	r0, Z+
    2c5c:	0d 92       	st	X+, r0
    2c5e:	41 50       	subi	r20, 0x01	; 1
    2c60:	50 40       	sbci	r21, 0x00	; 0
    2c62:	d8 f7       	brcc	.-10     	; 0x2c5a <memcpy_P+0x6>
    2c64:	08 95       	ret

00002c66 <sprintf>:
    2c66:	ae e0       	ldi	r26, 0x0E	; 14
    2c68:	b0 e0       	ldi	r27, 0x00	; 0
    2c6a:	e9 e3       	ldi	r30, 0x39	; 57
    2c6c:	f6 e1       	ldi	r31, 0x16	; 22
    2c6e:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <__prologue_saves__+0x1c>
    2c72:	0d 89       	ldd	r16, Y+21	; 0x15
    2c74:	1e 89       	ldd	r17, Y+22	; 0x16
    2c76:	86 e0       	ldi	r24, 0x06	; 6
    2c78:	8c 83       	std	Y+4, r24	; 0x04
    2c7a:	1a 83       	std	Y+2, r17	; 0x02
    2c7c:	09 83       	std	Y+1, r16	; 0x01
    2c7e:	8f ef       	ldi	r24, 0xFF	; 255
    2c80:	9f e7       	ldi	r25, 0x7F	; 127
    2c82:	9e 83       	std	Y+6, r25	; 0x06
    2c84:	8d 83       	std	Y+5, r24	; 0x05
    2c86:	9e 01       	movw	r18, r28
    2c88:	27 5e       	subi	r18, 0xE7	; 231
    2c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c8c:	ce 01       	movw	r24, r28
    2c8e:	01 96       	adiw	r24, 0x01	; 1
    2c90:	6f 89       	ldd	r22, Y+23	; 0x17
    2c92:	78 8d       	ldd	r23, Y+24	; 0x18
    2c94:	a9 01       	movw	r20, r18
    2c96:	0e 94 57 16 	call	0x2cae	; 0x2cae <vfprintf>
    2c9a:	2f 81       	ldd	r18, Y+7	; 0x07
    2c9c:	38 85       	ldd	r19, Y+8	; 0x08
    2c9e:	02 0f       	add	r16, r18
    2ca0:	13 1f       	adc	r17, r19
    2ca2:	f8 01       	movw	r30, r16
    2ca4:	10 82       	st	Z, r1
    2ca6:	2e 96       	adiw	r28, 0x0e	; 14
    2ca8:	e4 e0       	ldi	r30, 0x04	; 4
    2caa:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__epilogue_restores__+0x1c>

00002cae <vfprintf>:
    2cae:	ab e0       	ldi	r26, 0x0B	; 11
    2cb0:	b0 e0       	ldi	r27, 0x00	; 0
    2cb2:	ed e5       	ldi	r30, 0x5D	; 93
    2cb4:	f6 e1       	ldi	r31, 0x16	; 22
    2cb6:	0c 94 0e 19 	jmp	0x321c	; 0x321c <__prologue_saves__>
    2cba:	3c 01       	movw	r6, r24
    2cbc:	2b 01       	movw	r4, r22
    2cbe:	5a 01       	movw	r10, r20
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	17 82       	std	Z+7, r1	; 0x07
    2cc4:	16 82       	std	Z+6, r1	; 0x06
    2cc6:	83 81       	ldd	r24, Z+3	; 0x03
    2cc8:	81 fd       	sbrc	r24, 1
    2cca:	03 c0       	rjmp	.+6      	; 0x2cd2 <vfprintf+0x24>
    2ccc:	6f ef       	ldi	r22, 0xFF	; 255
    2cce:	7f ef       	ldi	r23, 0xFF	; 255
    2cd0:	c6 c1       	rjmp	.+908    	; 0x305e <vfprintf+0x3b0>
    2cd2:	9a e0       	ldi	r25, 0x0A	; 10
    2cd4:	89 2e       	mov	r8, r25
    2cd6:	1e 01       	movw	r2, r28
    2cd8:	08 94       	sec
    2cda:	21 1c       	adc	r2, r1
    2cdc:	31 1c       	adc	r3, r1
    2cde:	f3 01       	movw	r30, r6
    2ce0:	23 81       	ldd	r18, Z+3	; 0x03
    2ce2:	f2 01       	movw	r30, r4
    2ce4:	23 fd       	sbrc	r18, 3
    2ce6:	85 91       	lpm	r24, Z+
    2ce8:	23 ff       	sbrs	r18, 3
    2cea:	81 91       	ld	r24, Z+
    2cec:	2f 01       	movw	r4, r30
    2cee:	88 23       	and	r24, r24
    2cf0:	09 f4       	brne	.+2      	; 0x2cf4 <vfprintf+0x46>
    2cf2:	b2 c1       	rjmp	.+868    	; 0x3058 <vfprintf+0x3aa>
    2cf4:	85 32       	cpi	r24, 0x25	; 37
    2cf6:	39 f4       	brne	.+14     	; 0x2d06 <vfprintf+0x58>
    2cf8:	23 fd       	sbrc	r18, 3
    2cfa:	85 91       	lpm	r24, Z+
    2cfc:	23 ff       	sbrs	r18, 3
    2cfe:	81 91       	ld	r24, Z+
    2d00:	2f 01       	movw	r4, r30
    2d02:	85 32       	cpi	r24, 0x25	; 37
    2d04:	29 f4       	brne	.+10     	; 0x2d10 <vfprintf+0x62>
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	b3 01       	movw	r22, r6
    2d0a:	0e 94 4a 18 	call	0x3094	; 0x3094 <fputc>
    2d0e:	e7 cf       	rjmp	.-50     	; 0x2cde <vfprintf+0x30>
    2d10:	98 2f       	mov	r25, r24
    2d12:	ff 24       	eor	r15, r15
    2d14:	ee 24       	eor	r14, r14
    2d16:	99 24       	eor	r9, r9
    2d18:	ff e1       	ldi	r31, 0x1F	; 31
    2d1a:	ff 15       	cp	r31, r15
    2d1c:	d0 f0       	brcs	.+52     	; 0x2d52 <vfprintf+0xa4>
    2d1e:	9b 32       	cpi	r25, 0x2B	; 43
    2d20:	69 f0       	breq	.+26     	; 0x2d3c <vfprintf+0x8e>
    2d22:	9c 32       	cpi	r25, 0x2C	; 44
    2d24:	28 f4       	brcc	.+10     	; 0x2d30 <vfprintf+0x82>
    2d26:	90 32       	cpi	r25, 0x20	; 32
    2d28:	59 f0       	breq	.+22     	; 0x2d40 <vfprintf+0x92>
    2d2a:	93 32       	cpi	r25, 0x23	; 35
    2d2c:	91 f4       	brne	.+36     	; 0x2d52 <vfprintf+0xa4>
    2d2e:	0e c0       	rjmp	.+28     	; 0x2d4c <vfprintf+0x9e>
    2d30:	9d 32       	cpi	r25, 0x2D	; 45
    2d32:	49 f0       	breq	.+18     	; 0x2d46 <vfprintf+0x98>
    2d34:	90 33       	cpi	r25, 0x30	; 48
    2d36:	69 f4       	brne	.+26     	; 0x2d52 <vfprintf+0xa4>
    2d38:	41 e0       	ldi	r20, 0x01	; 1
    2d3a:	24 c0       	rjmp	.+72     	; 0x2d84 <vfprintf+0xd6>
    2d3c:	52 e0       	ldi	r21, 0x02	; 2
    2d3e:	f5 2a       	or	r15, r21
    2d40:	84 e0       	ldi	r24, 0x04	; 4
    2d42:	f8 2a       	or	r15, r24
    2d44:	28 c0       	rjmp	.+80     	; 0x2d96 <vfprintf+0xe8>
    2d46:	98 e0       	ldi	r25, 0x08	; 8
    2d48:	f9 2a       	or	r15, r25
    2d4a:	25 c0       	rjmp	.+74     	; 0x2d96 <vfprintf+0xe8>
    2d4c:	e0 e1       	ldi	r30, 0x10	; 16
    2d4e:	fe 2a       	or	r15, r30
    2d50:	22 c0       	rjmp	.+68     	; 0x2d96 <vfprintf+0xe8>
    2d52:	f7 fc       	sbrc	r15, 7
    2d54:	29 c0       	rjmp	.+82     	; 0x2da8 <vfprintf+0xfa>
    2d56:	89 2f       	mov	r24, r25
    2d58:	80 53       	subi	r24, 0x30	; 48
    2d5a:	8a 30       	cpi	r24, 0x0A	; 10
    2d5c:	70 f4       	brcc	.+28     	; 0x2d7a <vfprintf+0xcc>
    2d5e:	f6 fe       	sbrs	r15, 6
    2d60:	05 c0       	rjmp	.+10     	; 0x2d6c <vfprintf+0xbe>
    2d62:	98 9c       	mul	r9, r8
    2d64:	90 2c       	mov	r9, r0
    2d66:	11 24       	eor	r1, r1
    2d68:	98 0e       	add	r9, r24
    2d6a:	15 c0       	rjmp	.+42     	; 0x2d96 <vfprintf+0xe8>
    2d6c:	e8 9c       	mul	r14, r8
    2d6e:	e0 2c       	mov	r14, r0
    2d70:	11 24       	eor	r1, r1
    2d72:	e8 0e       	add	r14, r24
    2d74:	f0 e2       	ldi	r31, 0x20	; 32
    2d76:	ff 2a       	or	r15, r31
    2d78:	0e c0       	rjmp	.+28     	; 0x2d96 <vfprintf+0xe8>
    2d7a:	9e 32       	cpi	r25, 0x2E	; 46
    2d7c:	29 f4       	brne	.+10     	; 0x2d88 <vfprintf+0xda>
    2d7e:	f6 fc       	sbrc	r15, 6
    2d80:	6b c1       	rjmp	.+726    	; 0x3058 <vfprintf+0x3aa>
    2d82:	40 e4       	ldi	r20, 0x40	; 64
    2d84:	f4 2a       	or	r15, r20
    2d86:	07 c0       	rjmp	.+14     	; 0x2d96 <vfprintf+0xe8>
    2d88:	9c 36       	cpi	r25, 0x6C	; 108
    2d8a:	19 f4       	brne	.+6      	; 0x2d92 <vfprintf+0xe4>
    2d8c:	50 e8       	ldi	r21, 0x80	; 128
    2d8e:	f5 2a       	or	r15, r21
    2d90:	02 c0       	rjmp	.+4      	; 0x2d96 <vfprintf+0xe8>
    2d92:	98 36       	cpi	r25, 0x68	; 104
    2d94:	49 f4       	brne	.+18     	; 0x2da8 <vfprintf+0xfa>
    2d96:	f2 01       	movw	r30, r4
    2d98:	23 fd       	sbrc	r18, 3
    2d9a:	95 91       	lpm	r25, Z+
    2d9c:	23 ff       	sbrs	r18, 3
    2d9e:	91 91       	ld	r25, Z+
    2da0:	2f 01       	movw	r4, r30
    2da2:	99 23       	and	r25, r25
    2da4:	09 f0       	breq	.+2      	; 0x2da8 <vfprintf+0xfa>
    2da6:	b8 cf       	rjmp	.-144    	; 0x2d18 <vfprintf+0x6a>
    2da8:	89 2f       	mov	r24, r25
    2daa:	85 54       	subi	r24, 0x45	; 69
    2dac:	83 30       	cpi	r24, 0x03	; 3
    2dae:	18 f0       	brcs	.+6      	; 0x2db6 <vfprintf+0x108>
    2db0:	80 52       	subi	r24, 0x20	; 32
    2db2:	83 30       	cpi	r24, 0x03	; 3
    2db4:	38 f4       	brcc	.+14     	; 0x2dc4 <vfprintf+0x116>
    2db6:	44 e0       	ldi	r20, 0x04	; 4
    2db8:	50 e0       	ldi	r21, 0x00	; 0
    2dba:	a4 0e       	add	r10, r20
    2dbc:	b5 1e       	adc	r11, r21
    2dbe:	5f e3       	ldi	r21, 0x3F	; 63
    2dc0:	59 83       	std	Y+1, r21	; 0x01
    2dc2:	0f c0       	rjmp	.+30     	; 0x2de2 <vfprintf+0x134>
    2dc4:	93 36       	cpi	r25, 0x63	; 99
    2dc6:	31 f0       	breq	.+12     	; 0x2dd4 <vfprintf+0x126>
    2dc8:	93 37       	cpi	r25, 0x73	; 115
    2dca:	79 f0       	breq	.+30     	; 0x2dea <vfprintf+0x13c>
    2dcc:	93 35       	cpi	r25, 0x53	; 83
    2dce:	09 f0       	breq	.+2      	; 0x2dd2 <vfprintf+0x124>
    2dd0:	56 c0       	rjmp	.+172    	; 0x2e7e <vfprintf+0x1d0>
    2dd2:	20 c0       	rjmp	.+64     	; 0x2e14 <vfprintf+0x166>
    2dd4:	f5 01       	movw	r30, r10
    2dd6:	80 81       	ld	r24, Z
    2dd8:	89 83       	std	Y+1, r24	; 0x01
    2dda:	42 e0       	ldi	r20, 0x02	; 2
    2ddc:	50 e0       	ldi	r21, 0x00	; 0
    2dde:	a4 0e       	add	r10, r20
    2de0:	b5 1e       	adc	r11, r21
    2de2:	61 01       	movw	r12, r2
    2de4:	01 e0       	ldi	r16, 0x01	; 1
    2de6:	10 e0       	ldi	r17, 0x00	; 0
    2de8:	12 c0       	rjmp	.+36     	; 0x2e0e <vfprintf+0x160>
    2dea:	f5 01       	movw	r30, r10
    2dec:	c0 80       	ld	r12, Z
    2dee:	d1 80       	ldd	r13, Z+1	; 0x01
    2df0:	f6 fc       	sbrc	r15, 6
    2df2:	03 c0       	rjmp	.+6      	; 0x2dfa <vfprintf+0x14c>
    2df4:	6f ef       	ldi	r22, 0xFF	; 255
    2df6:	7f ef       	ldi	r23, 0xFF	; 255
    2df8:	02 c0       	rjmp	.+4      	; 0x2dfe <vfprintf+0x150>
    2dfa:	69 2d       	mov	r22, r9
    2dfc:	70 e0       	ldi	r23, 0x00	; 0
    2dfe:	42 e0       	ldi	r20, 0x02	; 2
    2e00:	50 e0       	ldi	r21, 0x00	; 0
    2e02:	a4 0e       	add	r10, r20
    2e04:	b5 1e       	adc	r11, r21
    2e06:	c6 01       	movw	r24, r12
    2e08:	0e 94 3f 18 	call	0x307e	; 0x307e <strnlen>
    2e0c:	8c 01       	movw	r16, r24
    2e0e:	5f e7       	ldi	r21, 0x7F	; 127
    2e10:	f5 22       	and	r15, r21
    2e12:	14 c0       	rjmp	.+40     	; 0x2e3c <vfprintf+0x18e>
    2e14:	f5 01       	movw	r30, r10
    2e16:	c0 80       	ld	r12, Z
    2e18:	d1 80       	ldd	r13, Z+1	; 0x01
    2e1a:	f6 fc       	sbrc	r15, 6
    2e1c:	03 c0       	rjmp	.+6      	; 0x2e24 <vfprintf+0x176>
    2e1e:	6f ef       	ldi	r22, 0xFF	; 255
    2e20:	7f ef       	ldi	r23, 0xFF	; 255
    2e22:	02 c0       	rjmp	.+4      	; 0x2e28 <vfprintf+0x17a>
    2e24:	69 2d       	mov	r22, r9
    2e26:	70 e0       	ldi	r23, 0x00	; 0
    2e28:	42 e0       	ldi	r20, 0x02	; 2
    2e2a:	50 e0       	ldi	r21, 0x00	; 0
    2e2c:	a4 0e       	add	r10, r20
    2e2e:	b5 1e       	adc	r11, r21
    2e30:	c6 01       	movw	r24, r12
    2e32:	0e 94 34 18 	call	0x3068	; 0x3068 <strnlen_P>
    2e36:	8c 01       	movw	r16, r24
    2e38:	50 e8       	ldi	r21, 0x80	; 128
    2e3a:	f5 2a       	or	r15, r21
    2e3c:	f3 fe       	sbrs	r15, 3
    2e3e:	07 c0       	rjmp	.+14     	; 0x2e4e <vfprintf+0x1a0>
    2e40:	1a c0       	rjmp	.+52     	; 0x2e76 <vfprintf+0x1c8>
    2e42:	80 e2       	ldi	r24, 0x20	; 32
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	b3 01       	movw	r22, r6
    2e48:	0e 94 4a 18 	call	0x3094	; 0x3094 <fputc>
    2e4c:	ea 94       	dec	r14
    2e4e:	8e 2d       	mov	r24, r14
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	08 17       	cp	r16, r24
    2e54:	19 07       	cpc	r17, r25
    2e56:	a8 f3       	brcs	.-22     	; 0x2e42 <vfprintf+0x194>
    2e58:	0e c0       	rjmp	.+28     	; 0x2e76 <vfprintf+0x1c8>
    2e5a:	f6 01       	movw	r30, r12
    2e5c:	f7 fc       	sbrc	r15, 7
    2e5e:	85 91       	lpm	r24, Z+
    2e60:	f7 fe       	sbrs	r15, 7
    2e62:	81 91       	ld	r24, Z+
    2e64:	6f 01       	movw	r12, r30
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	b3 01       	movw	r22, r6
    2e6a:	0e 94 4a 18 	call	0x3094	; 0x3094 <fputc>
    2e6e:	e1 10       	cpse	r14, r1
    2e70:	ea 94       	dec	r14
    2e72:	01 50       	subi	r16, 0x01	; 1
    2e74:	10 40       	sbci	r17, 0x00	; 0
    2e76:	01 15       	cp	r16, r1
    2e78:	11 05       	cpc	r17, r1
    2e7a:	79 f7       	brne	.-34     	; 0x2e5a <vfprintf+0x1ac>
    2e7c:	ea c0       	rjmp	.+468    	; 0x3052 <vfprintf+0x3a4>
    2e7e:	94 36       	cpi	r25, 0x64	; 100
    2e80:	11 f0       	breq	.+4      	; 0x2e86 <vfprintf+0x1d8>
    2e82:	99 36       	cpi	r25, 0x69	; 105
    2e84:	69 f5       	brne	.+90     	; 0x2ee0 <vfprintf+0x232>
    2e86:	f7 fe       	sbrs	r15, 7
    2e88:	08 c0       	rjmp	.+16     	; 0x2e9a <vfprintf+0x1ec>
    2e8a:	f5 01       	movw	r30, r10
    2e8c:	20 81       	ld	r18, Z
    2e8e:	31 81       	ldd	r19, Z+1	; 0x01
    2e90:	42 81       	ldd	r20, Z+2	; 0x02
    2e92:	53 81       	ldd	r21, Z+3	; 0x03
    2e94:	84 e0       	ldi	r24, 0x04	; 4
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	0a c0       	rjmp	.+20     	; 0x2eae <vfprintf+0x200>
    2e9a:	f5 01       	movw	r30, r10
    2e9c:	80 81       	ld	r24, Z
    2e9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ea0:	9c 01       	movw	r18, r24
    2ea2:	44 27       	eor	r20, r20
    2ea4:	37 fd       	sbrc	r19, 7
    2ea6:	40 95       	com	r20
    2ea8:	54 2f       	mov	r21, r20
    2eaa:	82 e0       	ldi	r24, 0x02	; 2
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	a8 0e       	add	r10, r24
    2eb0:	b9 1e       	adc	r11, r25
    2eb2:	9f e6       	ldi	r25, 0x6F	; 111
    2eb4:	f9 22       	and	r15, r25
    2eb6:	57 ff       	sbrs	r21, 7
    2eb8:	09 c0       	rjmp	.+18     	; 0x2ecc <vfprintf+0x21e>
    2eba:	50 95       	com	r21
    2ebc:	40 95       	com	r20
    2ebe:	30 95       	com	r19
    2ec0:	21 95       	neg	r18
    2ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec4:	4f 4f       	sbci	r20, 0xFF	; 255
    2ec6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ec8:	e0 e8       	ldi	r30, 0x80	; 128
    2eca:	fe 2a       	or	r15, r30
    2ecc:	ca 01       	movw	r24, r20
    2ece:	b9 01       	movw	r22, r18
    2ed0:	a1 01       	movw	r20, r2
    2ed2:	2a e0       	ldi	r18, 0x0A	; 10
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	0e 94 76 18 	call	0x30ec	; 0x30ec <__ultoa_invert>
    2eda:	d8 2e       	mov	r13, r24
    2edc:	d2 18       	sub	r13, r2
    2ede:	40 c0       	rjmp	.+128    	; 0x2f60 <vfprintf+0x2b2>
    2ee0:	95 37       	cpi	r25, 0x75	; 117
    2ee2:	29 f4       	brne	.+10     	; 0x2eee <vfprintf+0x240>
    2ee4:	1f 2d       	mov	r17, r15
    2ee6:	1f 7e       	andi	r17, 0xEF	; 239
    2ee8:	2a e0       	ldi	r18, 0x0A	; 10
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	1d c0       	rjmp	.+58     	; 0x2f28 <vfprintf+0x27a>
    2eee:	1f 2d       	mov	r17, r15
    2ef0:	19 7f       	andi	r17, 0xF9	; 249
    2ef2:	9f 36       	cpi	r25, 0x6F	; 111
    2ef4:	61 f0       	breq	.+24     	; 0x2f0e <vfprintf+0x260>
    2ef6:	90 37       	cpi	r25, 0x70	; 112
    2ef8:	20 f4       	brcc	.+8      	; 0x2f02 <vfprintf+0x254>
    2efa:	98 35       	cpi	r25, 0x58	; 88
    2efc:	09 f0       	breq	.+2      	; 0x2f00 <vfprintf+0x252>
    2efe:	ac c0       	rjmp	.+344    	; 0x3058 <vfprintf+0x3aa>
    2f00:	0f c0       	rjmp	.+30     	; 0x2f20 <vfprintf+0x272>
    2f02:	90 37       	cpi	r25, 0x70	; 112
    2f04:	39 f0       	breq	.+14     	; 0x2f14 <vfprintf+0x266>
    2f06:	98 37       	cpi	r25, 0x78	; 120
    2f08:	09 f0       	breq	.+2      	; 0x2f0c <vfprintf+0x25e>
    2f0a:	a6 c0       	rjmp	.+332    	; 0x3058 <vfprintf+0x3aa>
    2f0c:	04 c0       	rjmp	.+8      	; 0x2f16 <vfprintf+0x268>
    2f0e:	28 e0       	ldi	r18, 0x08	; 8
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	0a c0       	rjmp	.+20     	; 0x2f28 <vfprintf+0x27a>
    2f14:	10 61       	ori	r17, 0x10	; 16
    2f16:	14 fd       	sbrc	r17, 4
    2f18:	14 60       	ori	r17, 0x04	; 4
    2f1a:	20 e1       	ldi	r18, 0x10	; 16
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	04 c0       	rjmp	.+8      	; 0x2f28 <vfprintf+0x27a>
    2f20:	14 fd       	sbrc	r17, 4
    2f22:	16 60       	ori	r17, 0x06	; 6
    2f24:	20 e1       	ldi	r18, 0x10	; 16
    2f26:	32 e0       	ldi	r19, 0x02	; 2
    2f28:	17 ff       	sbrs	r17, 7
    2f2a:	08 c0       	rjmp	.+16     	; 0x2f3c <vfprintf+0x28e>
    2f2c:	f5 01       	movw	r30, r10
    2f2e:	60 81       	ld	r22, Z
    2f30:	71 81       	ldd	r23, Z+1	; 0x01
    2f32:	82 81       	ldd	r24, Z+2	; 0x02
    2f34:	93 81       	ldd	r25, Z+3	; 0x03
    2f36:	44 e0       	ldi	r20, 0x04	; 4
    2f38:	50 e0       	ldi	r21, 0x00	; 0
    2f3a:	08 c0       	rjmp	.+16     	; 0x2f4c <vfprintf+0x29e>
    2f3c:	f5 01       	movw	r30, r10
    2f3e:	80 81       	ld	r24, Z
    2f40:	91 81       	ldd	r25, Z+1	; 0x01
    2f42:	bc 01       	movw	r22, r24
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	42 e0       	ldi	r20, 0x02	; 2
    2f4a:	50 e0       	ldi	r21, 0x00	; 0
    2f4c:	a4 0e       	add	r10, r20
    2f4e:	b5 1e       	adc	r11, r21
    2f50:	a1 01       	movw	r20, r2
    2f52:	0e 94 76 18 	call	0x30ec	; 0x30ec <__ultoa_invert>
    2f56:	d8 2e       	mov	r13, r24
    2f58:	d2 18       	sub	r13, r2
    2f5a:	8f e7       	ldi	r24, 0x7F	; 127
    2f5c:	f8 2e       	mov	r15, r24
    2f5e:	f1 22       	and	r15, r17
    2f60:	f6 fe       	sbrs	r15, 6
    2f62:	0b c0       	rjmp	.+22     	; 0x2f7a <vfprintf+0x2cc>
    2f64:	5e ef       	ldi	r21, 0xFE	; 254
    2f66:	f5 22       	and	r15, r21
    2f68:	d9 14       	cp	r13, r9
    2f6a:	38 f4       	brcc	.+14     	; 0x2f7a <vfprintf+0x2cc>
    2f6c:	f4 fe       	sbrs	r15, 4
    2f6e:	07 c0       	rjmp	.+14     	; 0x2f7e <vfprintf+0x2d0>
    2f70:	f2 fc       	sbrc	r15, 2
    2f72:	05 c0       	rjmp	.+10     	; 0x2f7e <vfprintf+0x2d0>
    2f74:	8f ee       	ldi	r24, 0xEF	; 239
    2f76:	f8 22       	and	r15, r24
    2f78:	02 c0       	rjmp	.+4      	; 0x2f7e <vfprintf+0x2d0>
    2f7a:	1d 2d       	mov	r17, r13
    2f7c:	01 c0       	rjmp	.+2      	; 0x2f80 <vfprintf+0x2d2>
    2f7e:	19 2d       	mov	r17, r9
    2f80:	f4 fe       	sbrs	r15, 4
    2f82:	0d c0       	rjmp	.+26     	; 0x2f9e <vfprintf+0x2f0>
    2f84:	fe 01       	movw	r30, r28
    2f86:	ed 0d       	add	r30, r13
    2f88:	f1 1d       	adc	r31, r1
    2f8a:	80 81       	ld	r24, Z
    2f8c:	80 33       	cpi	r24, 0x30	; 48
    2f8e:	19 f4       	brne	.+6      	; 0x2f96 <vfprintf+0x2e8>
    2f90:	99 ee       	ldi	r25, 0xE9	; 233
    2f92:	f9 22       	and	r15, r25
    2f94:	08 c0       	rjmp	.+16     	; 0x2fa6 <vfprintf+0x2f8>
    2f96:	1f 5f       	subi	r17, 0xFF	; 255
    2f98:	f2 fe       	sbrs	r15, 2
    2f9a:	05 c0       	rjmp	.+10     	; 0x2fa6 <vfprintf+0x2f8>
    2f9c:	03 c0       	rjmp	.+6      	; 0x2fa4 <vfprintf+0x2f6>
    2f9e:	8f 2d       	mov	r24, r15
    2fa0:	86 78       	andi	r24, 0x86	; 134
    2fa2:	09 f0       	breq	.+2      	; 0x2fa6 <vfprintf+0x2f8>
    2fa4:	1f 5f       	subi	r17, 0xFF	; 255
    2fa6:	0f 2d       	mov	r16, r15
    2fa8:	f3 fc       	sbrc	r15, 3
    2faa:	14 c0       	rjmp	.+40     	; 0x2fd4 <vfprintf+0x326>
    2fac:	f0 fe       	sbrs	r15, 0
    2fae:	0f c0       	rjmp	.+30     	; 0x2fce <vfprintf+0x320>
    2fb0:	1e 15       	cp	r17, r14
    2fb2:	10 f0       	brcs	.+4      	; 0x2fb8 <vfprintf+0x30a>
    2fb4:	9d 2c       	mov	r9, r13
    2fb6:	0b c0       	rjmp	.+22     	; 0x2fce <vfprintf+0x320>
    2fb8:	9d 2c       	mov	r9, r13
    2fba:	9e 0c       	add	r9, r14
    2fbc:	91 1a       	sub	r9, r17
    2fbe:	1e 2d       	mov	r17, r14
    2fc0:	06 c0       	rjmp	.+12     	; 0x2fce <vfprintf+0x320>
    2fc2:	80 e2       	ldi	r24, 0x20	; 32
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	b3 01       	movw	r22, r6
    2fc8:	0e 94 4a 18 	call	0x3094	; 0x3094 <fputc>
    2fcc:	1f 5f       	subi	r17, 0xFF	; 255
    2fce:	1e 15       	cp	r17, r14
    2fd0:	c0 f3       	brcs	.-16     	; 0x2fc2 <vfprintf+0x314>
    2fd2:	04 c0       	rjmp	.+8      	; 0x2fdc <vfprintf+0x32e>
    2fd4:	1e 15       	cp	r17, r14
    2fd6:	10 f4       	brcc	.+4      	; 0x2fdc <vfprintf+0x32e>
    2fd8:	e1 1a       	sub	r14, r17
    2fda:	01 c0       	rjmp	.+2      	; 0x2fde <vfprintf+0x330>
    2fdc:	ee 24       	eor	r14, r14
    2fde:	04 ff       	sbrs	r16, 4
    2fe0:	0f c0       	rjmp	.+30     	; 0x3000 <vfprintf+0x352>
    2fe2:	80 e3       	ldi	r24, 0x30	; 48
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	b3 01       	movw	r22, r6
    2fe8:	0e 94 4a 18 	call	0x3094	; 0x3094 <fputc>
    2fec:	02 ff       	sbrs	r16, 2
    2fee:	1d c0       	rjmp	.+58     	; 0x302a <vfprintf+0x37c>
    2ff0:	01 fd       	sbrc	r16, 1
    2ff2:	03 c0       	rjmp	.+6      	; 0x2ffa <vfprintf+0x34c>
    2ff4:	88 e7       	ldi	r24, 0x78	; 120
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	0e c0       	rjmp	.+28     	; 0x3016 <vfprintf+0x368>
    2ffa:	88 e5       	ldi	r24, 0x58	; 88
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	0b c0       	rjmp	.+22     	; 0x3016 <vfprintf+0x368>
    3000:	80 2f       	mov	r24, r16
    3002:	86 78       	andi	r24, 0x86	; 134
    3004:	91 f0       	breq	.+36     	; 0x302a <vfprintf+0x37c>
    3006:	01 ff       	sbrs	r16, 1
    3008:	02 c0       	rjmp	.+4      	; 0x300e <vfprintf+0x360>
    300a:	8b e2       	ldi	r24, 0x2B	; 43
    300c:	01 c0       	rjmp	.+2      	; 0x3010 <vfprintf+0x362>
    300e:	80 e2       	ldi	r24, 0x20	; 32
    3010:	f7 fc       	sbrc	r15, 7
    3012:	8d e2       	ldi	r24, 0x2D	; 45
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	b3 01       	movw	r22, r6
    3018:	0e 94 4a 18 	call	0x3094	; 0x3094 <fputc>
    301c:	06 c0       	rjmp	.+12     	; 0x302a <vfprintf+0x37c>
    301e:	80 e3       	ldi	r24, 0x30	; 48
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	b3 01       	movw	r22, r6
    3024:	0e 94 4a 18 	call	0x3094	; 0x3094 <fputc>
    3028:	9a 94       	dec	r9
    302a:	d9 14       	cp	r13, r9
    302c:	c0 f3       	brcs	.-16     	; 0x301e <vfprintf+0x370>
    302e:	da 94       	dec	r13
    3030:	f1 01       	movw	r30, r2
    3032:	ed 0d       	add	r30, r13
    3034:	f1 1d       	adc	r31, r1
    3036:	80 81       	ld	r24, Z
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	b3 01       	movw	r22, r6
    303c:	0e 94 4a 18 	call	0x3094	; 0x3094 <fputc>
    3040:	dd 20       	and	r13, r13
    3042:	a9 f7       	brne	.-22     	; 0x302e <vfprintf+0x380>
    3044:	06 c0       	rjmp	.+12     	; 0x3052 <vfprintf+0x3a4>
    3046:	80 e2       	ldi	r24, 0x20	; 32
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	b3 01       	movw	r22, r6
    304c:	0e 94 4a 18 	call	0x3094	; 0x3094 <fputc>
    3050:	ea 94       	dec	r14
    3052:	ee 20       	and	r14, r14
    3054:	c1 f7       	brne	.-16     	; 0x3046 <vfprintf+0x398>
    3056:	43 ce       	rjmp	.-890    	; 0x2cde <vfprintf+0x30>
    3058:	f3 01       	movw	r30, r6
    305a:	66 81       	ldd	r22, Z+6	; 0x06
    305c:	77 81       	ldd	r23, Z+7	; 0x07
    305e:	cb 01       	movw	r24, r22
    3060:	2b 96       	adiw	r28, 0x0b	; 11
    3062:	e2 e1       	ldi	r30, 0x12	; 18
    3064:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <__epilogue_restores__>

00003068 <strnlen_P>:
    3068:	fc 01       	movw	r30, r24
    306a:	05 90       	lpm	r0, Z+
    306c:	61 50       	subi	r22, 0x01	; 1
    306e:	70 40       	sbci	r23, 0x00	; 0
    3070:	01 10       	cpse	r0, r1
    3072:	d8 f7       	brcc	.-10     	; 0x306a <strnlen_P+0x2>
    3074:	80 95       	com	r24
    3076:	90 95       	com	r25
    3078:	8e 0f       	add	r24, r30
    307a:	9f 1f       	adc	r25, r31
    307c:	08 95       	ret

0000307e <strnlen>:
    307e:	fc 01       	movw	r30, r24
    3080:	61 50       	subi	r22, 0x01	; 1
    3082:	70 40       	sbci	r23, 0x00	; 0
    3084:	01 90       	ld	r0, Z+
    3086:	01 10       	cpse	r0, r1
    3088:	d8 f7       	brcc	.-10     	; 0x3080 <strnlen+0x2>
    308a:	80 95       	com	r24
    308c:	90 95       	com	r25
    308e:	8e 0f       	add	r24, r30
    3090:	9f 1f       	adc	r25, r31
    3092:	08 95       	ret

00003094 <fputc>:
    3094:	0f 93       	push	r16
    3096:	1f 93       	push	r17
    3098:	cf 93       	push	r28
    309a:	df 93       	push	r29
    309c:	8c 01       	movw	r16, r24
    309e:	eb 01       	movw	r28, r22
    30a0:	8b 81       	ldd	r24, Y+3	; 0x03
    30a2:	81 ff       	sbrs	r24, 1
    30a4:	1b c0       	rjmp	.+54     	; 0x30dc <fputc+0x48>
    30a6:	82 ff       	sbrs	r24, 2
    30a8:	0d c0       	rjmp	.+26     	; 0x30c4 <fputc+0x30>
    30aa:	2e 81       	ldd	r18, Y+6	; 0x06
    30ac:	3f 81       	ldd	r19, Y+7	; 0x07
    30ae:	8c 81       	ldd	r24, Y+4	; 0x04
    30b0:	9d 81       	ldd	r25, Y+5	; 0x05
    30b2:	28 17       	cp	r18, r24
    30b4:	39 07       	cpc	r19, r25
    30b6:	64 f4       	brge	.+24     	; 0x30d0 <fputc+0x3c>
    30b8:	e8 81       	ld	r30, Y
    30ba:	f9 81       	ldd	r31, Y+1	; 0x01
    30bc:	01 93       	st	Z+, r16
    30be:	f9 83       	std	Y+1, r31	; 0x01
    30c0:	e8 83       	st	Y, r30
    30c2:	06 c0       	rjmp	.+12     	; 0x30d0 <fputc+0x3c>
    30c4:	e8 85       	ldd	r30, Y+8	; 0x08
    30c6:	f9 85       	ldd	r31, Y+9	; 0x09
    30c8:	80 2f       	mov	r24, r16
    30ca:	09 95       	icall
    30cc:	89 2b       	or	r24, r25
    30ce:	31 f4       	brne	.+12     	; 0x30dc <fputc+0x48>
    30d0:	8e 81       	ldd	r24, Y+6	; 0x06
    30d2:	9f 81       	ldd	r25, Y+7	; 0x07
    30d4:	01 96       	adiw	r24, 0x01	; 1
    30d6:	9f 83       	std	Y+7, r25	; 0x07
    30d8:	8e 83       	std	Y+6, r24	; 0x06
    30da:	02 c0       	rjmp	.+4      	; 0x30e0 <fputc+0x4c>
    30dc:	0f ef       	ldi	r16, 0xFF	; 255
    30de:	1f ef       	ldi	r17, 0xFF	; 255
    30e0:	c8 01       	movw	r24, r16
    30e2:	df 91       	pop	r29
    30e4:	cf 91       	pop	r28
    30e6:	1f 91       	pop	r17
    30e8:	0f 91       	pop	r16
    30ea:	08 95       	ret

000030ec <__ultoa_invert>:
    30ec:	fa 01       	movw	r30, r20
    30ee:	aa 27       	eor	r26, r26
    30f0:	28 30       	cpi	r18, 0x08	; 8
    30f2:	51 f1       	breq	.+84     	; 0x3148 <__ultoa_invert+0x5c>
    30f4:	20 31       	cpi	r18, 0x10	; 16
    30f6:	81 f1       	breq	.+96     	; 0x3158 <__ultoa_invert+0x6c>
    30f8:	e8 94       	clt
    30fa:	6f 93       	push	r22
    30fc:	6e 7f       	andi	r22, 0xFE	; 254
    30fe:	6e 5f       	subi	r22, 0xFE	; 254
    3100:	7f 4f       	sbci	r23, 0xFF	; 255
    3102:	8f 4f       	sbci	r24, 0xFF	; 255
    3104:	9f 4f       	sbci	r25, 0xFF	; 255
    3106:	af 4f       	sbci	r26, 0xFF	; 255
    3108:	b1 e0       	ldi	r27, 0x01	; 1
    310a:	3e d0       	rcall	.+124    	; 0x3188 <__ultoa_invert+0x9c>
    310c:	b4 e0       	ldi	r27, 0x04	; 4
    310e:	3c d0       	rcall	.+120    	; 0x3188 <__ultoa_invert+0x9c>
    3110:	67 0f       	add	r22, r23
    3112:	78 1f       	adc	r23, r24
    3114:	89 1f       	adc	r24, r25
    3116:	9a 1f       	adc	r25, r26
    3118:	a1 1d       	adc	r26, r1
    311a:	68 0f       	add	r22, r24
    311c:	79 1f       	adc	r23, r25
    311e:	8a 1f       	adc	r24, r26
    3120:	91 1d       	adc	r25, r1
    3122:	a1 1d       	adc	r26, r1
    3124:	6a 0f       	add	r22, r26
    3126:	71 1d       	adc	r23, r1
    3128:	81 1d       	adc	r24, r1
    312a:	91 1d       	adc	r25, r1
    312c:	a1 1d       	adc	r26, r1
    312e:	20 d0       	rcall	.+64     	; 0x3170 <__ultoa_invert+0x84>
    3130:	09 f4       	brne	.+2      	; 0x3134 <__ultoa_invert+0x48>
    3132:	68 94       	set
    3134:	3f 91       	pop	r19
    3136:	2a e0       	ldi	r18, 0x0A	; 10
    3138:	26 9f       	mul	r18, r22
    313a:	11 24       	eor	r1, r1
    313c:	30 19       	sub	r19, r0
    313e:	30 5d       	subi	r19, 0xD0	; 208
    3140:	31 93       	st	Z+, r19
    3142:	de f6       	brtc	.-74     	; 0x30fa <__ultoa_invert+0xe>
    3144:	cf 01       	movw	r24, r30
    3146:	08 95       	ret
    3148:	46 2f       	mov	r20, r22
    314a:	47 70       	andi	r20, 0x07	; 7
    314c:	40 5d       	subi	r20, 0xD0	; 208
    314e:	41 93       	st	Z+, r20
    3150:	b3 e0       	ldi	r27, 0x03	; 3
    3152:	0f d0       	rcall	.+30     	; 0x3172 <__ultoa_invert+0x86>
    3154:	c9 f7       	brne	.-14     	; 0x3148 <__ultoa_invert+0x5c>
    3156:	f6 cf       	rjmp	.-20     	; 0x3144 <__ultoa_invert+0x58>
    3158:	46 2f       	mov	r20, r22
    315a:	4f 70       	andi	r20, 0x0F	; 15
    315c:	40 5d       	subi	r20, 0xD0	; 208
    315e:	4a 33       	cpi	r20, 0x3A	; 58
    3160:	18 f0       	brcs	.+6      	; 0x3168 <__ultoa_invert+0x7c>
    3162:	49 5d       	subi	r20, 0xD9	; 217
    3164:	31 fd       	sbrc	r19, 1
    3166:	40 52       	subi	r20, 0x20	; 32
    3168:	41 93       	st	Z+, r20
    316a:	02 d0       	rcall	.+4      	; 0x3170 <__ultoa_invert+0x84>
    316c:	a9 f7       	brne	.-22     	; 0x3158 <__ultoa_invert+0x6c>
    316e:	ea cf       	rjmp	.-44     	; 0x3144 <__ultoa_invert+0x58>
    3170:	b4 e0       	ldi	r27, 0x04	; 4
    3172:	a6 95       	lsr	r26
    3174:	97 95       	ror	r25
    3176:	87 95       	ror	r24
    3178:	77 95       	ror	r23
    317a:	67 95       	ror	r22
    317c:	ba 95       	dec	r27
    317e:	c9 f7       	brne	.-14     	; 0x3172 <__ultoa_invert+0x86>
    3180:	00 97       	sbiw	r24, 0x00	; 0
    3182:	61 05       	cpc	r22, r1
    3184:	71 05       	cpc	r23, r1
    3186:	08 95       	ret
    3188:	9b 01       	movw	r18, r22
    318a:	ac 01       	movw	r20, r24
    318c:	0a 2e       	mov	r0, r26
    318e:	06 94       	lsr	r0
    3190:	57 95       	ror	r21
    3192:	47 95       	ror	r20
    3194:	37 95       	ror	r19
    3196:	27 95       	ror	r18
    3198:	ba 95       	dec	r27
    319a:	c9 f7       	brne	.-14     	; 0x318e <__ultoa_invert+0xa2>
    319c:	62 0f       	add	r22, r18
    319e:	73 1f       	adc	r23, r19
    31a0:	84 1f       	adc	r24, r20
    31a2:	95 1f       	adc	r25, r21
    31a4:	a0 1d       	adc	r26, r0
    31a6:	08 95       	ret

000031a8 <__mulsi3>:
    31a8:	62 9f       	mul	r22, r18
    31aa:	d0 01       	movw	r26, r0
    31ac:	73 9f       	mul	r23, r19
    31ae:	f0 01       	movw	r30, r0
    31b0:	82 9f       	mul	r24, r18
    31b2:	e0 0d       	add	r30, r0
    31b4:	f1 1d       	adc	r31, r1
    31b6:	64 9f       	mul	r22, r20
    31b8:	e0 0d       	add	r30, r0
    31ba:	f1 1d       	adc	r31, r1
    31bc:	92 9f       	mul	r25, r18
    31be:	f0 0d       	add	r31, r0
    31c0:	83 9f       	mul	r24, r19
    31c2:	f0 0d       	add	r31, r0
    31c4:	74 9f       	mul	r23, r20
    31c6:	f0 0d       	add	r31, r0
    31c8:	65 9f       	mul	r22, r21
    31ca:	f0 0d       	add	r31, r0
    31cc:	99 27       	eor	r25, r25
    31ce:	72 9f       	mul	r23, r18
    31d0:	b0 0d       	add	r27, r0
    31d2:	e1 1d       	adc	r30, r1
    31d4:	f9 1f       	adc	r31, r25
    31d6:	63 9f       	mul	r22, r19
    31d8:	b0 0d       	add	r27, r0
    31da:	e1 1d       	adc	r30, r1
    31dc:	f9 1f       	adc	r31, r25
    31de:	bd 01       	movw	r22, r26
    31e0:	cf 01       	movw	r24, r30
    31e2:	11 24       	eor	r1, r1
    31e4:	08 95       	ret

000031e6 <__divmodsi4>:
    31e6:	97 fb       	bst	r25, 7
    31e8:	09 2e       	mov	r0, r25
    31ea:	05 26       	eor	r0, r21
    31ec:	0e d0       	rcall	.+28     	; 0x320a <__divmodsi4_neg1>
    31ee:	57 fd       	sbrc	r21, 7
    31f0:	04 d0       	rcall	.+8      	; 0x31fa <__divmodsi4_neg2>
    31f2:	4b d0       	rcall	.+150    	; 0x328a <__udivmodsi4>
    31f4:	0a d0       	rcall	.+20     	; 0x320a <__divmodsi4_neg1>
    31f6:	00 1c       	adc	r0, r0
    31f8:	38 f4       	brcc	.+14     	; 0x3208 <__divmodsi4_exit>

000031fa <__divmodsi4_neg2>:
    31fa:	50 95       	com	r21
    31fc:	40 95       	com	r20
    31fe:	30 95       	com	r19
    3200:	21 95       	neg	r18
    3202:	3f 4f       	sbci	r19, 0xFF	; 255
    3204:	4f 4f       	sbci	r20, 0xFF	; 255
    3206:	5f 4f       	sbci	r21, 0xFF	; 255

00003208 <__divmodsi4_exit>:
    3208:	08 95       	ret

0000320a <__divmodsi4_neg1>:
    320a:	f6 f7       	brtc	.-4      	; 0x3208 <__divmodsi4_exit>
    320c:	90 95       	com	r25
    320e:	80 95       	com	r24
    3210:	70 95       	com	r23
    3212:	61 95       	neg	r22
    3214:	7f 4f       	sbci	r23, 0xFF	; 255
    3216:	8f 4f       	sbci	r24, 0xFF	; 255
    3218:	9f 4f       	sbci	r25, 0xFF	; 255
    321a:	08 95       	ret

0000321c <__prologue_saves__>:
    321c:	2f 92       	push	r2
    321e:	3f 92       	push	r3
    3220:	4f 92       	push	r4
    3222:	5f 92       	push	r5
    3224:	6f 92       	push	r6
    3226:	7f 92       	push	r7
    3228:	8f 92       	push	r8
    322a:	9f 92       	push	r9
    322c:	af 92       	push	r10
    322e:	bf 92       	push	r11
    3230:	cf 92       	push	r12
    3232:	df 92       	push	r13
    3234:	ef 92       	push	r14
    3236:	ff 92       	push	r15
    3238:	0f 93       	push	r16
    323a:	1f 93       	push	r17
    323c:	cf 93       	push	r28
    323e:	df 93       	push	r29
    3240:	cd b7       	in	r28, 0x3d	; 61
    3242:	de b7       	in	r29, 0x3e	; 62
    3244:	ca 1b       	sub	r28, r26
    3246:	db 0b       	sbc	r29, r27
    3248:	0f b6       	in	r0, 0x3f	; 63
    324a:	f8 94       	cli
    324c:	de bf       	out	0x3e, r29	; 62
    324e:	0f be       	out	0x3f, r0	; 63
    3250:	cd bf       	out	0x3d, r28	; 61
    3252:	09 94       	ijmp

00003254 <__epilogue_restores__>:
    3254:	2a 88       	ldd	r2, Y+18	; 0x12
    3256:	39 88       	ldd	r3, Y+17	; 0x11
    3258:	48 88       	ldd	r4, Y+16	; 0x10
    325a:	5f 84       	ldd	r5, Y+15	; 0x0f
    325c:	6e 84       	ldd	r6, Y+14	; 0x0e
    325e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3260:	8c 84       	ldd	r8, Y+12	; 0x0c
    3262:	9b 84       	ldd	r9, Y+11	; 0x0b
    3264:	aa 84       	ldd	r10, Y+10	; 0x0a
    3266:	b9 84       	ldd	r11, Y+9	; 0x09
    3268:	c8 84       	ldd	r12, Y+8	; 0x08
    326a:	df 80       	ldd	r13, Y+7	; 0x07
    326c:	ee 80       	ldd	r14, Y+6	; 0x06
    326e:	fd 80       	ldd	r15, Y+5	; 0x05
    3270:	0c 81       	ldd	r16, Y+4	; 0x04
    3272:	1b 81       	ldd	r17, Y+3	; 0x03
    3274:	aa 81       	ldd	r26, Y+2	; 0x02
    3276:	b9 81       	ldd	r27, Y+1	; 0x01
    3278:	ce 0f       	add	r28, r30
    327a:	d1 1d       	adc	r29, r1
    327c:	0f b6       	in	r0, 0x3f	; 63
    327e:	f8 94       	cli
    3280:	de bf       	out	0x3e, r29	; 62
    3282:	0f be       	out	0x3f, r0	; 63
    3284:	cd bf       	out	0x3d, r28	; 61
    3286:	ed 01       	movw	r28, r26
    3288:	08 95       	ret

0000328a <__udivmodsi4>:
    328a:	a1 e2       	ldi	r26, 0x21	; 33
    328c:	1a 2e       	mov	r1, r26
    328e:	aa 1b       	sub	r26, r26
    3290:	bb 1b       	sub	r27, r27
    3292:	fd 01       	movw	r30, r26
    3294:	0d c0       	rjmp	.+26     	; 0x32b0 <__udivmodsi4_ep>

00003296 <__udivmodsi4_loop>:
    3296:	aa 1f       	adc	r26, r26
    3298:	bb 1f       	adc	r27, r27
    329a:	ee 1f       	adc	r30, r30
    329c:	ff 1f       	adc	r31, r31
    329e:	a2 17       	cp	r26, r18
    32a0:	b3 07       	cpc	r27, r19
    32a2:	e4 07       	cpc	r30, r20
    32a4:	f5 07       	cpc	r31, r21
    32a6:	20 f0       	brcs	.+8      	; 0x32b0 <__udivmodsi4_ep>
    32a8:	a2 1b       	sub	r26, r18
    32aa:	b3 0b       	sbc	r27, r19
    32ac:	e4 0b       	sbc	r30, r20
    32ae:	f5 0b       	sbc	r31, r21

000032b0 <__udivmodsi4_ep>:
    32b0:	66 1f       	adc	r22, r22
    32b2:	77 1f       	adc	r23, r23
    32b4:	88 1f       	adc	r24, r24
    32b6:	99 1f       	adc	r25, r25
    32b8:	1a 94       	dec	r1
    32ba:	69 f7       	brne	.-38     	; 0x3296 <__udivmodsi4_loop>
    32bc:	60 95       	com	r22
    32be:	70 95       	com	r23
    32c0:	80 95       	com	r24
    32c2:	90 95       	com	r25
    32c4:	9b 01       	movw	r18, r22
    32c6:	ac 01       	movw	r20, r24
    32c8:	bd 01       	movw	r22, r26
    32ca:	cf 01       	movw	r24, r30
    32cc:	08 95       	ret

000032ce <_exit>:
    32ce:	f8 94       	cli

000032d0 <__stop_program>:
    32d0:	ff cf       	rjmp	.-2      	; 0x32d0 <__stop_program>
